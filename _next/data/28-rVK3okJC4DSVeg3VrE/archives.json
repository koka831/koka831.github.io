{"pageProps":{"posts":[{"slug":"2023-12-31-recap","title":"2023年振り返り","categories":["Diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Diary"],"content":"<h3 id=\"今年の目標\"><a href=\"#今年の目標\">今年の目標</a></h3>\n<ul>\n<li>運動 → (オペ後を除いて)平均して週5で30分程度の運動量を確保できた.</li>\n</ul>\n<h3 id=\"どんな年\"><a href=\"#どんな年\">どんな年</a></h3>\n<p>腸を切った</p>\n<h3 id=\"来年は\"><a href=\"#来年は\">来年は</a></h3>\n<ul>\n<li>引き続き運動</li>\n<li>アウトプット</li>\n</ul>","description":"year on review 2023","commits":[{"title":"review 2023","date":"2024-01-02 19:11:12","hash":"a51f7077","diff":"<div class=\"remark-highlight\"><pre data-file=\"a51f7077.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit a51f70778300c4757775b559d5a62cacd9211220</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Tue Jan 2 19:11:12 2024 +0900\n\n  review 2023\n\ndiff --git a/_posts/2023-12-31-recap.md b/_posts/2023-12-31-recap.md\nnew file mode 100644\nindex 0000000..fded9db\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2023-12-31-recap.md</span>\n<span class=\"token coord\">@@ -0,0 +1,22 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 2023年振り返り</span>\n<span class=\"token inserted\">+date: 2023-12-31</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+description: year on review 2023</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 今年の目標</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 運動 → (オペ後を除いて)平均して週5で30分程度の運動量を確保できた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### どんな年</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+腸を切った</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 来年は</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 引き続き運動</span>\n<span class=\"token inserted\">+- アウトプット</span>\n</code></pre></div>"}],"publishedAt":"2023-12-31","updatedAt":"2024-01-02"},{"slug":"2022_12_31_recap","title":"2022年振り返り","categories":["Diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Diary"],"content":"<h3 id=\"去年の目標\"><a href=\"#去年の目標\">去年の目標</a></h3>\n<ul>\n<li>安易にわかったつもりにならない → 一年間だいぶ気をつけて過ごせた</li>\n<li>運動 → ↑に注力したため完全に忘れてた</li>\n</ul>\n<h3 id=\"どんな年\"><a href=\"#どんな年\">どんな年</a></h3>\n<h4 id=\"紅茶コーディネータの資格をとった\"><a href=\"#紅茶コーディネータの資格をとった\">紅茶コーディネータの資格をとった</a></h4>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">いえーい <a href=\"https://t.co/Tn5yT49xig\" rel=\"nofollow\">pic.twitter.com/Tn5yT49xig</a></p>— koka (@k_0ka) <a href=\"https://twitter.com/k_0ka/status/1491401349422288904?ref_src=twsrc%5Etfw\" rel=\"nofollow\">February 9, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>トータル10ヶ月くらいかかった。\n必須課題がWEBテスト5回と実習レポート1回で、任意課題が10個くらい。\n正直取得したことでなにかが変わったりとかはなかったし、紅茶が好きな人なら淹れ方も知ってる内容ではあると思う。</p>\n<p>個人的に最も勉強になったのはペアリングフード・アレンジティーの章で、基本的なお菓子が作れるようになった。</p>\n<h4 id=\"読んだ本\"><a href=\"#読んだ本\">読んだ本</a></h4>\n<p>なんとなく分かったつもりになってる内容の本を読んだ。</p>\n<ul>\n<li>SYSTEM DESIGN INTERVIEW (Volume 1, 2)</li>\n<li>TEAM TOPOLOGIES</li>\n<li>Designing Data-Intensive Applications</li>\n<li>Capitarism without Capital</li>\n<li>The good immigrant</li>\n<li>プログラム意味論</li>\n<li>並行プログラミング入門</li>\n<li>Measure, Integral and Probability: 買ったけどあまり読めてない</li>\n</ul>\n<h4 id=\"プライベート\"><a href=\"#プライベート\">プライベート</a></h4>\n<p>秋頃からOSS活動をちょっと始めた。</p>\n<img src=\"/img/github_activity.png\">\n<p><code>rust-lang/rust</code>にいくつか取り込まれたものもあるが、ほとんどが<code>rust-lang/clippy</code>に対するPR。<br>\nある程度成熟したプロジェクトだが、新しいlintを実装したり、他のlintのFalse positiveを修正したり色々貢献できる箇所は多い印象。</p>\n<p>また、このブログ用につくった<a href=\"remark-container\">remark-custom-container</a>が他でも使われ始めたようで、いくつかissueやPRの対応を行った。</p>\n<p>大きいのは<a href=\"https://github.com/koka831/remark-custom-container/pull/139\" rel=\"nofollow\">これ</a>で、custom containerの要素に文字列以外の要素を持てるようになった。</p>\n<h3 id=\"来年は\"><a href=\"#来年は\">来年は</a></h3>\n<ul>\n<li>運動</li>\n</ul>","description":"year on review 2022","commits":[{"title":"review 2022","date":"2022-12-31 22:40:09","hash":"a4d13cff","diff":"<div class=\"remark-highlight\"><pre data-file=\"a4d13cff.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit a4d13cff00a1aa77c25dbfd718bb91d67b077de9</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Dec 31 22:40:09 2022 +0900\n\n  review 2022\n\ndiff --git a/_posts/2022_12_31_recap.md b/_posts/2022_12_31_recap.md\nnew file mode 100644\nindex 0000000..4b2f4b2\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2022_12_31_recap.md</span>\n<span class=\"token coord\">@@ -0,0 +1,59 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 2022年振り返り</span>\n<span class=\"token inserted\">+date: 2022-12-31</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+description: year on review 2022</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 去年の目標</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 安易にわかったつもりにならない → 一年間だいぶ気をつけて過ごせた</span>\n<span class=\"token inserted\">+- 運動 → ↑に注力したため完全に忘れてた</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### どんな年</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 紅茶コーディネータの資格をとった</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;blockquote class=\"twitter-tweet\"&#x26;gt;&#x26;lt;p lang=\"ja\" dir=\"ltr\"&#x26;gt;いえーい &#x26;lt;a href=\"https://t.co/Tn5yT49xig\"&#x26;gt;pic.twitter.com/Tn5yT49xig&#x26;lt;/a&#x26;gt;&#x26;lt;/p&#x26;gt;&#x26;mdash; koka (@k_0ka) &#x26;lt;a href=\"https://twitter.com/k_0ka/status/1491401349422288904?ref_src=twsrc%5Etfw\"&#x26;gt;February 9, 2022&#x26;lt;/a&#x26;gt;&#x26;lt;/blockquote&#x26;gt; &#x26;lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&#x26;gt;&#x26;lt;/script&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+トータル10ヶ月くらいかかった。</span>\n<span class=\"token inserted\">+必須課題がWEBテスト5回と実習レポート1回で、任意課題が10個くらい。</span>\n<span class=\"token inserted\">+正直取得したことでなにかが変わったりとかはなかったし、紅茶が好きな人なら淹れ方も知ってる内容ではあると思う。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+個人的に最も勉強になったのはペアリングフード・アレンジティーの章で、基本的なお菓子が作れるようになった。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 読んだ本</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なんとなく分かったつもりになってる内容の本を読んだ。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- SYSTEM DESIGN INTERVIEW (Volume 1, 2)</span>\n<span class=\"token inserted\">+- TEAM TOPOLOGIES</span>\n<span class=\"token inserted\">+- Designing Data-Intensive Applications</span>\n<span class=\"token inserted\">+- Capitarism without Capital</span>\n<span class=\"token inserted\">+- The good immigrant</span>\n<span class=\"token inserted\">+- プログラム意味論</span>\n<span class=\"token inserted\">+- 並行プログラミング入門</span>\n<span class=\"token inserted\">+- Measure, Integral and Probability: 買ったけどあまり読めてない</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### プライベート</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+秋頃からOSS活動をちょっと始めた。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;img src=\"/img/github_activity.png\" /&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`rust-lang/rust`にいくつか取り込まれたものもあるが、ほとんどが`rust-lang/clippy`に対するPR。  </span>\n<span class=\"token inserted\">+ある程度成熟したプロジェクトだが、新しいlintを実装したり、他のlintのFalse positiveを修正したり色々貢献できる箇所は多い印象。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また、このブログ用につくった[remark-custom-container](remark-container)が他でも使われ始めたようで、いくつかissueやPRの対応を行った。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+大きいのは[これ](https://github.com/koka831/remark-custom-container/pull/139)で、custom containerの要素に文字列以外の要素を持てるようになった。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 来年は</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 運動</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[remark-container]: https://github.com/koka831/remark-custom-container/pulls</span>\n</code></pre></div>"}],"publishedAt":"2022-12-31","updatedAt":"2022-12-31"},{"slug":"2022_11_23_custom-container","title":"Release remark-custom-container 1.2.0","categories":["dev"],"image":"https://koka831.github.io/img/icon.png","tags":["lib"],"content":"<p>Until v1.2.0, <a href=\"https://github.com/koka831/remark-custom-container\" rel=\"nofollow\"><code>remark-custom-container</code></a> only handle single-line element as a container child, since it relies on naive regular expression.<br>\nNow it supports multiple elements as children of container directives.</p>\n<h3 id=\"example\"><a href=\"#example\">example</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-markdown\"><code class=\"language-markdown\">::: info sample title\n\nContainer children\nContainer children\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>details</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>summary</span><span class=\"token punctuation\">></span></span>HTML tag works too<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>summary</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>:tada:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>details</span><span class=\"token punctuation\">></span></span>\n\n:::\n</code></pre></div>\n<p>will be rendered as follows:</p>\n<div class=\"remark-container info\"><div class=\"remark-container__title\">sample title</div><p>Container children\nContainer children</p><details>\n  <summary>HTML tag works too</summary>\n  <p>🎉</p>\n</details></div>","description":"Support multiple contents in the container directive","commits":[{"title":"update remark-custom-container to 1.2.0","date":"2022-11-27 00:25:35","hash":"897b048f","diff":"<div class=\"remark-highlight\"><pre data-file=\"897b048f.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 897b048fe31450b5d4f6545855125b76492f9066</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Nov 27 00:25:35 2022 +0900\n\n  update remark-custom-container to 1.2.0\n  \n  fix\n\ndiff --git a/_posts/2022_11_23_custom-container.md b/_posts/2022_11_23_custom-container.md\nnew file mode 100644\nindex 0000000..bb40774\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2022_11_23_custom-container.md</span>\n<span class=\"token coord\">@@ -0,0 +1,44 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: Release remark-custom-container 1.2.0</span>\n<span class=\"token inserted\">+date: 2022-11-27</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- dev</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- lib</span>\n<span class=\"token inserted\">+description: Support multiple contents in the container directive</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Until v1.2.0, [`remark-custom-container`][repo] only handle single-line element as a container child, since it relies on naive regular expression.  </span>\n<span class=\"token inserted\">+Now it supports multiple elements as children of container directives.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### example</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```markdown</span>\n<span class=\"token inserted\">+::: info sample title</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Container children</span>\n<span class=\"token inserted\">+Container children</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;details&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;summary&#x26;gt;HTML tag works too&#x26;lt;/summary&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;p&#x26;gt;:tada:&#x26;lt;/p&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/details&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+will be rendered as follows:</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+::: info sample title</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Container children</span>\n<span class=\"token inserted\">+Container children</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;details&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;summary&#x26;gt;HTML tag works too&#x26;lt;/summary&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;p&#x26;gt;🎉&#x26;lt;/p&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/details&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[repo]: https://github.com/koka831/remark-custom-container</span>\n</code></pre></div>"}],"publishedAt":"2022-11-27","updatedAt":"2022-11-27"},{"slug":"2022_10_30_rust-tools-for-clippy","title":"clippyの開発でもrust-analyzerを使いたい","categories":["memo"],"image":"https://koka831.github.io/img/icon.png","tags":["Rust"],"content":"<p><a href=\"https://github.com/rust-lang/rust-clippy\" rel=\"nofollow\">rust-clippy</a>はrustcのAPIを利用しており、<code>clippy</code>のソースコードを編集する際、デフォルトでは<a href=\"https://rust-analyzer.github.io/\" rel=\"nofollow\">rust-analyzer</a>の補完が効かない.\nそのため<code>rust-analyzer</code>に対し以下の設定が必要.</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"rust-analyzer.rustc.source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"discover\"</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これを<a href=\"https://github.com/simrat39/rust-tools.nvim\" rel=\"nofollow\">rust-tools.nvim</a>で設定する方法が若干わかりづらかったのでメモ.</p>\n<h2 id=\"tldr\"><a href=\"#tldr\">TL;DR</a></h2>\n<p>結論、以下の様に<code>server</code>に対し<code>settings.[\"rust-analyzer\"]</code>を渡す.</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rust-tools'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  server <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    settings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"rust-analyzer\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        rustc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          source <span class=\"token operator\">=</span> <span class=\"token string\">\"discover\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<hr>\n<p><code>rust-tools</code>の<a href=\"https://github.com/simrat39/rust-tools.nvim#configuration\" rel=\"nofollow\">#configuration</a>の項を見ると、<code>rust-analyzer</code>へのオプションを渡す<code>server</code>が用意されていることがわかる.</p>\n<div class=\"remark-highlight\"><pre data-file=\"rust-tools.nvim#configuration\" class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- all the opts to send to nvim-lspconfig</span>\n  <span class=\"token comment\">-- these override the defaults set by rust-tools.nvim</span>\n  <span class=\"token comment\">-- see <a href=\"https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer\" class=\"token url-link\" rel=\"nofollow\">https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer</a></span>\n  server <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">-- standalone file support</span>\n    <span class=\"token comment\">-- setting it to false may improve startup time</span>\n    standalone <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- rust-analyzer options</span>\n</code></pre></div>\n<blockquote>\n<p>all the opts to send to nvim-lspconfig</p>\n</blockquote>\n<p>とあるので、<code>nvim-lspconfig</code>での設定をそのまま<code>rust-tools</code>の<code>server</code>に記述すればよいのだが、当時の自分は\"そうは言っても<code>[\"rust-analyzer\"]</code>ディレクティブに渡すのだろう\"と思い込みんでいた.</p>","description":"rust-tools.nvim(nvim-lspconfig)でrust-clippyの開発時にrust-analyzerの補完を有効化するための設定方法","commits":[{"title":"add note","date":"2022-10-30 14:46:09","hash":"8733dd35","diff":"<div class=\"remark-highlight\"><pre data-file=\"8733dd35.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 8733dd3554345ab4543ae9927dd51a40c1a89585</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Oct 30 14:46:09 2022 +0900\n\n  add note\n\ndiff --git a/_posts/2022_10_30_rust-tools-for-clippy.md b/_posts/2022_10_30_rust-tools-for-clippy.md\nnew file mode 100644\nindex 0000000..c6142c3\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2022_10_30_rust-tools-for-clippy.md</span>\n<span class=\"token coord\">@@ -0,0 +1,60 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: clippyの開発でもrust-analyzerを使いたい</span>\n<span class=\"token inserted\">+date: 2022-10-30</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- memo</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Rust</span>\n<span class=\"token inserted\">+description: rust-tools.nvim(nvim-lspconfig)でrust-clippyの開発時にrust-analyzerの補完を有効化するための設定方法</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[rust-clippy][clippy]はrustcのAPIを利用しており、`clippy`のソースコードを編集する際、デフォルトでは[rust-analyzer][analzer]の補完が効かない.</span>\n<span class=\"token inserted\">+そのため`rust-analyzer`に対し以下の設定が必要.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```json</span>\n<span class=\"token inserted\">+{ \"rust-analyzer.rustc.source\": \"discover\" }</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これを[rust-tools.nvim][tools]で設定する方法が若干わかりづらかったのでメモ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## TL;DR</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+結論、以下の様に`server`に対し`settings.[\"rust-analyzer\"]`を渡す.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```lua</span>\n<span class=\"token inserted\">+require('rust-tools').setup({</span>\n<span class=\"token inserted\">+  server = {</span>\n<span class=\"token inserted\">+    settings = {</span>\n<span class=\"token inserted\">+      [\"rust-analyzer\"] = {</span>\n<span class=\"token inserted\">+        rustc = {</span>\n<span class=\"token inserted\">+          source = \"discover\"</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+      }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+})</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`rust-tools`の[#configuration][config]の項を見ると、`rust-analyzer`へのオプションを渡す`server`が用意されていることがわかる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```lua[data-file=\"rust-tools.nvim#configuration\"]</span>\n<span class=\"token inserted\">+  -- all the opts to send to nvim-lspconfig</span>\n<span class=\"token inserted\">+  -- these override the defaults set by rust-tools.nvim</span>\n<span class=\"token inserted\">+  -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer</span>\n<span class=\"token inserted\">+  server = {</span>\n<span class=\"token inserted\">+    -- standalone file support</span>\n<span class=\"token inserted\">+    -- setting it to false may improve startup time</span>\n<span class=\"token inserted\">+    standalone = true,</span>\n<span class=\"token inserted\">+  }, -- rust-analyzer options</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;gt; all the opts to send to nvim-lspconfig</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+とあるので、`nvim-lspconfig`での設定をそのまま`rust-tools`の`server`に記述すればよいのだが、当時の自分は\"そうは言っても`[\"rust-analyzer\"]`ディレクティブに渡すのだろう\"と思い込みんでいた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[clippy]: https://github.com/rust-lang/rust-clippy</span>\n<span class=\"token inserted\">+[analzer]: https://rust-analyzer.github.io/</span>\n<span class=\"token inserted\">+[tools]: https://github.com/simrat39/rust-tools.nvim</span>\n<span class=\"token inserted\">+[config]: https://github.com/simrat39/rust-tools.nvim#configuration</span>\n</code></pre></div>"}],"publishedAt":"2022-10-30","updatedAt":"2022-10-30"},{"slug":"2021-12-31-recap","title":"2021年振り返り","categories":["Diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Diary"],"content":"<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">復帰です、対戦ありがとうございました。<br>後々振り返ります</p>— koka (@k_0ka) <a href=\"https://twitter.com/k_0ka/status/1368585546780397573?ref_src=twsrc%5Etfw\" rel=\"nofollow\">March 7, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>2021年は自分として時間を過ごせたので満点。</p>\n<h3 id=\"どんな年\"><a href=\"#どんな年\">どんな年</a></h3>\n<p>2020年の頭から精神的に不調をきたしていて、1年がかりで寛解ということになった。<br>\n引き金になった出来事はあるにせよ、もともと理想の自分と現実の自分との差に落ち込むことが多々あったので、どのみちこうなっていたとは思う。</p>\n<p>子供の頃から、自分が失敗したときに後始末を他の人にさせてしまうことがとても苦痛だった。<br>\nそういうときに割りを食った人が自分のことを責めてくれればまだいいのだけれど、大抵は優しく、ときに腫れ物に触れるように、慰めるように接してくれる。<br>\nその人の優しさだったり、あるいは社交性であることを頭では理解しているつもりだけど、内心ではその人から見限られたのではないかと正気ではいられない。</p>\n<hr>\n<p>プログラミングは個人で挑戦と失敗のサイクルを回せる。誰にも迷惑はかけない。<br>\nでもソフトウェアエンジニアリングになると話が変わってくる。これは個人戦ではない。<br>\nメンバーごとに求められる役割は異なり、その役割も変化していく。</p>\n<p>僕はチームのメンバーとしての動き方と開発者個人としての動き方が頻繁に切り替わることに慣れておらず、体調を崩してしまった。</p>\n<p>ということで復帰してから、プライベートでは自分に足りてなかった部分の勉強を主にしていた。</p>\n<p>主題はエンジニアリングで、設計やテスト、エクストリームプログラミングなど自分の弱みに沿った本を選んだ。\n過去に読んだ本も、理解したつもりになっているものがあったのでいくつかピックアップした。</p>\n<ul>\n<li>PATTERNS OF ENTERPRISE APPLICATION ARCHITECTURE</li>\n<li>Clean Architecture 達人に学ぶソフトウェアの構造と設計</li>\n<li>Effective Ruby</li>\n<li>The RSpec Book</li>\n<li>組織パターン</li>\n<li>Design It! プログラマーのためのアーキテクティング入門</li>\n<li>セキュア・バイ・デザイン 安全なソフトウェア設計</li>\n<li>CISOハンドブック 業務執行のための情報セキュリティ実践ガイド</li>\n<li>リファクタリング 既存のコードを安全に改善する [第2版]</li>\n</ul>\n<p>単純に読みたい本も読んだ。</p>\n<ul>\n<li>Rust in Action</li>\n<li>Rust for Rustaceans</li>\n<li>Zero to Production in Rust</li>\n<li>Webブラウザセキュリティ</li>\n</ul>\n<p>数はかなり少ない代わりに、常に読み返すような感じで生活していたので満足度は悪くない。<br>\n4回とか読んだ本でも5回目に得られる気付きがあったりした。</p>\n<h3 id=\"プライベート\"><a href=\"#プライベート\">プライベート</a></h3>\n<p>6月頃からコーチングを依頼して、今も継続している。<br>\n最初は思考の過程を含めた自分の意見を伝える練習としてお願いしたが、かなり効果が出ているように感じる。</p>\n<p>これは来年も継続していきたい。</p>\n<p>次に春から受講を始めた紅茶コーディネーターは、まだ課題が残っている(12月で完了予定だった)。<br>\nやることはまだ残っているが、3回に1回くらいはまともなお茶を淹れられるようになった気がする。</p>\n<h3 id=\"反省\"><a href=\"#反省\">反省</a></h3>\n<p>iPadを購入して、普段のノートがすべて電子化された。<br>\nそれ自体はいいのだけれど、見える形でアウトプットせずに満足することが増えたので、来年はこまめに書いていきたい(読んだ本の記録とかも)。</p>\n<p>ヘルニアになってしまった(完)。<br>\nアーロンチェアを買って無敵のつもりでいたが、人体はとても脆い。</p>\n<h3 id=\"来年は\"><a href=\"#来年は\">来年は</a></h3>\n<ul>\n<li>安易にわかったつもりにならない</li>\n<li>運動(椎間板は運動しないと栄養が届かないらしい、ホンマ)</li>\n</ul>\n<p>の2本立てでお送りします。</p>\n<hr>\n<small>\n今年もお世話になりました。<br>\n特に僕が復帰するまでの間気にかけてくださった皆さんには、必ず恩返しができるように精進します。\n</small>","description":"year on review 2021","commits":[{"title":"review","date":"2021-12-31 22:17:23","hash":"48703b52","diff":"<div class=\"remark-highlight\"><pre data-file=\"48703b52.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 48703b52575a00b63190ea061f51ea2133b23c21</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Fri Dec 31 22:17:23 2021 +0900\n\n  review\n\ndiff --git a/_posts/2021-12-31-recap.md b/_posts/2021-12-31-recap.md\nnew file mode 100644\nindex 0000000..f7f2530\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2021-12-31-recap.md</span>\n<span class=\"token coord\">@@ -0,0 +1,88 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 2021年振り返り</span>\n<span class=\"token inserted\">+date: 2021-12-31</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+description: year on review 2021</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;blockquote class=\"twitter-tweet\"&#x26;gt;&#x26;lt;p lang=\"ja\" dir=\"ltr\"&#x26;gt;復帰です、対戦ありがとうございました。&#x26;lt;br&#x26;gt;後々振り返ります&#x26;lt;/p&#x26;gt;&#x26;mdash; koka (@k_0ka) &#x26;lt;a href=\"https://twitter.com/k_0ka/status/1368585546780397573?ref_src=twsrc%5Etfw\"&#x26;gt;March 7, 2021&#x26;lt;/a&#x26;gt;&#x26;lt;/blockquote&#x26;gt; &#x26;lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&#x26;gt;&#x26;lt;/script&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+2021年は自分として時間を過ごせたので満点。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### どんな年</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+2020年の頭から精神的に不調をきたしていて、1年がかりで寛解ということになった。  </span>\n<span class=\"token inserted\">+引き金になった出来事はあるにせよ、もともと理想の自分と現実の自分との差に落ち込むことが多々あったので、どのみちこうなっていたとは思う。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+子供の頃から、自分が失敗したときに後始末を他の人にさせてしまうことがとても苦痛だった。  </span>\n<span class=\"token inserted\">+そういうときに割りを食った人が自分のことを責めてくれればまだいいのだけれど、大抵は優しく、ときに腫れ物に触れるように、慰めるように接してくれる。  </span>\n<span class=\"token inserted\">+その人の優しさだったり、あるいは社交性であることを頭では理解しているつもりだけど、内心ではその人から見限られたのではないかと正気ではいられない。  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+プログラミングは個人で挑戦と失敗のサイクルを回せる。誰にも迷惑はかけない。  </span>\n<span class=\"token inserted\">+でもソフトウェアエンジニアリングになると話が変わってくる。これは個人戦ではない。  </span>\n<span class=\"token inserted\">+メンバーごとに求められる役割は異なり、その役割も変化していく。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+僕はチームのメンバーとしての動き方と開発者個人としての動き方が頻繁に切り替わることに慣れておらず、体調を崩してしまった。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ということで復帰してから、プライベートでは自分に足りてなかった部分の勉強を主にしていた。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+主題はエンジニアリングで、設計やテスト、エクストリームプログラミングなど自分の弱みに沿った本を選んだ。</span>\n<span class=\"token inserted\">+過去に読んだ本も、理解したつもりになっているものがあったのでいくつかピックアップした。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- PATTERNS OF ENTERPRISE APPLICATION ARCHITECTURE</span>\n<span class=\"token inserted\">+- Clean Architecture 達人に学ぶソフトウェアの構造と設計</span>\n<span class=\"token inserted\">+- Effective Ruby</span>\n<span class=\"token inserted\">+- The RSpec Book</span>\n<span class=\"token inserted\">+- 組織パターン</span>\n<span class=\"token inserted\">+- Design It! プログラマーのためのアーキテクティング入門</span>\n<span class=\"token inserted\">+- セキュア・バイ・デザイン 安全なソフトウェア設計</span>\n<span class=\"token inserted\">+- CISOハンドブック 業務執行のための情報セキュリティ実践ガイド</span>\n<span class=\"token inserted\">+- リファクタリング 既存のコードを安全に改善する [第2版]</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+単純に読みたい本も読んだ。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- Rust in Action</span>\n<span class=\"token inserted\">+- Rust for Rustaceans</span>\n<span class=\"token inserted\">+- Zero to Production in Rust</span>\n<span class=\"token inserted\">+- Webブラウザセキュリティ</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+数はかなり少ない代わりに、常に読み返すような感じで生活していたので満足度は悪くない。  </span>\n<span class=\"token inserted\">+4回とか読んだ本でも5回目に得られる気付きがあったりした。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### プライベート</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+6月頃からコーチングを依頼して、今も継続している。  </span>\n<span class=\"token inserted\">+最初は思考の過程を含めた自分の意見を伝える練習としてお願いしたが、かなり効果が出ているように感じる。  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これは来年も継続していきたい。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に春から受講を始めた紅茶コーディネーターは、まだ課題が残っている(12月で完了予定だった)。  </span>\n<span class=\"token inserted\">+やることはまだ残っているが、3回に1回くらいはまともなお茶を淹れられるようになった気がする。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 反省</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+iPadを購入して、普段のノートがすべて電子化された。  </span>\n<span class=\"token inserted\">+それ自体はいいのだけれど、見える形でアウトプットせずに満足することが増えたので、来年はこまめに書いていきたい(読んだ本の記録とかも)。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ヘルニアになってしまった(完)。  </span>\n<span class=\"token inserted\">+アーロンチェアを買って無敵のつもりでいたが、人体はとても脆い。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 来年は</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 安易にわかったつもりにならない</span>\n<span class=\"token inserted\">+- 運動(椎間板は運動しないと栄養が届かないらしい、ホンマ)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+の2本立てでお送りします。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;small&#x26;gt;</span>\n<span class=\"token inserted\">+今年もお世話になりました。&#x26;lt;br /&#x26;gt;</span>\n<span class=\"token inserted\">+特に僕が復帰するまでの間気にかけてくださった皆さんには、必ず恩返しができるように精進します。</span>\n<span class=\"token inserted\">+&#x26;lt;/small&#x26;gt;</span>\n</code></pre></div>"}],"publishedAt":"2021-12-31","updatedAt":"2021-12-31"},{"slug":"2021-04-25-nextjs-from-vuepress","title":"Renewal Blog","categories":["Diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Diary"],"content":"<p>1年ぶりになります．今年もよろしくお願いします．</p>\n<p>最近は紅茶コーディネータになるべく日々精進しています<sup><a href=\"#user-content-fn-tea\" id=\"user-content-fnref-tea\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>．</p>\n<h2 id=\"tldr\"><a href=\"#tldr\">TL;DR</a></h2>\n<ul>\n<li><a href=\"https://vuepress.vuejs.org/\" rel=\"nofollow\">VuePress</a>のアルファ版を使っていて，メンテが辛くなった</li>\n<li><a href=\"https://nextjs.org/\" rel=\"nofollow\">Next.js</a> + <a href=\"https://github.com/remarkjs/remark\" rel=\"nofollow\">remark</a>でMarkdown->HTMLのSGを構築した</li>\n<li><a href=\"https://github.com/koka831/koka831.github.io\" rel=\"nofollow\">できたもの</a></li>\n</ul>\n<h2 id=\"about\"><a href=\"#about\">About</a></h2>\n<p>ブログを書こうと思い立って，以前構築したブログを久々に確認した.\n今つかってるパソコンにブログのソースコードを持ってきていなかったので，<code>npm install</code>すると脆弱性の嵐.</p>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">$npm i</span>\n<span class=\"token output\">removed 22 packages, changed 14 packages, and audited 1090 packages in 8s</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">33 vulnerabilities (7 low, 15 moderate, 11 high)</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">To address issues that do not require attention, run:</span>\n<span class=\"token output\">  npm audit fix</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">To address all issues, run:</span>\n<span class=\"token output\">  npm audit fix --force</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">Run `npm audit` for details.</span>\n</code></pre></div>\n<p>また，ブログシステムのベースに使っているVuePressが0.xから1.8までバージョンアップしていたので，これは追従しよう.</p>\n<p>しかし早々に更新を断念. デザインをフルスクラッチでやるためにVuePressのソースを<code>eject</code>していたため，追従をすべて手でやる必要があった.</p>\n<p>ブログ自体のメンテにはそこまでコストをかけてられないので，今度は<code>eject</code>しなくてもデザインを触れるライブラリを選定することにした.</p>\n<ul>\n<li>開発言語自体にはこだわりはないが，型システムはほしい</li>\n<li>マークダウンで書ける</li>\n<li>サーバ管理は避けたいので，GitHub Pagesに載せられるもの</li>\n</ul>\n<p>を探した.最終的には次の2つから選んだ. <del>結局相当のyak shavingが発生した.</del></p>\n<h3 id=\"gatsbyjs\"><a href=\"#gatsbyjs\">Gatsby.js</a></h3>\n<p><a href=\"https://www.gatsbyjs.com/\" rel=\"nofollow\">Gatsby.js</a>はReact.jsをベースにしたリッチなCMSフレームワーク.バックエンドとはGraphQLで連携し，コンテンツの取得は<a href=\"https://www.contentful.com/\" rel=\"nofollow\">contentful</a>+Markdownだったりと選定の自由度が高い.</p>\n<p>SGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</p>\n<h3 id=\"nextjs\"><a href=\"#nextjs\">Next.js</a></h3>\n<p><a href=\"https://nextjs.org/\" rel=\"nofollow\">Next.js</a>はGatsby.jsと比べると薄いフレームワークで，ビルドやルーティング等ベースとなる機能の提供がメインになっている.\nStatic Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</p>\n<p>したがってCMSとして使うためにはそれ相当の機能の実装が必要となるため，<del>コストは高い</del>面白そう.</p>\n<h2 id=\"artifacts\"><a href=\"#artifacts\">Artifacts</a></h2>\n<p><a href=\"https://koka831.github.io/\" rel=\"nofollow\">これ</a>ができた.</p>\n<h3 id=\"architecture\"><a href=\"#architecture\">Architecture</a></h3>\n<p>Next.jsの<a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\" rel=\"nofollow\"><code>getStaticProps</code></a>と<a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\" rel=\"nofollow\"><code>getStaticPaths</code></a>を用いて一覧・詳細ページをSG.\nコンテンツはMarkdownで記述し，<a href=\"https://github.com/remarkjs/remark\" rel=\"nofollow\">remark</a>を用いてHTMLを生成している．\nNext.js側でも<a href=\"https://nextjs.org/blog/markdown\" rel=\"nofollow\">MDX</a>(Markdown+React Component)を描画できる仕組みがあったけど，内部で呼ばれているコンパイラに手を加えるのに難儀したため，情報の多いremarkを選んだ.</p>\n<p>(<a href=\"https://github.com/mizchi/amdx\" rel=\"nofollow\">amdx</a>はマジですごいと思う)</p>\n<p>remarkはMarkdownを入力として，指定した形式での出力を行うプロセッサで，fig.1のように<code>Parser</code>，<code>Transformer</code>や<code>Compiler</code>といったプラグインを処理に挟むことができる.\n受け取ったMarkdownは<a href=\"https://github.com/syntax-tree/mdast\" rel=\"nofollow\">mdast</a><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup>という形式のastに変換され，プラグインはmdastを受取りmdastを返すよう要求される.</p>\n<div class=\"remark-highlight\"><pre data-file=\"process\" class=\"language-asciidoc\"><code class=\"language-asciidoc\">| ........................ process ........................... |\n| .......... parse ... | ... run ... | ... stringify ..........|\n\n          <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------<span class=\"token punctuation\">+</span></span>                     <span class=\"token inline\"><span class=\"token punctuation\">+</span>----------<span class=\"token punctuation\">+</span></span>\nInput ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output\n          <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------<span class=\"token punctuation\">+</span></span>          |          <span class=\"token inline\"><span class=\"token punctuation\">+</span>----------<span class=\"token punctuation\">+</span></span>\n                              X\n                              |\n                       <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------------<span class=\"token punctuation\">+</span></span>\n                       | Transformers |\n                       <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------------<span class=\"token punctuation\">+</span></span>\n</code></pre></div>\n<p><strong>fig.1 remarkの変換プロセス. 図はベースとなるunifiedから. [<a href=\"https://github.com/unifiedjs/unified#description\" rel=\"nofollow\">出典</a>]</strong></p>\n<p>このブログではそこそこプラグインを使っていて，中には自作したものもある<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">3</a></sup>.</p>\n<div class=\"remark-highlight\"><pre data-file=\"interpreter.ts\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> markdownToHtml <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>markdown<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">remark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>gfm<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-gfm</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-math</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-emoji</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 自作 | VuePressで使っていたCustom Container記法に対応</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>caption<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 自作 | Markdown中の画像に対して通し番号+figcaptionを付与</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>prism<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-prism</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>externalLink<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-external-links</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>slug<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-slug</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>headings<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> behavior<span class=\"token operator\">:</span> <span class=\"token string\">\"wrap\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-autolink-headings</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>footnotes<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-footnotes</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>remark2rehype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-rehype | mdastからhast形式へ変換</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>katex<span class=\"token punctuation\">)</span> <span class=\"token comment\">// rehype-katex | remark-mathで変換したmarkdownでの数式をkatex記法へ変換</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>stringify<span class=\"token punctuation\">)</span> <span class=\"token comment\">// rehype-stringify</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre></div>\n<p><strong>fig.2 プラグイン一覧</strong></p>\n<h3 id=\"remark-plugin\"><a href=\"#remark-plugin\">remark plugin</a></h3>\n<p>実際作ってみると結構簡単に実装できる. READMEにあるサンプルだと型情報がなかったりで結構辛いけど，fig.1と<a href=\"https://unifiedjs.com/learn/guide/create-a-plugin/\" rel=\"nofollow\">guide</a>が参考になる.</p>\n<ul>\n<li><strong>remark-container</strong></li>\n</ul>\n<p>もともと使っていたVuePressでは，Custom Containersと呼ばれるMarkdownの拡張記法が使える<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">4</a></sup>.</p>\n<div class=\"remark-highlight\"><pre data-file=\"custom-container.md\" class=\"language-markdown\"><code class=\"language-markdown\">::: info Custom Title\n\nCustom Container Body\n\n:::\n</code></pre></div>\n<p><strong>fig.3 これがこうじゃ</strong></p>\n<div class=\"remark-container info\"><div class=\"remark-container__title\">Custom Title</div><p>Custom Container Body</p></div>\n<p>remark版を探すといくつか見つかったけど，どれも動かなかったので作ることにした.</p>\n<p>実装は正規表現でdirectiveにマッチした行のastを書き換えるもので，単純なため対応してないケースもある(directive内のcode blockとかnodeが分割されるケース).\nこれらの対応は<a href=\"https://github.com/remarkjs/remark-directive\" rel=\"nofollow\">remark-directive</a>を用いて後々やりたい.</p>\n<ul>\n<li><strong>remark-image-caption</strong></li>\n</ul>\n<p>img要素のようなself-closing tagについては<code>::before</code>等の疑似要素が使えないため，例えばMarkdownで記述した画像のタイトルをCSSのみで抽出・表示するといったことができない．</p>\n<p>画像に対してcaptionを付与するプラグインは動作するいくつか見つかったけど，画像に対して連番を振ってくれるようなものは見当たらなかった.</p>\n<div class=\"remark-highlight\"><pre data-file=\"image.md\" class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">alt text</span>](<span class=\"token url\">image.png</span> <span class=\"token string\">\"image title\"</span>)</span>\n</code></pre></div>\n<p></p><figure><img src=\"/img/icon.png\" alt=\"alt text\" title=\"image title\"><figcaption>img.1 image title</figcaption></figure><p></p>\n<p>今回作成したプラグインでは，画像を<code>&#x3C;figure></code>タグで囲んでタイトルを<code>&#x3C;figcaption></code>に設定するようにした.\nただ，この手法は例えばtableのようなMarkdown記法でタイトルを付与できない要素に対しては使えないため，画像やコード，テーブル等の直下の<code>em</code>や<code>strong</code>をcaptionとみなすといったやり方に移行すると思う.</p>\n<h3 id=\"commit-log\"><a href=\"#commit-log\">Commit Log</a></h3>\n<p>各記事の編集履歴を表示する<strong>Commits</strong>コンポーネント(↓の<strong>Commits</strong>).</p>\n<p>やっていることは単純で，<code>getStaticProps</code>呼び出し時に該当するファイルに対してのGit履歴を取得しているだけ.</p>\n<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\">Table of Contents</a></h3>\n<p>現在のページにあるheadingsから目次を構築するコンポーネント(→の目次.表示されてない人は1200px以上の画面で見てね).</p>\n<p>これは単に実装したことがなかったから作った<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">5</a></sup>.\n原理は単純で，現在のスクロール位置を取得して，通り過ぎたheadingのうち最も近いものをhighlightしている.\n最初はmarkdownを与えてheadingを抽出するやり方にしていたけど，markdown外にあるCommitsやComments等，そのページにあるheadingを動的に抽出する方針に切り替えた.</p>\n<h3 id=\"comments\"><a href=\"#comments\">Comments</a></h3>\n<p>GitHub Issueと連携したコメントコンポーネント(↓の<strong>Comments</strong>).\n<a href=\"https://utteranc.es\" rel=\"nofollow\">utterances</a>というサービスを利用した. ブログからコメントするにはGitHub AccountでのAuthが必要だけど，<a href=\"https://github.com/koka831/blog/issues\" rel=\"nofollow\">Issues</a>に直接コメントすることもできる.</p>\n<h2 id=\"これから\"><a href=\"#これから\">これから</a></h2>\n<p>フリーランスとしてのお仕事も現在は募集しておらず，自身の身の振り方については少なくとも今年いっぱいは考える予定.\nとりあえずプライベートではアルゴリズムやデータ構造等再度やっていこうと思う.</p>\n<p>紅茶コーディネータについては年初からの受講なので，順調に行けば今年の秋ころには取れるかなあ，という感じ.\nミーハーなので今年のセカンドフラッシュを楽しみにしてたりする.</p>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-tea\">\n<p>余談だけど茶葉のテイスティングカップ，料理の際に調味料を混ぜる小さい容器に最適すぎる <a href=\"#user-content-fnref-tea\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-1\">\n<p>mdastは<a href=\"https://github.com/syntax-tree/unist\" rel=\"nofollow\">unist</a>という規格に従っていて，他にはHTMLのunist表記である<a href=\"https://github.com/syntax-tree/hast\" rel=\"nofollow\">hast</a>などがある. またmdastのプロセッサ実装(remark)があるように，hastのプロセッサには<a href=\"https://github.com/rehypejs/rehype\" rel=\"nofollow\">rehype</a>がある. <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>remark内部で使っている<a href=\"https://github.com/remarkjs/remark/pull/536\" rel=\"nofollow\">ライブラリの移行</a>が2020後半にあって，npmに上がっているプラグインの中にも動作しないものが少なくない. 実際動作するプラグインの中には(This plugin is made for the new parser in remark (micromark, see remarkjs/remark#536).)のように注釈があったりする. <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>大元は<a href=\"https://talk.commonmark.org/t/generic-directives-plugins-syntax/444/155\" rel=\"nofollow\">これ</a>っぽい. <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>今回UIコンポーネントライブラリは一切使わなかった. <del>コストとは</del> <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 5\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","description":"scratch new blog with Next.js; switched from VuePress","commits":[{"title":"update remark-custom-container to 1.2.0","date":"2022-11-27 00:25:35","hash":"897b048f","diff":"<div class=\"remark-highlight\"><pre data-file=\"897b048f.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 897b048fe31450b5d4f6545855125b76492f9066</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Nov 27 00:25:35 2022 +0900\n\n  update remark-custom-container to 1.2.0\n  \n  fix\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nindex 5c8ea91..510bd8e 100644\n<span class=\"token deleted\">--- a/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n@@ -128,13 +128,17 @@ const markdownToHtml = async (markdown: string): Promise&#x26;lt;string&#x26;gt; =&#x26;gt; {\n\n\\```markdown[data-file=<span class=\"token string\">\"custom-container.md\"</span>]\n::: info Custom Title\n<span class=\"token inserted\">+</span>\nCustom Container Body\n<span class=\"token inserted\">+</span>\n:::\n\\```\n**fig.3 これがこうじゃ**\n\n::: info Custom Title\n<span class=\"token inserted\">+</span>\nCustom Container Body\n<span class=\"token inserted\">+</span>\n:::\n\nremark版を探すといくつか見つかったけど，どれも動かなかったので作ることにした.\n</code></pre></div>"},{"title":"fix: use Static Generation(SG) instead of SSG","date":"2021-10-26 22:37:38","hash":"6b966820","diff":"<div class=\"remark-highlight\"><pre data-file=\"6b966820.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 6b96682060f7a7b2f2c20048d55e37f2f9ae44eb</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Tue Oct 26 22:37:38 2021 +0900\n\n  fix: use Static Generation(SG) instead of SSG\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nindex e2e9415..5c8ea91 100644\n<span class=\"token deleted\">--- a/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n@@ -15,7 +15,7 @@ description: scratch new blog with Next.js; switched from VuePress\n<span class=\"token comment\">## TL;DR</span>\n\n<span class=\"token deleted\">- [VuePress][vuepress]のアルファ版を使っていて，メンテが辛くなった</span>\n<span class=\"token deleted\">-- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSSGを構築した</span>\n<span class=\"token inserted\">+- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSGを構築した</span>\n<span class=\"token deleted\">- [できたもの](https://github.com/koka831/koka831.github.io)</span>\n\n<span class=\"token comment\">## About</span>\n@@ -54,12 +54,12 @@ Run `npm audit` for details.\n\n[Gatsby.js][gatsby]はReact.jsをベースにしたリッチなCMSフレームワーク.バックエンドとはGraphQLで連携し，コンテンツの取得は[contentful][contentful]+Markdownだったりと選定の自由度が高い.\n\n<span class=\"token deleted\">-SSGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</span>\n<span class=\"token inserted\">+SGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</span>\n\n<span class=\"token comment\">### Next.js</span>\n\n[Next.js][next]はGatsby.jsと比べると薄いフレームワークで，ビルドやルーティング等ベースとなる機能の提供がメインになっている.\n<span class=\"token deleted\">-Server-Side Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</span>\n<span class=\"token inserted\">+Static Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</span>\n\nしたがってCMSとして使うためにはそれ相当の機能の実装が必要となるため，~コストは高い~面白そう.\n\n@@ -69,7 +69,7 @@ Server-Side Generationの仕組みはあるが，Gatsby.jsほどの最適化は\n\n<span class=\"token comment\">### Architecture</span>\n\n<span class=\"token deleted\">-Next.jsの[`getStaticProps`][getStaticProps]と[`getStaticPaths`][getStaticPaths]を用いて一覧・詳細ページをSSG.</span>\n<span class=\"token inserted\">+Next.jsの[`getStaticProps`][getStaticProps]と[`getStaticPaths`][getStaticPaths]を用いて一覧・詳細ページをSG.</span>\nコンテンツはMarkdownで記述し，[remark][remark]を用いてHTMLを生成している．\nNext.js側でも[MDX][mdx](Markdown+React Component)を描画できる仕組みがあったけど，内部で呼ばれているコンパイラに手を加えるのに難儀したため，情報の多いremarkを選んだ.\n</code></pre></div>"},{"title":"add link to github","date":"2021-04-27 22:23:26","hash":"de03b5e2","diff":"<div class=\"remark-highlight\"><pre data-file=\"de03b5e2.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit de03b5e21ad5799aed5d6ba2c87af059a6115aa2</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Tue Apr 27 22:23:26 2021 +0900\n\n  add link to github\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nindex f99a404..e2e9415 100644\n<span class=\"token deleted\">--- a/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n@@ -16,6 +16,7 @@ description: scratch new blog with Next.js; switched from VuePress\n\n<span class=\"token deleted\">- [VuePress][vuepress]のアルファ版を使っていて，メンテが辛くなった</span>\n<span class=\"token deleted\">- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSSGを構築した</span>\n<span class=\"token inserted\">+- [できたもの](https://github.com/koka831/koka831.github.io)</span>\n\n<span class=\"token comment\">## About</span>\n</code></pre></div>"},{"title":"add","date":"2021-04-27 16:59:33","hash":"ae6500c9","diff":"<div class=\"remark-highlight\"><pre data-file=\"ae6500c9.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit ae6500c9b2a3b5fd76fbf543286171fd2fb60b3f</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Tue Apr 27 16:59:33 2021 +0900\n\n  add\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nnew file mode 100644\nindex 0000000..f99a404\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token coord\">@@ -0,0 +1,211 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Renewal Blog'</span>\n<span class=\"token inserted\">+date: 2021-04-26</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+description: scratch new blog with Next.js; switched from VuePress</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1年ぶりになります．今年もよろしくお願いします．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最近は紅茶コーディネータになるべく日々精進しています[^tea]．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## TL;DR</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- [VuePress][vuepress]のアルファ版を使っていて，メンテが辛くなった</span>\n<span class=\"token inserted\">+- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSSGを構築した</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## About</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ブログを書こうと思い立って，以前構築したブログを久々に確認した.</span>\n<span class=\"token inserted\">+今つかってるパソコンにブログのソースコードを持ってきていなかったので，`npm install`すると脆弱性の嵐.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n<span class=\"token inserted\">+$npm i</span>\n<span class=\"token inserted\">+removed 22 packages, changed 14 packages, and audited 1090 packages in 8s</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+33 vulnerabilities (7 low, 15 moderate, 11 high)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+To address issues that do not require attention, run:</span>\n<span class=\"token inserted\">+  npm audit fix</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+To address all issues, run:</span>\n<span class=\"token inserted\">+  npm audit fix --force</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Run `npm audit` for details.</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また，ブログシステムのベースに使っているVuePressが0.xから1.8までバージョンアップしていたので，これは追従しよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+しかし早々に更新を断念. デザインをフルスクラッチでやるためにVuePressのソースを`eject`していたため，追従をすべて手でやる必要があった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ブログ自体のメンテにはそこまでコストをかけてられないので，今度は`eject`しなくてもデザインを触れるライブラリを選定することにした.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 開発言語自体にはこだわりはないが，型システムはほしい</span>\n<span class=\"token inserted\">+- マークダウンで書ける</span>\n<span class=\"token inserted\">+- サーバ管理は避けたいので，GitHub Pagesに載せられるもの</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+を探した.最終的には次の2つから選んだ. ~結局相当のyak shavingが発生した.~</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Gatsby.js</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[Gatsby.js][gatsby]はReact.jsをベースにしたリッチなCMSフレームワーク.バックエンドとはGraphQLで連携し，コンテンツの取得は[contentful][contentful]+Markdownだったりと選定の自由度が高い.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+SSGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Next.js</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[Next.js][next]はGatsby.jsと比べると薄いフレームワークで，ビルドやルーティング等ベースとなる機能の提供がメインになっている.</span>\n<span class=\"token inserted\">+Server-Side Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがってCMSとして使うためにはそれ相当の機能の実装が必要となるため，~コストは高い~面白そう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Artifacts</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[これ][blog]ができた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Architecture</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Next.jsの[`getStaticProps`][getStaticProps]と[`getStaticPaths`][getStaticPaths]を用いて一覧・詳細ページをSSG.</span>\n<span class=\"token inserted\">+コンテンツはMarkdownで記述し，[remark][remark]を用いてHTMLを生成している．</span>\n<span class=\"token inserted\">+Next.js側でも[MDX][mdx](Markdown+React Component)を描画できる仕組みがあったけど，内部で呼ばれているコンパイラに手を加えるのに難儀したため，情報の多いremarkを選んだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+([amdx][amdx]はマジですごいと思う)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+remarkはMarkdownを入力として，指定した形式での出力を行うプロセッサで，fig.1のように`Parser`，`Transformer`や`Compiler`といったプラグインを処理に挟むことができる.</span>\n<span class=\"token inserted\">+受け取ったMarkdownは[mdast][mdast][^1]という形式のastに変換され，プラグインはmdastを受取りmdastを返すよう要求される.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```asciidoc[data-file=\"process\"]</span>\n<span class=\"token inserted\">+| ........................ process ........................... |</span>\n<span class=\"token inserted\">+| .......... parse ... | ... run ... | ... stringify ..........|</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+          +--------+                     +----------+</span>\n<span class=\"token inserted\">+Input -&#x26;gt;- | Parser | -&#x26;gt;- Syntax Tree -&#x26;gt;- | Compiler | -&#x26;gt;- Output</span>\n<span class=\"token inserted\">+          +--------+          |          +----------+</span>\n<span class=\"token inserted\">+                              X</span>\n<span class=\"token inserted\">+                              |</span>\n<span class=\"token inserted\">+                       +--------------+</span>\n<span class=\"token inserted\">+                       | Transformers |</span>\n<span class=\"token inserted\">+                       +--------------+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+**fig.1 remarkの変換プロセス. 図はベースとなるunifiedから. [[出典][unified-process]]**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このブログではそこそこプラグインを使っていて，中には自作したものもある[^2].</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```typescript[data-file=\"interpreter.ts\"][class=\"line-numbers\"]</span>\n<span class=\"token inserted\">+const markdownToHtml = async (markdown: string): Promise&#x26;lt;string&#x26;gt; =&#x26;gt; {</span>\n<span class=\"token inserted\">+  const result = await remark()</span>\n<span class=\"token inserted\">+    .use(gfm) // remark-gfm</span>\n<span class=\"token inserted\">+    .use(math) // remark-math</span>\n<span class=\"token inserted\">+    .use(emoji) // remark-emoji</span>\n<span class=\"token inserted\">+    .use(container) // 自作 | VuePressで使っていたCustom Container記法に対応</span>\n<span class=\"token inserted\">+    .use(caption) // 自作 | Markdown中の画像に対して通し番号+figcaptionを付与</span>\n<span class=\"token inserted\">+    .use(prism) // remark-prism</span>\n<span class=\"token inserted\">+    .use(externalLink) // remark-external-links</span>\n<span class=\"token inserted\">+    .use(slug) // remark-slug</span>\n<span class=\"token inserted\">+    .use(headings, { behavior: \"wrap\" }) // remark-autolink-headings</span>\n<span class=\"token inserted\">+    .use(footnotes) // remark-footnotes</span>\n<span class=\"token inserted\">+    .use(remark2rehype) // remark-rehype | mdastからhast形式へ変換</span>\n<span class=\"token inserted\">+    .use(katex) // rehype-katex | remark-mathで変換したmarkdownでの数式をkatex記法へ変換</span>\n<span class=\"token inserted\">+    .use(stringify) // rehype-stringify</span>\n<span class=\"token inserted\">+    .process(markdown);</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  return result.toString();</span>\n<span class=\"token inserted\">+};</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+**fig.2 プラグイン一覧**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### remark plugin</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+実際作ってみると結構簡単に実装できる. READMEにあるサンプルだと型情報がなかったりで結構辛いけど，fig.1と[guide][unified-guide]が参考になる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+* **remark-container**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+もともと使っていたVuePressでは，Custom Containersと呼ばれるMarkdownの拡張記法が使える[^3].</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```markdown[data-file=\"custom-container.md\"]</span>\n<span class=\"token inserted\">+::: info Custom Title</span>\n<span class=\"token inserted\">+Custom Container Body</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+**fig.3 これがこうじゃ**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+::: info Custom Title</span>\n<span class=\"token inserted\">+Custom Container Body</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+remark版を探すといくつか見つかったけど，どれも動かなかったので作ることにした.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+実装は正規表現でdirectiveにマッチした行のastを書き換えるもので，単純なため対応してないケースもある(directive内のcode blockとかnodeが分割されるケース).</span>\n<span class=\"token inserted\">+これらの対応は[remark-directive][remark-directive]を用いて後々やりたい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+* **remark-image-caption**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+img要素のようなself-closing tagについては`::before`等の疑似要素が使えないため，例えばMarkdownで記述した画像のタイトルをCSSのみで抽出・表示するといったことができない．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+画像に対してcaptionを付与するプラグインは動作するいくつか見つかったけど，画像に対して連番を振ってくれるようなものは見当たらなかった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```markdown[data-file=\"image.md\"]</span>\n<span class=\"token inserted\">+![alt text](image.png \"image title\")</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+![alt text](/img/icon.png \"image title\")</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+今回作成したプラグインでは，画像を`&#x26;lt;figure&#x26;gt;`タグで囲んでタイトルを`&#x26;lt;figcaption&#x26;gt;`に設定するようにした.</span>\n<span class=\"token inserted\">+ただ，この手法は例えばtableのようなMarkdown記法でタイトルを付与できない要素に対しては使えないため，画像やコード，テーブル等の直下の`em`や`strong`をcaptionとみなすといったやり方に移行すると思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Commit Log</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+各記事の編集履歴を表示する**Commits**コンポーネント(↓の**Commits**).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+やっていることは単純で，`getStaticProps`呼び出し時に該当するファイルに対してのGit履歴を取得しているだけ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Table of Contents</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+現在のページにあるheadingsから目次を構築するコンポーネント(→の目次.表示されてない人は1200px以上の画面で見てね).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これは単に実装したことがなかったから作った[^4].</span>\n<span class=\"token inserted\">+原理は単純で，現在のスクロール位置を取得して，通り過ぎたheadingのうち最も近いものをhighlightしている.</span>\n<span class=\"token inserted\">+最初はmarkdownを与えてheadingを抽出するやり方にしていたけど，markdown外にあるCommitsやComments等，そのページにあるheadingを動的に抽出する方針に切り替えた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Comments</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+GitHub Issueと連携したコメントコンポーネント(↓の**Comments**).</span>\n<span class=\"token inserted\">+[utterances][utterances]というサービスを利用した. ブログからコメントするにはGitHub AccountでのAuthが必要だけど，[Issues][issues]に直接コメントすることもできる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## これから</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+フリーランスとしてのお仕事も現在は募集しておらず，自身の身の振り方については少なくとも今年いっぱいは考える予定.</span>\n<span class=\"token inserted\">+とりあえずプライベートではアルゴリズムやデータ構造等再度やっていこうと思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+紅茶コーディネータについては年初からの受講なので，順調に行けば今年の秋ころには取れるかなあ，という感じ.</span>\n<span class=\"token inserted\">+ミーハーなので今年のセカンドフラッシュを楽しみにしてたりする.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[blog]: https://koka831.github.io/</span>\n<span class=\"token inserted\">+[vuepress]: https://vuepress.vuejs.org/</span>\n<span class=\"token inserted\">+[next]: https://nextjs.org/</span>\n<span class=\"token inserted\">+[remark]: https://github.com/remarkjs/remark</span>\n<span class=\"token inserted\">+[remark-directive]: https://github.com/remarkjs/remark-directive</span>\n<span class=\"token inserted\">+[gatsby]: https://www.gatsbyjs.com/</span>\n<span class=\"token inserted\">+[contentful]: https://www.contentful.com/</span>\n<span class=\"token inserted\">+[getStaticProps]: https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation</span>\n<span class=\"token inserted\">+[getStaticPaths]: https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation</span>\n<span class=\"token inserted\">+[mdx]: https://nextjs.org/blog/markdown</span>\n<span class=\"token inserted\">+[amdx]: https://github.com/mizchi/amdx</span>\n<span class=\"token inserted\">+[unified-process]: https://github.com/unifiedjs/unified#description</span>\n<span class=\"token inserted\">+[unified-guide]: https://unifiedjs.com/learn/guide/create-a-plugin/</span>\n<span class=\"token inserted\">+[unist]: https://github.com/syntax-tree/unist</span>\n<span class=\"token inserted\">+[mdast]: https://github.com/syntax-tree/mdast</span>\n<span class=\"token inserted\">+[hast]: https://github.com/syntax-tree/hast</span>\n<span class=\"token inserted\">+[rehype]: https://github.com/rehypejs/rehype</span>\n<span class=\"token inserted\">+[remark#536]: https://github.com/remarkjs/remark/pull/536</span>\n<span class=\"token inserted\">+[utterances]: https://utteranc.es</span>\n<span class=\"token inserted\">+[issues]: https://github.com/koka831/blog/issues</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^tea]: 余談だけど茶葉のテイスティングカップ，料理の際に調味料を混ぜる小さい容器に最適すぎる</span>\n<span class=\"token inserted\">+[^1]: mdastは[unist][unist]という規格に従っていて，他にはHTMLのunist表記である[hast][hast]などがある. またmdastのプロセッサ実装(remark)があるように，hastのプロセッサには[rehype][rehype]がある.</span>\n<span class=\"token inserted\">+[^2]: remark内部で使っている[ライブラリの移行][remark#536]が2020後半にあって，npmに上がっているプラグインの中にも動作しないものが少なくない. 実際動作するプラグインの中には(This plugin is made for the new parser in remark (micromark, see remarkjs/remark#536).)のように注釈があったりする.</span>\n<span class=\"token inserted\">+[^3]: 大元は[これ](https://talk.commonmark.org/t/generic-directives-plugins-syntax/444/155)っぽい.</span>\n<span class=\"token inserted\">+[^4]: 今回UIコンポーネントライブラリは一切使わなかった. ~コストとは~</span>\n</code></pre></div>"}],"publishedAt":"2021-04-26","updatedAt":"2022-11-27"},{"slug":"2020-06-05-install-arch-linux","title":"Install Arch Linux","categories":["Diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Linux"],"content":"<h2 id=\"0-partition-table\"><a href=\"#0-partition-table\">0. Partition Table</a></h2>\n<p>インストール先のディスク名を調べる.</p>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">$fdisk -l</span>\n<span class=\"token output\">bar</span>\n</code></pre></div>\n<h2 id=\"1-reset-partition\"><a href=\"#1-reset-partition\">1. Reset Partition</a></h2>\n<ul>\n<li>cgdisk/sgdiskを使う\n<ul>\n<li>cgdiskがcursesベースなので使いやすい</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">cgdisk /dev/nvme0n1</span></span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></span></span>\n</code></pre></div>\n<p>最低限必要なpartitionは以下の3つ.</p>\n<ul>\n<li>/boot/efi: EFI</li>\n<li>/boot    : Linux FS</li>\n<li>/ (root) : Linux FS</li>\n</ul>\n<p>ブートセクタの開始領域がEFIになっている必要があるので、上から順に設定していく.\n/boot/efiが/bootに入れ子になっているが, mount時に調整する.</p>\n<h3 id=\"efi-partition\"><a href=\"#efi-partition\">EFI partition</a></h3>\n<ul>\n<li>/boot/efi partition\n<ul>\n<li>First Sector: Enter(default)</li>\n<li>Size in sectors: 512M</li>\n<li>Hex code or GUID: ef00</li>\n<li>Enter new partition name: EFI System</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"boot-partition\"><a href=\"#boot-partition\">boot partition</a></h3>\n<ul>\n<li>/boot\n<ul>\n<li>First Sector: Enter(default)</li>\n<li>Size: 512M</li>\n<li>Hex: 8300</li>\n<li>Enter new partition name: Linux filesystem</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"root-partition\"><a href=\"#root-partition\">root partition</a></h3>\n<ul>\n<li>/\n<ul>\n<li>First Sector: Enter(default)</li>\n<li>Size: Enter(default=max)</li>\n<li>Hex: 8300</li>\n<li>Enter new partition name: Linux filesystem</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"result-of-partitioning\"><a href=\"#result-of-partitioning\">Result of partitioning</a></h3>\n<ul>\n<li>512G SSDを対象に行うと以下のようになる.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">fdisk</span> <span class=\"token parameter variable\">-l</span></span></span>\n<span class=\"token output\">Device          Start   End             Sectors Size    Type</span>\n<span class=\"token output\">/dev/nvme0n1p1  2048    1050623         1048576 512M    Efi system</span>\n<span class=\"token output\">/dev/nvme0n1p2 1050624  2099199         1048576 512M    Linux filesystem</span>\n<span class=\"token output\">/dev/nvme0n1p3  2099200 1000215182    998115983 476G    Linux filesystem</span>\n</code></pre></div>\n<h2 id=\"2-disk-format\"><a href=\"#2-disk-format\">2. Disk Format</a></h2>\n<p>mkfsを用いて各partitionをフォーマットする.<br>\nefi領域はFAT32指定、その他Linux filesystemの領域はext4等好みのファイルシステムを用いる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">mkfs.fat <span class=\"token parameter variable\">-F32</span> /dev/nvme0n1p1</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">mkfs.ext4 /dev/nvme0n1p2</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">mkfs.ext4 /dev/nvme0n1p3</span></span>\n</code></pre></div>\n<h2 id=\"3-mount-volume\"><a href=\"#3-mount-volume\">3. Mount Volume</a></h2>\n<p>1, 2で作成したpartitionをboot USBからアクセスできるようにマウントする.\n1.で行ったパーティショニングとマウントの順番が異なるので注意(1敗).</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">/root</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mount</span> /dev/nvme0n1p3 /mnt</span></span>\n\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">/boot</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mkdir</span> /mnt/boot</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mount</span> /dev/nvme0n1p2 /mnt/boot</span></span>\n\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">/boot/efi</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mkdir</span> /mnt/boot/efi</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mount</span> /dev/nvme0n1p1 /mnt/boot/efi</span></span>\n</code></pre></div>\n<h2 id=\"4-install-linux-system\"><a href=\"#4-install-linux-system\">4. Install Linux system</a></h2>\n<h3 id=\"setup-repository-mirror\"><a href=\"#setup-repository-mirror\">Setup repository mirror</a></h3>\n<p><code>/etc/pacman.d/mirrorlist</code>を編集し現在位置から距離の近いミラーを一番上にもってくる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">vim</span> /etc/pacman.d/mirrorlist</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">use mirror <span class=\"token keyword\">in</span> Japan</span></span>\n</code></pre></div>\n<h3 id=\"install-base-system\"><a href=\"#install-base-system\">Install base system</a></h3>\n<p>マウントした<code>/root</code>に対してLinuxやその後の作業に必要な諸々をインストールする.\n後述する5.1でマウント領域に<code>chroot</code>したあとはboot USB内のデフォルトツール類が使えなくなるので, エディタはここでインストールしておく.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">linux base system</span></span>\n<span class=\"token output\">pacstrap /mnt base linux linux-firmware</span>\n<span class=\"token output\"></span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\"><span class=\"token keyword\">for</span> wifi</span></span>\n<span class=\"token output\">pacstrap /mnt base-devel grub efibootmgr dosfstools netctl iw wpa_supplicant networkmanager dialog vim</span>\n</code></pre></div>\n<h3 id=\"generate-fstab-file\"><a href=\"#generate-fstab-file\">generate fstab file</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">genfstab <span class=\"token parameter variable\">-U</span> /mnt <span class=\"token operator\">>></span> /mnt/etc/fstab\n</code></pre></div>\n<h3 id=\"check-filesystem\"><a href=\"#check-filesystem\">check filesystem</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">cat</span> /mnt/etc/fstab</span></span>\n<span class=\"token output\">/dev/nvme0n1p3 /         ext4 rw,relatime 0 1</span>\n<span class=\"token output\">/dev/nvme0n1p2 /boot     ext4 rw,relatime 0 2</span>\n<span class=\"token output\">/dev/nvme0n1p1 /boot/efi vfat rw,relatime,fmask=0022,codepage=... 0 2</span>\n</code></pre></div>\n<h2 id=\"5-enter-arch\"><a href=\"#5-enter-arch\">5 enter arch!</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">arch-chroot /mnt /bin/bash</span>\n</code></pre></div>\n<h3 id=\"setup-localetimezone\"><a href=\"#setup-localetimezone\">Setup locale/timezone</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">locale</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">vim</span> /etc/locale.gen</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">uncomment en_US.UTF-8 and ja_JP.UTF-8</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">locale-gen</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"LANG=en_US.UTF-8\"</span> <span class=\"token operator\">></span> /etc/locale.conf</span></span>\n\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">timezone</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">tzselect <span class=\"token number\">4</span>, <span class=\"token number\">19</span>, <span class=\"token number\">1</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">hwclock <span class=\"token parameter variable\">--systohc</span> <span class=\"token parameter variable\">--utc</span></span></span>\n</code></pre></div>\n<h3 id=\"setup-bootloader\"><a href=\"#setup-bootloader\">Setup bootloader</a></h3>\n<p>bootloaderの作成.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">mkinitcpio <span class=\"token parameter variable\">-p</span> linux</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">grub-install <span class=\"token parameter variable\">--target</span><span class=\"token operator\">=</span>x86_64-efi --efi-directory<span class=\"token operator\">=</span>/boot/efi --bootloader-id<span class=\"token operator\">=</span>arch --boot-directory<span class=\"token operator\">=</span>/boot/efi/EFI <span class=\"token parameter variable\">--recheck</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">grub-mkconfig</span> <span class=\"token parameter variable\">-o</span> /boot/efi/EFI/grub/grub.cfg</span></span>\n</code></pre></div>\n<h3 id=\"change-root-password--add-user\"><a href=\"#change-root-password--add-user\">Change Root password &#x26; add User</a></h3>\n<p>5.4にてリブートする前にユーザを作成しておく(1敗).</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">passwd</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-m</span> <span class=\"token parameter variable\">-g</span> <span class=\"token function\">users</span> <span class=\"token parameter variable\">-G</span> wheel <span class=\"token parameter variable\">-s</span> /bin/bash koka</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">passwd</span> koka</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">visudo <span class=\"token comment\"># and uncomment %Wheel all=(all) all</span></span></span>\n</code></pre></div>\n<h3 id=\"reboot--eject-usb\"><a href=\"#reboot--eject-usb\">Reboot &#x26; eject USB</a></h3>\n<p>シャットダウンしてbootUSBを取り外し再起動する</p>\n<h2 id=\"6-setup-arch-linux\"><a href=\"#6-setup-arch-linux\">6. Setup Arch Linux</a></h2>\n<h3 id=\"network\"><a href=\"#network\">network</a></h3>\n<p>wifiの設定.\n<code>nmtui</code>が好きなのでNetworkManagerを用いた.\nセットアップ後の開発において<code>systemd-nspawn</code>を使う場合, ネットワークアダプタは<code>systemd-networkd</code>なのでそっちの場合は<code>systemd</code>に統一しといたほうが後々楽.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">systemctl start NetworkManager</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> NetworkManager</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">nmtui</span></span>\n</code></pre></div>\n<h3 id=\"setup-x-window-system\"><a href=\"#setup-x-window-system\">Setup X Window System</a></h3>\n<p><a href=\"https://wiki.archlinux.jp/index.php/Xorg\" rel=\"nofollow\">ref</a>\nCUIからGUIへ.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">lspci <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-e</span> VGA <span class=\"token parameter variable\">-e</span> 3D</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token comment\"># XとDMとしてlight DM(とログイン画面)をインストール</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pacman <span class=\"token parameter variable\">-S</span> xf86-video-intel xorg-server xorg-xrdb lightdm lightdm-gtk-greeter</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token comment\"># terminal emulatorも入ってないので何かしらいれとく(1敗)</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pacman <span class=\"token parameter variable\">-S</span> rxvt-unicode</span></span>\n\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> lightdm</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token comment\"># WMをインストール</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pacman <span class=\"token parameter variable\">-S</span> i3-gaps i3status dmenu</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token comment\"># tlp/バッテリ最適化モジュール</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pacman <span class=\"token parameter variable\">-S</span> tlp</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token comment\"># フォント</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token comment\"># ブラウザやアプリはデフォだとシステム設定のフォント読まずに表示が汚くなるので、</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token comment\"># デフォ指定に含まれているttf-dejavuを入れとく(Ubuntuのデフォフォント).</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pacman <span class=\"token parameter variable\">-S</span> ttf-fira-code oft-ipamjfont ttf-dejavu</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pacman <span class=\"token parameter variable\">-S</span> xorg-xbacklight <span class=\"token comment\"># 画面の明るさ</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pacman <span class=\"token parameter variable\">-S</span> pulseaudio-alsa alsa-utils alsa-plugins <span class=\"token comment\"># 音量</span></span></span>\n</code></pre></div>","description":"log","commits":[{"title":"fix some","date":"2021-10-13 23:48:16","hash":"fc674d6b","diff":"<div class=\"remark-highlight\"><pre data-file=\"fc674d6b.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit fc674d6b05dbbc38f77579f9120500b8c4a81926</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Wed Oct 13 23:48:16 2021 +0900\n\n  fix some\n\ndiff --git a/_posts/2020-06-05-install-arch-linux.md b/_posts/2020-06-05-install-arch-linux.md\nindex f71dd06..1e2b358 100644\n<span class=\"token deleted\">--- a/_posts/2020-06-05-install-arch-linux.md</span>\n<span class=\"token inserted\">+++ b/_posts/2020-06-05-install-arch-linux.md</span>\n@@ -21,20 +21,7 @@ bar\n   - cgdiskがcursesベースなので使いやすい\n\n\\```shell-session\n<span class=\"token deleted\">-$echo $EDITOR</span>\n<span class=\"token deleted\">-vim</span>\n<span class=\"token deleted\">-$git checkout master</span>\n<span class=\"token deleted\">-Switched to branch 'master'</span>\n<span class=\"token deleted\">-Your branch is up-to-date with 'origin/master'</span>\n<span class=\"token deleted\">-#foo</span>\n<span class=\"token deleted\">-$git push</span>\n<span class=\"token deleted\">-Everything up-to-date</span>\n<span class=\"token deleted\">-[sudo] password for koka:</span>\n<span class=\"token deleted\">-$echo 'All</span>\n<span class=\"token deleted\">-&#x26;gt; done!'</span>\n<span class=\"token deleted\">-All</span>\n<span class=\"token deleted\">-done!</span>\n<span class=\"token deleted\">-$cgdisk /dev/nvme0n1</span>\n<span class=\"token inserted\">+$ cgdisk /dev/nvme0n1</span>\n\\```\n\n\\```shell-session\n@@ -78,7 +65,7 @@ $ ls -la\n<span class=\"token comment\">### Result of partitioning</span>\n<span class=\"token deleted\">- 512G SSDを対象に行うと以下のようになる.</span>\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n$ fdisk -l\nDevice          Start   End             Sectors Size    Type\n/dev/nvme0n1p1  2048    1050623         1048576 512M    Efi system\n@@ -90,10 +77,10 @@ Device          Start   End             Sectors Size    Type\nmkfsを用いて各partitionをフォーマットする.  \nefi領域はFAT32指定、その他Linux filesystemの領域はext4等好みのファイルシステムを用いる.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token deleted\">-mkfs.fat -F32 /dev/nvme0n1p1</span>\n<span class=\"token deleted\">-mkfs.ext4 /dev/nvme0n1p2</span>\n<span class=\"token deleted\">-mkfs.ext4 /dev/nvme0n1p3</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n<span class=\"token inserted\">+$ mkfs.fat -F32 /dev/nvme0n1p1</span>\n<span class=\"token inserted\">+$ mkfs.ext4 /dev/nvme0n1p2</span>\n<span class=\"token inserted\">+$ mkfs.ext4 /dev/nvme0n1p3</span>\n\\```\n\n<span class=\"token comment\">## 3. Mount Volume</span>\n</code></pre></div>"},{"title":"fix","date":"2021-04-25 14:18:15","hash":"dae19db3","diff":"<div class=\"remark-highlight\"><pre data-file=\"dae19db3.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit dae19db337b318bfe27a5713113f2e56341e0b2e</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Apr 25 14:18:15 2021 +0900\n\n  fix\n\ndiff --git a/_posts/2020-06-05-install-arch-linux.md b/_posts/2020-06-05-install-arch-linux.md\nindex 0bff7c6..f71dd06 100644\n<span class=\"token deleted\">--- a/_posts/2020-06-05-install-arch-linux.md</span>\n<span class=\"token inserted\">+++ b/_posts/2020-06-05-install-arch-linux.md</span>\n@@ -16,13 +16,6 @@ $fdisk -l\nbar\n\\```\n\n<span class=\"token deleted\">-[[info | custom container]]</span>\n<span class=\"token deleted\">-| content</span>\n<span class=\"token deleted\">-| bar</span>\n<span class=\"token deleted\">-</span>\n<span class=\"token deleted\">-</span>\n<span class=\"token deleted\">-multi line</span>\n<span class=\"token deleted\">-</span>\n<span class=\"token comment\">## 1. Reset Partition</span>\n<span class=\"token deleted\">- cgdisk/sgdiskを使う</span>\n   - cgdiskがcursesベースなので使いやすい\n</code></pre></div>"},{"title":"wip","date":"2021-03-05 18:48:41","hash":"70a0aff5","diff":"<div class=\"remark-highlight\"><pre data-file=\"70a0aff5.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 70a0aff5a83d4332a8c3ccff3d2d3c1c84e46ef2</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Fri Mar 5 18:48:41 2021 +0900\n\n  wip\n\ndiff --git a/_posts/2020-06-05-install-arch-linux.md b/_posts/2020-06-05-install-arch-linux.md\nindex f71dd06..0bff7c6 100644\n<span class=\"token deleted\">--- a/_posts/2020-06-05-install-arch-linux.md</span>\n<span class=\"token inserted\">+++ b/_posts/2020-06-05-install-arch-linux.md</span>\n@@ -16,6 +16,13 @@ $fdisk -l\nbar\n\\```\n\n<span class=\"token inserted\">+[[info | custom container]]</span>\n<span class=\"token inserted\">+| content</span>\n<span class=\"token inserted\">+| bar</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+multi line</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token comment\">## 1. Reset Partition</span>\n<span class=\"token deleted\">- cgdisk/sgdiskを使う</span>\n   - cgdiskがcursesベースなので使いやすい\n</code></pre></div>"},{"title":"update","date":"2021-02-15 00:34:10","hash":"bd59f09a","diff":"<div class=\"remark-highlight\"><pre data-file=\"bd59f09a.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit bd59f09a33181a1f762978251b6b4d7eb0095a09</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Mon Feb 15 00:34:10 2021 +0900\n\n  update\n\ndiff --git a/_posts/2020-06-05-install-arch-linux.md b/_posts/2020-06-05-install-arch-linux.md\nindex 30bf785..f71dd06 100644\n<span class=\"token deleted\">--- a/_posts/2020-06-05-install-arch-linux.md</span>\n<span class=\"token inserted\">+++ b/_posts/2020-06-05-install-arch-linux.md</span>\n@@ -11,16 +11,34 @@ description: log\n<span class=\"token comment\">## 0. Partition Table</span>\nインストール先のディスク名を調べる.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token deleted\">-fdisk -l</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n<span class=\"token inserted\">+$fdisk -l</span>\n<span class=\"token inserted\">+bar</span>\n\\```\n\n<span class=\"token comment\">## 1. Reset Partition</span>\n<span class=\"token deleted\">- cgdisk/sgdiskを使う</span>\n   - cgdiskがcursesベースなので使いやすい\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token deleted\">-cgdisk /dev/nvme0n1</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n<span class=\"token inserted\">+$echo $EDITOR</span>\n<span class=\"token inserted\">+vim</span>\n<span class=\"token inserted\">+$git checkout master</span>\n<span class=\"token inserted\">+Switched to branch 'master'</span>\n<span class=\"token inserted\">+Your branch is up-to-date with 'origin/master'</span>\n<span class=\"token inserted\">+#foo</span>\n<span class=\"token inserted\">+$git push</span>\n<span class=\"token inserted\">+Everything up-to-date</span>\n<span class=\"token inserted\">+[sudo] password for koka:</span>\n<span class=\"token inserted\">+$echo 'All</span>\n<span class=\"token inserted\">+&#x26;gt; done!'</span>\n<span class=\"token inserted\">+All</span>\n<span class=\"token inserted\">+done!</span>\n<span class=\"token inserted\">+$cgdisk /dev/nvme0n1</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n<span class=\"token inserted\">+$ ls -la</span>\n\\```\n\n最低限必要なpartitionは以下の3つ. \n@@ -32,7 +50,7 @@ cgdisk /dev/nvme0n1\nブートセクタの開始領域がEFIになっている必要があるので、上から順に設定していく.\n/boot/efiが/bootに入れ子になっているが, mount時に調整する.\n\n<span class=\"token deleted\">-### 1.1 EFI partition</span>\n<span class=\"token inserted\">+### EFI partition</span>\n\n<span class=\"token deleted\">- /boot/efi partition</span>\n   - First Sector: Enter(default)\n@@ -40,7 +58,7 @@ cgdisk /dev/nvme0n1\n   - Hex code or GUID: ef00\n   - Enter new partition name: EFI System\n\n<span class=\"token deleted\">-### 1.2 boot partition</span>\n<span class=\"token inserted\">+### boot partition</span>\n\n<span class=\"token deleted\">- /boot</span>\n   - First Sector: Enter(default)\n@@ -48,7 +66,7 @@ cgdisk /dev/nvme0n1\n   - Hex: 8300\n   - Enter new partition name: Linux filesystem\n\n<span class=\"token deleted\">-### 1.3 root partition</span>\n<span class=\"token inserted\">+### root partition</span>\n\n<span class=\"token deleted\">- /</span>\n   - First Sector: Enter(default)\n@@ -57,7 +75,7 @@ cgdisk /dev/nvme0n1\n   - Enter new partition name: Linux filesystem\n\n\n<span class=\"token deleted\">-### 1.4 Result of partitioning</span>\n<span class=\"token inserted\">+### Result of partitioning</span>\n<span class=\"token deleted\">- 512G SSDを対象に行うと以下のようになる.</span>\n\n\\```sh\n@@ -82,53 +100,52 @@ mkfs.ext4 /dev/nvme0n1p3\n1, 2で作成したpartitionをboot USBからアクセスできるようにマウントする.\n1.で行ったパーティショニングとマウントの順番が異なるので注意(1敗).\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n<span class=\"token comment\"># /root</span>\n<span class=\"token deleted\">-mount /dev/nvme0n1p3 /mnt</span>\n<span class=\"token inserted\">+$ mount /dev/nvme0n1p3 /mnt</span>\n\n<span class=\"token comment\"># /boot</span>\n<span class=\"token deleted\">-mkdir /mnt/boot</span>\n<span class=\"token deleted\">-mount /dev/nvme0n1p2 /mnt/boot</span>\n<span class=\"token inserted\">+$ mkdir /mnt/boot</span>\n<span class=\"token inserted\">+$ mount /dev/nvme0n1p2 /mnt/boot</span>\n\n<span class=\"token comment\"># /boot/efi</span>\n<span class=\"token deleted\">-mkdir /mnt/boot/efi</span>\n<span class=\"token deleted\">-mount /dev/nvme0n1p1 /mnt/boot/efi</span>\n<span class=\"token inserted\">+$ mkdir /mnt/boot/efi</span>\n<span class=\"token inserted\">+$ mount /dev/nvme0n1p1 /mnt/boot/efi</span>\n\\```\n\n<span class=\"token comment\">## 4. Install Linux system</span>\n\n<span class=\"token deleted\">-### 4.1 Setup repository mirror</span>\n<span class=\"token inserted\">+### Setup repository mirror</span>\n`/etc/pacman.d/mirrorlist`を編集し現在位置から距離の近いミラーを一番上にもってくる.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token deleted\">-vim /etc/pacman.d/mirrorlist</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n<span class=\"token inserted\">+$ vim /etc/pacman.d/mirrorlist</span>\n<span class=\"token comment\"># use mirror in Japan</span>\n\\```\n\n\n<span class=\"token deleted\">-### 4.2 Install base system</span>\n<span class=\"token inserted\">+### Install base system</span>\nマウントした`/root`に対してLinuxやその後の作業に必要な諸々をインストールする.\n後述する5.1でマウント領域に`chroot`したあとはboot USB内のデフォルトツール類が使えなくなるので, エディタはここでインストールしておく.\n\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n<span class=\"token comment\"># linux base system</span>\npacstrap /mnt base linux linux-firmware\n<span class=\"token comment\"># for wifi</span>\npacstrap /mnt base-devel grub efibootmgr dosfstools netctl iw wpa_supplicant networkmanager dialog vim\n\\```\n\n<span class=\"token deleted\">-### 4.3 generate fstab file</span>\n<span class=\"token inserted\">+### generate fstab file</span>\n\n\\```sh\ngenfstab -U /mnt &#x26;gt;&#x26;gt; /mnt/etc/fstab\n\\```\n\n<span class=\"token deleted\">-### 4.4 check filesystem</span>\n<span class=\"token inserted\">+### check filesystem</span>\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n$ cat /mnt/etc/fstab\n<span class=\"token deleted\">-</span>\n/dev/nvme0n1p3 /         ext4 rw,relatime 0 1\n/dev/nvme0n1p2 /boot     ext4 rw,relatime 0 2\n/dev/nvme0n1p1 /boot/efi vfat rw,relatime,fmask=0022,codepage=... 0 2\n@@ -137,13 +154,13 @@ $ cat /mnt/etc/fstab\n\n<span class=\"token comment\">## 5 enter arch!</span>\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\narch-chroot /mnt /bin/bash\n\\```\n\n<span class=\"token deleted\">-### 5.1 Setup locale/timezone</span>\n<span class=\"token inserted\">+### Setup locale/timezone</span>\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n<span class=\"token comment\"># locale</span>\n$ vim /etc/locale.gen\n<span class=\"token comment\"># uncomment en_US.UTF-8 and ja_JP.UTF-8</span>\n@@ -155,62 +172,60 @@ $ tzselect 4, 19, 1\n$ hwclock --systohc --utc\n\\```\n\n<span class=\"token deleted\">-### 5.2 Setup bootloader</span>\n<span class=\"token inserted\">+### Setup bootloader</span>\nbootloaderの作成.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n$ mkinitcpio -p linux\n$ grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch --boot-directory=/boot/efi/EFI --recheck\n$ grub-mkconfig -o /boot/efi/EFI/grub/grub.cfg\n\\```\n\n<span class=\"token deleted\">-### 5.3 Change Root password &#x26; add User</span>\n<span class=\"token inserted\">+### Change Root password &#x26; add User</span>\n5.4にてリブートする前にユーザを作成しておく(1敗).\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n$ passwd\n$ useradd -m -g users -G wheel -s /bin/bash koka\n$ passwd koka\n$ visudo # and uncomment %Wheel all=(all) all\n\\```\n<span class=\"token deleted\">-### 5.4 Reboot &#x26; eject USB</span>\n<span class=\"token inserted\">+### Reboot &#x26; eject USB</span>\nシャットダウンしてbootUSBを取り外し再起動する\n\n<span class=\"token comment\">## 6. Setup Arch Linux</span>\n\n<span class=\"token deleted\">-### 6.1 network</span>\n<span class=\"token inserted\">+### network</span>\nwifiの設定.\n`nmtui`が好きなのでNetworkManagerを用いた.\nセットアップ後の開発において`systemd-nspawn`を使う場合, ネットワークアダプタは`systemd-networkd`なのでそっちの場合は`systemd`に統一しといたほうが後々楽.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n$ systemctl start NetworkManager\n$ systemctl enable NetworkManager\n$ nmtui\n\\```\n\n<span class=\"token deleted\">-### 6.2 Setup X Window System</span>\n<span class=\"token inserted\">+### Setup X Window System</span>\n[ref](<a href=\"https://wiki.archlinux.jp/index.php/Xorg)\" class=\"token url-link\" rel=\"nofollow\">https://wiki.archlinux.jp/index.php/Xorg)</a>\nCUIからGUIへ.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session</span>\n$ lspci | grep -e VGA -e 3D\n<span class=\"token deleted\">-# XとDMとしてlight DM(とログイン画面)をインストール</span>\n<span class=\"token inserted\">+$ # XとDMとしてlight DM(とログイン画面)をインストール</span>\n$ pacman -S xf86-video-intel xorg-server xorg-xrdb lightdm lightdm-gtk-greeter\n<span class=\"token deleted\">-# terminal emulatorも入ってないので何かしらいれとく(1敗)</span>\n<span class=\"token inserted\">+$ # terminal emulatorも入ってないので何かしらいれとく(1敗)</span>\n$ pacman -S rxvt-unicode\n<span class=\"token deleted\">-# </span>\n<span class=\"token inserted\">+</span>\n$ systemctl enable lightdm\n<span class=\"token deleted\">-# WMをインストール</span>\n<span class=\"token inserted\">+$ # WMをインストール</span>\n$ pacman -S i3-gaps i3status dmenu\n<span class=\"token deleted\">-# tlp/バッテリ最適化モジュール</span>\n<span class=\"token inserted\">+$ # tlp/バッテリ最適化モジュール</span>\n$ pacman -S tlp\n<span class=\"token deleted\">-# フォント</span>\n<span class=\"token deleted\">-# ブラウザやアプリはデフォだとシステム設定のフォント読まずに表示が汚くなるので、</span>\n<span class=\"token deleted\">-# デフォ指定に含まれているttf-dejavuを入れとく(Ubuntuのデフォフォント).</span>\n<span class=\"token inserted\">+$ # フォント</span>\n<span class=\"token inserted\">+$ # ブラウザやアプリはデフォだとシステム設定のフォント読まずに表示が汚くなるので、</span>\n<span class=\"token inserted\">+$ # デフォ指定に含まれているttf-dejavuを入れとく(Ubuntuのデフォフォント).</span>\n$ pacman -S ttf-fira-code oft-ipamjfont ttf-dejavu\n<span class=\"token deleted\">-# 画面の明るさ</span>\n<span class=\"token deleted\">-$ pacman -S xorg-xbacklight</span>\n<span class=\"token deleted\">-# 音量</span>\n<span class=\"token deleted\">-$ pacman -S pulseaudio-alsa alsa-utils alsa-plugins</span>\n<span class=\"token inserted\">+$ pacman -S xorg-xbacklight # 画面の明るさ</span>\n<span class=\"token inserted\">+$ pacman -S pulseaudio-alsa alsa-utils alsa-plugins # 音量</span>\n\\```\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2020-06-05-install-arch-linux.md b/_posts/2020-06-05-install-arch-linux.md\nnew file mode 100644\nindex 0000000..30bf785\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2020-06-05-install-arch-linux.md</span>\n<span class=\"token coord\">@@ -0,0 +1,216 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Install Arch Linux'</span>\n<span class=\"token inserted\">+date: 2020-06-05</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Linux</span>\n<span class=\"token inserted\">+description: log</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 0. Partition Table</span>\n<span class=\"token inserted\">+インストール先のディスク名を調べる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+fdisk -l</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 1. Reset Partition</span>\n<span class=\"token inserted\">+- cgdisk/sgdiskを使う</span>\n<span class=\"token inserted\">+    - cgdiskがcursesベースなので使いやすい</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+cgdisk /dev/nvme0n1</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最低限必要なpartitionは以下の3つ. </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- /boot/efi: EFI</span>\n<span class=\"token inserted\">+- /boot    : Linux FS</span>\n<span class=\"token inserted\">+- / (root) : Linux FS</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ブートセクタの開始領域がEFIになっている必要があるので、上から順に設定していく.</span>\n<span class=\"token inserted\">+/boot/efiが/bootに入れ子になっているが, mount時に調整する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 1.1 EFI partition</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- /boot/efi partition</span>\n<span class=\"token inserted\">+    - First Sector: Enter(default)</span>\n<span class=\"token inserted\">+    - Size in sectors: 512M</span>\n<span class=\"token inserted\">+    - Hex code or GUID: ef00</span>\n<span class=\"token inserted\">+    - Enter new partition name: EFI System</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 1.2 boot partition</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- /boot</span>\n<span class=\"token inserted\">+    - First Sector: Enter(default)</span>\n<span class=\"token inserted\">+    - Size: 512M</span>\n<span class=\"token inserted\">+    - Hex: 8300</span>\n<span class=\"token inserted\">+    - Enter new partition name: Linux filesystem</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 1.3 root partition</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- /</span>\n<span class=\"token inserted\">+    - First Sector: Enter(default)</span>\n<span class=\"token inserted\">+    - Size: Enter(default=max)</span>\n<span class=\"token inserted\">+    - Hex: 8300</span>\n<span class=\"token inserted\">+    - Enter new partition name: Linux filesystem</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 1.4 Result of partitioning</span>\n<span class=\"token inserted\">+- 512G SSDを対象に行うと以下のようになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ fdisk -l</span>\n<span class=\"token inserted\">+Device          Start   End             Sectors Size    Type</span>\n<span class=\"token inserted\">+/dev/nvme0n1p1  2048    1050623         1048576 512M    Efi system</span>\n<span class=\"token inserted\">+/dev/nvme0n1p2 1050624  2099199         1048576 512M    Linux filesystem</span>\n<span class=\"token inserted\">+/dev/nvme0n1p3  2099200 1000215182    998115983 476G    Linux filesystem</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 2. Disk Format</span>\n<span class=\"token inserted\">+mkfsを用いて各partitionをフォーマットする.  </span>\n<span class=\"token inserted\">+efi領域はFAT32指定、その他Linux filesystemの領域はext4等好みのファイルシステムを用いる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+mkfs.fat -F32 /dev/nvme0n1p1</span>\n<span class=\"token inserted\">+mkfs.ext4 /dev/nvme0n1p2</span>\n<span class=\"token inserted\">+mkfs.ext4 /dev/nvme0n1p3</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 3. Mount Volume</span>\n<span class=\"token inserted\">+1, 2で作成したpartitionをboot USBからアクセスできるようにマウントする.</span>\n<span class=\"token inserted\">+1.で行ったパーティショニングとマウントの順番が異なるので注意(1敗).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+# /root</span>\n<span class=\"token inserted\">+mount /dev/nvme0n1p3 /mnt</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# /boot</span>\n<span class=\"token inserted\">+mkdir /mnt/boot</span>\n<span class=\"token inserted\">+mount /dev/nvme0n1p2 /mnt/boot</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# /boot/efi</span>\n<span class=\"token inserted\">+mkdir /mnt/boot/efi</span>\n<span class=\"token inserted\">+mount /dev/nvme0n1p1 /mnt/boot/efi</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 4. Install Linux system</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 4.1 Setup repository mirror</span>\n<span class=\"token inserted\">+`/etc/pacman.d/mirrorlist`を編集し現在位置から距離の近いミラーを一番上にもってくる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+vim /etc/pacman.d/mirrorlist</span>\n<span class=\"token inserted\">+# use mirror in Japan</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 4.2 Install base system</span>\n<span class=\"token inserted\">+マウントした`/root`に対してLinuxやその後の作業に必要な諸々をインストールする.</span>\n<span class=\"token inserted\">+後述する5.1でマウント領域に`chroot`したあとはboot USB内のデフォルトツール類が使えなくなるので, エディタはここでインストールしておく.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+# linux base system</span>\n<span class=\"token inserted\">+pacstrap /mnt base linux linux-firmware</span>\n<span class=\"token inserted\">+# for wifi</span>\n<span class=\"token inserted\">+pacstrap /mnt base-devel grub efibootmgr dosfstools netctl iw wpa_supplicant networkmanager dialog vim</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 4.3 generate fstab file</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+genfstab -U /mnt &#x26;gt;&#x26;gt; /mnt/etc/fstab</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 4.4 check filesystem</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ cat /mnt/etc/fstab</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+/dev/nvme0n1p3 /         ext4 rw,relatime 0 1</span>\n<span class=\"token inserted\">+/dev/nvme0n1p2 /boot     ext4 rw,relatime 0 2</span>\n<span class=\"token inserted\">+/dev/nvme0n1p1 /boot/efi vfat rw,relatime,fmask=0022,codepage=... 0 2</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 5 enter arch!</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+arch-chroot /mnt /bin/bash</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 5.1 Setup locale/timezone</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+# locale</span>\n<span class=\"token inserted\">+$ vim /etc/locale.gen</span>\n<span class=\"token inserted\">+# uncomment en_US.UTF-8 and ja_JP.UTF-8</span>\n<span class=\"token inserted\">+$ locale-gen</span>\n<span class=\"token inserted\">+$ echo \"LANG=en_US.UTF-8\" &#x26;gt; /etc/locale.conf</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# timezone</span>\n<span class=\"token inserted\">+$ tzselect 4, 19, 1</span>\n<span class=\"token inserted\">+$ hwclock --systohc --utc</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 5.2 Setup bootloader</span>\n<span class=\"token inserted\">+bootloaderの作成.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ mkinitcpio -p linux</span>\n<span class=\"token inserted\">+$ grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch --boot-directory=/boot/efi/EFI --recheck</span>\n<span class=\"token inserted\">+$ grub-mkconfig -o /boot/efi/EFI/grub/grub.cfg</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 5.3 Change Root password &#x26; add User</span>\n<span class=\"token inserted\">+5.4にてリブートする前にユーザを作成しておく(1敗).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ passwd</span>\n<span class=\"token inserted\">+$ useradd -m -g users -G wheel -s /bin/bash koka</span>\n<span class=\"token inserted\">+$ passwd koka</span>\n<span class=\"token inserted\">+$ visudo # and uncomment %Wheel all=(all) all</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+### 5.4 Reboot &#x26; eject USB</span>\n<span class=\"token inserted\">+シャットダウンしてbootUSBを取り外し再起動する</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 6. Setup Arch Linux</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 6.1 network</span>\n<span class=\"token inserted\">+wifiの設定.</span>\n<span class=\"token inserted\">+`nmtui`が好きなのでNetworkManagerを用いた.</span>\n<span class=\"token inserted\">+セットアップ後の開発において`systemd-nspawn`を使う場合, ネットワークアダプタは`systemd-networkd`なのでそっちの場合は`systemd`に統一しといたほうが後々楽.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ systemctl start NetworkManager</span>\n<span class=\"token inserted\">+$ systemctl enable NetworkManager</span>\n<span class=\"token inserted\">+$ nmtui</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 6.2 Setup X Window System</span>\n<span class=\"token inserted\">+[ref](https://wiki.archlinux.jp/index.php/Xorg)</span>\n<span class=\"token inserted\">+CUIからGUIへ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ lspci | grep -e VGA -e 3D</span>\n<span class=\"token inserted\">+# XとDMとしてlight DM(とログイン画面)をインストール</span>\n<span class=\"token inserted\">+$ pacman -S xf86-video-intel xorg-server xorg-xrdb lightdm lightdm-gtk-greeter</span>\n<span class=\"token inserted\">+# terminal emulatorも入ってないので何かしらいれとく(1敗)</span>\n<span class=\"token inserted\">+$ pacman -S rxvt-unicode</span>\n<span class=\"token inserted\">+# </span>\n<span class=\"token inserted\">+$ systemctl enable lightdm</span>\n<span class=\"token inserted\">+# WMをインストール</span>\n<span class=\"token inserted\">+$ pacman -S i3-gaps i3status dmenu</span>\n<span class=\"token inserted\">+# tlp/バッテリ最適化モジュール</span>\n<span class=\"token inserted\">+$ pacman -S tlp</span>\n<span class=\"token inserted\">+# フォント</span>\n<span class=\"token inserted\">+# ブラウザやアプリはデフォだとシステム設定のフォント読まずに表示が汚くなるので、</span>\n<span class=\"token inserted\">+# デフォ指定に含まれているttf-dejavuを入れとく(Ubuntuのデフォフォント).</span>\n<span class=\"token inserted\">+$ pacman -S ttf-fira-code oft-ipamjfont ttf-dejavu</span>\n<span class=\"token inserted\">+# 画面の明るさ</span>\n<span class=\"token inserted\">+$ pacman -S xorg-xbacklight</span>\n<span class=\"token inserted\">+# 音量</span>\n<span class=\"token inserted\">+$ pacman -S pulseaudio-alsa alsa-utils alsa-plugins</span>\n<span class=\"token inserted\">+\\```</span>\n</code></pre></div>"}],"publishedAt":"2020-06-05","updatedAt":"2021-10-13"},{"slug":"2019-11-18-abc132-e","title":"Hopscotch Addict","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","Graph"],"content":"<h2 id=\"abc132-e-hopscotch-addict\"><a href=\"#abc132-e-hopscotch-addict\"><a href=\"https://atcoder.jp/contests/abc132/tasks/abc132_e\" rel=\"nofollow\">ABC132-E Hopscotch Addict</a></a></h2>\n<h3 id=\"概要\"><a href=\"#概要\">概要</a></h3>\n<p>有向グラフ<code>G(N, M)</code>が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><msup><mn>10</mn><mn>5</mn></msup><mo separator=\"true\">,</mo><mn>0</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msup><mn>10</mn><mn>5</mn></msup><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">))</span></span></span></span></p>\n<h3 id=\"考察\"><a href=\"#考察\">考察</a></h3>\n<p>頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.</p>\n<div class=\"graph-wrapper\">\n  <div class=\"graph\">\n    <div class=\"edge\">A</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">B</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">C</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">D</div>\n  </div>\n</div>\n<div>\n  <div class=\"graph\">\n    <div class=\"edge\">A, 0</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">B, 1</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">C, 2</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">D, 0</div>\n  </div>\n</div>\n<p>このようにすることで<code>(A, 0) => (D, 0)</code>のパスの長さが3となる.<br>\nここで<code>D → A</code>のパスがあると仮定すると, 二週目は以下のようになる.</p>\n<div class=\"graph-wrapper\">\n  <div class=\"graph\">\n    <div class=\"edge\">D, 0</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">A, 1</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">B, 2</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">C, 0</div>\n  </div>\n</div>\n<p>よって<code>(A, 0) => (D, 0) => (C, 0)</code>のパスが制約のもとで存在することがわかる.<br>\nこのようにして<code>(S, 0) => (T, 0)</code> のパスが存在するかどうかを判定すればよい.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<p>遷移した回数を<code>v</code>として, <code>0, 1, 2, 0, 1, ...</code>の状態は <code>v % 3</code>で管理した.</p>\n<div class=\"remark-highlight\"><pre data-file=\"e.rs\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">VecDeque</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// head comment</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// line comment</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> g <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>m <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> que <span class=\"token operator\">=</span> <span class=\"token class-name\">VecDeque</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> dist <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">::</span><span class=\"token constant\">MAX</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">::</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">::</span><span class=\"token constant\">MAX</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> vv <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            que<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>vv<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">::</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">::</span><span class=\"token constant\">MAX</span> <span class=\"token punctuation\">{</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre></div>\n<style>\n.graph-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n\n.graph {\n  margin: 2rem 0;\n  font-size: 0.8rem;\n  display: flex;\n  justify-content: center;\n}\n\n.graph .edge {\n  position: relative;\n  z-index: 0;\n  background: #98971a;\n  width: 2.5rem;\n  height: 2.5rem;\n  border-radius: 50%;\n  text-align: center;\n  line-height: 2.5rem;\n}\n\n.graph .node {\n  position: relative;\n  width: 2rem;\n  height: 1.2rem;\n  border-bottom: 1.5px solid #7c6f64;\n  text-align: center;\n}\n</style>","description":"グラフの構築","commits":[{"title":"add graph & styling","date":"2021-10-14 18:03:32","hash":"6ea7adc9","diff":"<div class=\"remark-highlight\"><pre data-file=\"6ea7adc9.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 6ea7adc9d04f6d7a20a65ddc13452e154e8d4ecb</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Thu Oct 14 18:03:32 2021 +0900\n\n  add graph &#x26; styling\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex 24e3449..83fd070 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -20,39 +20,43 @@ $$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$$\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.\n\n<span class=\"token deleted\">-\\```html</span>\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph-wrapper\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;/div&#x26;gt;</span>\n&#x26;lt;/div&#x26;gt;\n\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;/div&#x26;gt;</span>\n&#x26;lt;/div&#x26;gt;\n<span class=\"token deleted\">-\\```</span>\n\nこのようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  \nここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.\n\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph-wrapper\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;A, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;B, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;C, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;/div&#x26;gt;</span>\n&#x26;lt;/div&#x26;gt;\n\nよって`(A, 0) =&#x26;gt; (D, 0) =&#x26;gt; (C, 0)`のパスが制約のもとで存在することがわかる.  \n@@ -103,3 +107,37 @@ fn main() {\n   else { println!(<span class=\"token string\">\"-1\"</span>); }\n}\n\\```\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;style&#x26;gt;</span>\n<span class=\"token inserted\">+.graph-wrapper {</span>\n<span class=\"token inserted\">+  display: flex;</span>\n<span class=\"token inserted\">+  flex-wrap: wrap;</span>\n<span class=\"token inserted\">+  justify-content: space-around;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+.graph {</span>\n<span class=\"token inserted\">+  margin: 2rem 0;</span>\n<span class=\"token inserted\">+  font-size: 0.8rem;</span>\n<span class=\"token inserted\">+  display: flex;</span>\n<span class=\"token inserted\">+  justify-content: center;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+.graph .edge {</span>\n<span class=\"token inserted\">+  position: relative;</span>\n<span class=\"token inserted\">+  z-index: 0;</span>\n<span class=\"token inserted\">+  background: #98971a;</span>\n<span class=\"token inserted\">+  width: 2.5rem;</span>\n<span class=\"token inserted\">+  height: 2.5rem;</span>\n<span class=\"token inserted\">+  border-radius: 50%;</span>\n<span class=\"token inserted\">+  text-align: center;</span>\n<span class=\"token inserted\">+  line-height: 2.5rem;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+.graph .node {</span>\n<span class=\"token inserted\">+  position: relative;</span>\n<span class=\"token inserted\">+  width: 2rem;</span>\n<span class=\"token inserted\">+  height: 1.2rem;</span>\n<span class=\"token inserted\">+  border-bottom: 1.5px solid #7c6f64;</span>\n<span class=\"token inserted\">+  text-align: center;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+&#x26;lt;/style&#x26;gt;</span>\n</code></pre></div>"},{"title":"wip","date":"2021-03-05 18:48:41","hash":"70a0aff5","diff":"<div class=\"remark-highlight\"><pre data-file=\"70a0aff5.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 70a0aff5a83d4332a8c3ccff3d2d3c1c84e46ef2</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Fri Mar 5 18:48:41 2021 +0900\n\n  wip\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex 4a2e5c1..24e3449 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -14,12 +14,34 @@ description: グラフの構築\n<span class=\"token comment\">### 概要</span>\n有向グラフ`G(N, M)`が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.\n\n<span class=\"token deleted\">-$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$</span>\n<span class=\"token inserted\">+$$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$$</span>\n\n<span class=\"token comment\">### 考察</span>\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.\n\n<span class=\"token inserted\">+\\```html</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\nこのようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  \nここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.\n</code></pre></div>"},{"title":"remove old","date":"2021-02-15 00:35:55","hash":"2716e36b","diff":"<div class=\"remark-highlight\"><pre data-file=\"2716e36b.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 2716e36b1d32e442f2826e8a1946a44400ca8bdf</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Mon Feb 15 00:35:55 2021 +0900\n\n  remove old\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex a107a9d..4a2e5c1 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -20,26 +20,6 @@ $2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.\n\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-</span>\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-</span>\nこのようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  \nここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.\n</code></pre></div>"},{"title":"update","date":"2021-02-15 00:34:10","hash":"bd59f09a","diff":"<div class=\"remark-highlight\"><pre data-file=\"bd59f09a.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit bd59f09a33181a1f762978251b6b4d7eb0095a09</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Mon Feb 15 00:34:10 2021 +0900\n\n  update\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex d07b8a9..a107a9d 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -10,11 +10,11 @@ description: グラフの構築\n<span class=\"token deleted\">---</span>\n\n<span class=\"token comment\">## <a href=\"https://atcoder.jp/contests/abc132/tasks/abc132_e\" class=\"token md-link\" rel=\"nofollow\">ABC132-E Hopscotch Addict</a></span>\n<span class=\"token inserted\">+</span>\n<span class=\"token comment\">### 概要</span>\n有向グラフ`G(N, M)`が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.\n\n<span class=\"token deleted\">-$2 \\leq N \\leq 10^5$,</span>\n<span class=\"token deleted\">-$0 \\leq M \\leq min(10^5, N(N-1))$</span>\n<span class=\"token inserted\">+$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$</span>\n\n<span class=\"token comment\">### 考察</span>\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n@@ -59,15 +59,18 @@ $0 \\leq M \\leq min(10^5, N(N-1))$\n<span class=\"token comment\">### 解答</span>\n遷移した回数を`v`として, `0, 1, 2, 0, 1, ...`の状態は `v % 3`で管理した.\n\n<span class=\"token deleted\">-\\```rust</span>\n<span class=\"token inserted\">+\\```rust[class=\"line-numbers\"][data-file=\"e.rs\"]</span>\nuse std::io;\nuse std::collections::VecDeque;\n\n<span class=\"token inserted\">+/// head comment</span>\nfn main() {\n   let (n, m) = {\n       let i = read::&#x26;lt;usize&#x26;gt;();\n       (i[0], i[1])\n   };\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    // line comment</span>\n   let mut g = vec![Vec::new(); n];\n   for _ in 0..m {\n       let (u, v) = {\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nnew file mode 100644\nindex 0000000..d07b8a9\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token coord\">@@ -0,0 +1,100 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Hopscotch Addict'</span>\n<span class=\"token inserted\">+date: 2019-11-18</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- AtCoder</span>\n<span class=\"token inserted\">+- Graph</span>\n<span class=\"token inserted\">+description: グラフの構築</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [ABC132-E Hopscotch Addict](https://atcoder.jp/contests/abc132/tasks/abc132_e)</span>\n<span class=\"token inserted\">+### 概要</span>\n<span class=\"token inserted\">+有向グラフ`G(N, M)`が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$2 \\leq N \\leq 10^5$,</span>\n<span class=\"token inserted\">+$0 \\leq M \\leq min(10^5, N(N-1))$</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 考察</span>\n<span class=\"token inserted\">+頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.</span>\n<span class=\"token inserted\">+長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  </span>\n<span class=\"token inserted\">+ここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+よって`(A, 0) =&#x26;gt; (D, 0) =&#x26;gt; (C, 0)`のパスが制約のもとで存在することがわかる.  </span>\n<span class=\"token inserted\">+このようにして`(S, 0) =&#x26;gt; (T, 0)` のパスが存在するかどうかを判定すればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+遷移した回数を`v`として, `0, 1, 2, 0, 1, ...`の状態は `v % 3`で管理した.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+use std::io;</span>\n<span class=\"token inserted\">+use std::collections::VecDeque;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+    let mut g = vec![Vec::new(); n];</span>\n<span class=\"token inserted\">+    for _ in 0..m {</span>\n<span class=\"token inserted\">+        let (u, v) = {</span>\n<span class=\"token inserted\">+            let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+            (i[0] - 1, i[1] - 1)</span>\n<span class=\"token inserted\">+        };</span>\n<span class=\"token inserted\">+        g[u].push(v);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    let (s, t) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0] - 1, i[1] - 1)</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut que = VecDeque::new();</span>\n<span class=\"token inserted\">+    let mut dist = vec![vec![::std::usize::MAX; 3]; n];</span>\n<span class=\"token inserted\">+    que.push_back((s, 0));</span>\n<span class=\"token inserted\">+    while let Some((u, v)) = que.pop_front() {</span>\n<span class=\"token inserted\">+        if dist[u][v % 3] != ::std::usize::MAX { continue; }</span>\n<span class=\"token inserted\">+        dist[u][v % 3] = v;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        for i in 0..g[u].len() {</span>\n<span class=\"token inserted\">+            let vv = g[u][i];</span>\n<span class=\"token inserted\">+            que.push_back((vv, v + 1));</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if dist[t][0] != ::std::usize::MAX { println!(\"{}\", dist[t][0] / 3); }</span>\n<span class=\"token inserted\">+    else { println!(\"-1\"); }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n</code></pre></div>"}],"publishedAt":"2019-11-18","updatedAt":"2021-10-14"},{"slug":"2019-10-06-nuxt-sharing-component","title":"Nuxt.js: sharing components","categories":["memo"],"image":"https://koka831.github.io/img/icon.png","tags":["Vue"],"content":"<h2 id=\"abstract\"><a href=\"#abstract\">Abstract</a></h2>\n<ul>\n<li>single repositoryで複数のprojectを管理する</li>\n<li>ビルド時に<code>nuxt.config.js</code>を上書きし, <code>pages</code>をproject毎に分離</li>\n</ul>\n<h2 id=\"motivation\"><a href=\"#motivation\">Motivation</a></h2>\n<ul>\n<li><code>admin</code>と<code>user</code>で共通のコンポーネントがある</li>\n<li><code>/user</code>, <code>/admin</code> のようにルーティングで分ける方法もあるが, そもそも<code>/admin</code> を外に出したくない(同じ環境で動作させたくない)</li>\n</ul>\n<h3 id=\"1-setup-subdir\"><a href=\"#1-setup-subdir\">1. setup subdir</a></h3>\n<p><a href=\"https://github.com/nuxt/create-nuxt-app\" rel=\"nofollow\">create-nuxt-app</a>で生成したテンプレートを元に, <code>admin/</code>ディレクトリ配下にサブプロジェクトを作成する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> admin/<span class=\"token punctuation\">{</span>pages,layouts<span class=\"token punctuation\">}</span>\n$ <span class=\"token function\">touch</span> admin/app.config.js\n<span class=\"token variable\">$ls</span>\n.gitignore\n.nuxt/\nadmin/    <span class=\"token operator\">&#x3C;</span>-- new\n  layouts/\n  pages/\n  app.config.js\nassets/\ncomponents/\n<span class=\"token punctuation\">..</span>.\nlayouts/  <span class=\"token operator\">&#x3C;</span>-- default\npages/    <span class=\"token operator\">&#x3C;</span>-- default\n\n</code></pre></div>\n<h3 id=\"2-configure-appconfigjs\"><a href=\"#2-configure-appconfigjs\">2. configure app.config.js</a></h3>\n<p><code>srcDir</code>を<code>admin</code>とすることで, Nuxtがみるプロジェクトが<code>admin/</code>配下になる.\nこれでNuxtが生成するroutingも<code>admin/pages</code>によるものになる.\nそのため, Storeをadmin側でも持ちたい場合は<code>admin/store/</code>を作成する.</p>\n<p>また, <code>admin/pages/xxx.vue</code> でも<code>import XXX from '@/components/...</code>のように<code>@</code>を用いる為に<code>build</code>ディレクティブで<code>@ alias</code>を上書きする.<br>\n(この設定がない場合, <code>@/../components/...</code>のように root directoryまで1階層のぼる必要がある)</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deepmerge'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> nuxt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../nuxt.config.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> extend <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">srcDir</span><span class=\"token operator\">:</span> __dirname<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">buildDir</span><span class=\"token operator\">:</span> <span class=\"token string\">'.nuxt/admin'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">build</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      config<span class=\"token punctuation\">.</span><span class=\"token property-access\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">alias</span><span class=\"token punctuation\">[</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>nuxt<span class=\"token punctuation\">,</span> extend<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3 id=\"3-configure-packagejson\"><a href=\"#3-configure-packagejson\">3. configure package.json</a></h3>\n<p><code>nuxt</code>の<code>--config-file</code> オプションを用いて<code>nuxt.config.js</code>を指定する.<br>\nこれで<code>yarn dev</code>とすればデフォルトの<code>pages</code>が用いられるし, <code>yarn dev:admin</code>とすれば<code>admin/pages</code>が用いられる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nuxt\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nuxt build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nuxt start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"dev:admin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nuxt --config-file admin/app.config.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"build:admin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nuxt build --config-file admin/app.config.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"start:admin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nuxt start --config-file admin/app.config.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"appendix-generated-routingnuxtadminrouterjs\"><a href=\"#appendix-generated-routingnuxtadminrouterjs\">Appendix: Generated Routing(.nuxt/admin/router.js)</a></h3>\n<p><code>yarn build:admin</code>で生成された<code>routes</code> に <code>client</code>側の<code>pages</code>が含まれていないことが確認できる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Vue</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Router</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> interopDefault <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./utils'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">scrollBehavior</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./router.scrollBehavior.js'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_0510df08</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">interopDefault</span><span class=\"token punctuation\">(</span><span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../admin/pages/index.vue'</span> <span class=\"token comment\">/* webpackChunkName: \"pages/index\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token maybe-class-name\">Vue</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Router</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> routerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span> <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">linkActiveClass</span><span class=\"token operator\">:</span> <span class=\"token string\">'nuxt-link-active'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">linkExactActiveClass</span><span class=\"token operator\">:</span> <span class=\"token string\">'nuxt-link-exact-active'</span><span class=\"token punctuation\">,</span>\n  scrollBehavior<span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> _0510df08<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">fallback</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span>routerOptions<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"repository\"><a href=\"#repository\">repository</a></h3>\n<p><a href=\"https://github.com/koka831/nuxt-multiple-sample\" rel=\"nofollow\">koka831/nuxt-multiple-sample</a></p>","description":"simple way to share components between multiple projects","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-10-06-nuxt-sharing-component.md b/_posts/2019-10-06-nuxt-sharing-component.md\nnew file mode 100644\nindex 0000000..6daf63f\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-10-06-nuxt-sharing-component.md</span>\n<span class=\"token coord\">@@ -0,0 +1,124 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Nuxt.js: sharing components'</span>\n<span class=\"token inserted\">+date: 2019-10-06</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- memo</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Vue</span>\n<span class=\"token inserted\">+description: simple way to share components between multiple projects</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Abstract</span>\n<span class=\"token inserted\">+- single repositoryで複数のprojectを管理する</span>\n<span class=\"token inserted\">+- ビルド時に`nuxt.config.js`を上書きし, `pages`をproject毎に分離</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Motivation</span>\n<span class=\"token inserted\">+- `admin`と`user`で共通のコンポーネントがある</span>\n<span class=\"token inserted\">+- `/user`, `/admin` のようにルーティングで分ける方法もあるが, そもそも`/admin` を外に出したくない(同じ環境で動作させたくない)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 1. setup subdir</span>\n<span class=\"token inserted\">+[create-nuxt-app](https://github.com/nuxt/create-nuxt-app)で生成したテンプレートを元に, `admin/`ディレクトリ配下にサブプロジェクトを作成する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ mkdir -p admin/{pages,layouts}</span>\n<span class=\"token inserted\">+$ touch admin/app.config.js</span>\n<span class=\"token inserted\">+$ls</span>\n<span class=\"token inserted\">+.gitignore</span>\n<span class=\"token inserted\">+.nuxt/</span>\n<span class=\"token inserted\">+admin/    &#x26;lt;-- new</span>\n<span class=\"token inserted\">+  layouts/</span>\n<span class=\"token inserted\">+  pages/</span>\n<span class=\"token inserted\">+  app.config.js</span>\n<span class=\"token inserted\">+assets/</span>\n<span class=\"token inserted\">+components/</span>\n<span class=\"token inserted\">+...</span>\n<span class=\"token inserted\">+layouts/  &#x26;lt;-- default</span>\n<span class=\"token inserted\">+pages/    &#x26;lt;-- default</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 2. configure app.config.js</span>\n<span class=\"token inserted\">+`srcDir`を`admin`とすることで, Nuxtがみるプロジェクトが`admin/`配下になる.</span>\n<span class=\"token inserted\">+これでNuxtが生成するroutingも`admin/pages`によるものになる.</span>\n<span class=\"token inserted\">+そのため, Storeをadmin側でも持ちたい場合は`admin/store/`を作成する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また, `admin/pages/xxx.vue` でも`import XXX from '@/components/...`のように`@`を用いる為に`build`ディレクティブで`@ alias`を上書きする.  </span>\n<span class=\"token inserted\">+(この設定がない場合, `@/../components/...`のように root directoryまで1階層のぼる必要がある)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+const path = require('path')</span>\n<span class=\"token inserted\">+const merge = require('deepmerge')</span>\n<span class=\"token inserted\">+const nuxt = require('../nuxt.config.js')</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+const extend = {</span>\n<span class=\"token inserted\">+  srcDir: __dirname,</span>\n<span class=\"token inserted\">+  buildDir: '.nuxt/admin',</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  build: {</span>\n<span class=\"token inserted\">+    extend(config) {</span>\n<span class=\"token inserted\">+      config.resolve.alias['@'] = path.resolve(__dirname, '..')</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+export default merge(nuxt, extend)</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 3. configure package.json</span>\n<span class=\"token inserted\">+`nuxt`の`--config-file` オプションを用いて`nuxt.config.js`を指定する.  </span>\n<span class=\"token inserted\">+これで`yarn dev`とすればデフォルトの`pages`が用いられるし, `yarn dev:admin`とすれば`admin/pages`が用いられる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+{</span>\n<span class=\"token inserted\">+  \"scripts\": {</span>\n<span class=\"token inserted\">+    \"dev\": \"nuxt\",</span>\n<span class=\"token inserted\">+    \"build\": \"nuxt build\",</span>\n<span class=\"token inserted\">+    \"start\": \"nuxt start\",</span>\n<span class=\"token inserted\">+    \"dev:admin\": \"nuxt --config-file admin/app.config.js\",</span>\n<span class=\"token inserted\">+    \"build:admin\": \"nuxt build --config-file admin/app.config.js\",</span>\n<span class=\"token inserted\">+    \"start:admin\": \"nuxt start --config-file admin/app.config.js\",</span>\n<span class=\"token inserted\">+  },</span>\n<span class=\"token inserted\">+  ...</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Appendix: Generated Routing(.nuxt/admin/router.js)</span>\n<span class=\"token inserted\">+`yarn build:admin`で生成された`routes` に `client`側の`pages`が含まれていないことが確認できる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+import Vue from 'vue'</span>\n<span class=\"token inserted\">+import Router from 'vue-router'</span>\n<span class=\"token inserted\">+import { interopDefault } from './utils'</span>\n<span class=\"token inserted\">+import scrollBehavior from './router.scrollBehavior.js'</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+const _0510df08 = () =&#x26;gt; interopDefault(import('../../admin/pages/index.vue' /* webpackChunkName: \"pages/index\" */))</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Vue.use(Router)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+export const routerOptions = {</span>\n<span class=\"token inserted\">+  mode: 'history',</span>\n<span class=\"token inserted\">+  base: decodeURI('/'),</span>\n<span class=\"token inserted\">+  linkActiveClass: 'nuxt-link-active',</span>\n<span class=\"token inserted\">+  linkExactActiveClass: 'nuxt-link-exact-active',</span>\n<span class=\"token inserted\">+  scrollBehavior,</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  routes: [{</span>\n<span class=\"token inserted\">+      path: \"/\",</span>\n<span class=\"token inserted\">+      component: _0510df08,</span>\n<span class=\"token inserted\">+      name: \"index\"</span>\n<span class=\"token inserted\">+    }],</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  fallback: false</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+export function createRouter() {</span>\n<span class=\"token inserted\">+  return new Router(routerOptions)</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### repository</span>\n<span class=\"token inserted\">+[koka831/nuxt-multiple-sample](https://github.com/koka831/nuxt-multiple-sample)</span>\n</code></pre></div>"}],"publishedAt":"2019-10-06","updatedAt":"2021-01-30"},{"slug":"2019-08-12-abc110-d","title":"Modular multiplicative inverse","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","組み合わせ"],"content":"<h2 id=\"abc110-d-factorization\"><a href=\"#abc110-d-factorization\"><a href=\"https://atcoder.jp/contests/abc110/tasks/abc110_d\" rel=\"nofollow\">ABC110-D Factorization</a></a></h2>\n<h3 id=\"概要\"><a href=\"#概要\">概要</a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo separator=\"true\">,</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">N, M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>が与えられ，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>a</mi><mn>2</mn></msub><mo>∗</mo><mo>⋯</mo><mo>∗</mo><msub><mi>a</mi><mi>N</mi></msub><mo>=</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">a_1 * a_2 * \\cdots * a_N = M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6153em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6153em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> を満たす<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>の組み合わせを求める.</p>\n<h3 id=\"考察\"><a href=\"#考察\">考察</a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>の積で与えられるので，素因数分解して因数を<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>個に振り分ける方法を考える.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>が<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>種類の因数からなるとすると，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>は素数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>及びべき数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">k_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>を用いて以下のように表される.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>k</mi><mn>1</mn></msub></msubsup><mo>∗</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>k</mi><mn>2</mn></msub></msubsup><mo>∗</mo><mo>⋯</mo><mo>∗</mo><msubsup><mi>p</mi><mi>L</mi><msub><mi>k</mi><mi>L</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">M = p_1^{k_1} * p_2^{k_2} * \\cdots * p_L^{k_L}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1973em;vertical-align:-0.2663em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.931em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.1449em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1973em;vertical-align:-0.2663em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.931em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.1449em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2247em;vertical-align:-0.2935em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9312em;\"><span style=\"top:-2.4065em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span><span style=\"top:-3.1451em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567em;margin-left:-0.0315em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1433em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2935em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>よってこれは<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>のべき数を<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>個に振り分ける重複組み合わせ問題になる.</p>\n<p>素因数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><msub><mi>k</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">p_i^{k_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2079em;vertical-align:-0.2769em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.931em;\"><span style=\"top:-2.4231em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.1449em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2769em;\"><span></span></span></span></span></span></span></span></span></span>を重複を許して<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>個に振り分ける組み合わせは<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>N</mi></msub><mi>H</mi><msub><mi>k</mi><mi>i</mi></msub><mo>=</mo><msub><mo stretchy=\"false\">(</mo><mi>N</mi></msub><mo>+</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi>C</mi><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">_N H k_i = (_N+k_i) C k_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\"><span class=\"mopen\">(</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">+</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> で求められる. 各素因数の振り分けは独立な事象であるから，各素因数の組み合わせの積(とMOD)をとればよい.</p>\n<p>(本来は愚直にやっても通るっぽいけど)，モジュラ逆数を用いて除算を助けてもらうことにする.</p>\n<h2 id=\"modular-multiplicative-inverse\"><a href=\"#modular-multiplicative-inverse\">Modular multiplicative inverse</a></h2>\n<p>この問題では愚直にnCrを求めても間に合うが，そもそも間に合わない問題もあるらしい.<br>\n<strong>modular multiplicative inverse</strong>を利用すると，前処理<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> クエリ<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> でmod pにおける逆元を計算できる. 逆元を用いると，mod計算など有限体上での除算が行えるようになる.\n(逆元使わないでこの問題解けるっぽいけど割り算とMODの順番がどうも合わなくてWA)</p>\n<p>逆元の求め方は<sup><a href=\"#user-content-fn-modinv\" id=\"user-content-fnref-modinv\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>より.</p>\n<p><code>struct Modulo</code>で逆元の体を定義して，<code>new()</code>時に <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">a!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">!</span></span></span></span> 及び <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">a^{-1}!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">!</span></span></span></span> を計算し，<code>comb</code>でnCrを計算する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Modulo</span> <span class=\"token punctuation\">{</span>\n    fact<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    inv_fact<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    modulo<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Modulo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> modulo<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> fact <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> inv <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> inv_fact <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        inv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">2</span><span class=\"token punctuation\">..</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            inv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inv<span class=\"token punctuation\">[</span>modulo <span class=\"token operator\">%</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>modulo <span class=\"token operator\">-</span> modulo <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulo<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        fact<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        inv_fact<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n            fact<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fact<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulo<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n            inv_fact<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inv_fact<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> inv<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> modulo<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Modulo</span> <span class=\"token punctuation\">{</span> fact<span class=\"token punctuation\">:</span> fact<span class=\"token punctuation\">,</span> inv_fact<span class=\"token punctuation\">:</span> inv_fact<span class=\"token punctuation\">,</span> modulo<span class=\"token punctuation\">:</span> modulo <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">comb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>fact<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inv_fact<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>modulo <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inv_fact<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> r<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>modulo\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-modinv\">\n<p><a href=\"https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a#3-3-%E9%80%86%E5%85%83%E3%81%AE%E6%B1%82%E3%82%81%E6%96%B9%E3%81%AE%E6%A6%82%E8%A6%81\" rel=\"nofollow\">Qiita - drken</a> <a href=\"#user-content-fnref-modinv\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-08-12-abc110-d.md b/_posts/2019-08-12-abc110-d.md\nnew file mode 100644\nindex 0000000..5a475ac\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-08-12-abc110-d.md</span>\n<span class=\"token coord\">@@ -0,0 +1,71 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Modular multiplicative inverse'</span>\n<span class=\"token inserted\">+date: 2019-08-12</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+  - 組み合わせ</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [ABC110-D Factorization](https://atcoder.jp/contests/abc110/tasks/abc110_d)</span>\n<span class=\"token inserted\">+### 概要</span>\n<span class=\"token inserted\">+$N, M$が与えられ，$a_1 * a_2 * \\cdots * a_N = M$ を満たす$a_N$の組み合わせを求める.</span>\n<span class=\"token inserted\">+### 考察</span>\n<span class=\"token inserted\">+$M$は$a_N$の積で与えられるので，素因数分解して因数を$N$個に振り分ける方法を考える.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$M$が$L$種類の因数からなるとすると，$M$は素数$p_i$及びべき数$k_i$を用いて以下のように表される.</span>\n<span class=\"token inserted\">+$M = p_1^{k_1} * p_2^{k_2} * \\cdots * p_L^{k_L}$</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+よってこれは$M$のべき数を$N$個に振り分ける重複組み合わせ問題になる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+素因数$p_i^{k_i}$を重複を許して$N$個に振り分ける組み合わせは$_N H k_i = (_N+k_i) C k_i$ で求められる. 各素因数の振り分けは独立な事象であるから，各素因数の組み合わせの積(とMOD)をとればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+(本来は愚直にやっても通るっぽいけど)，モジュラ逆数を用いて除算を助けてもらうことにする.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Modular multiplicative inverse</span>\n<span class=\"token inserted\">+この問題では愚直にnCrを求めても間に合うが，そもそも間に合わない問題もあるらしい.  </span>\n<span class=\"token inserted\">+**modular multiplicative inverse**を利用すると，前処理$O(p)$ クエリ$O(1)$ でmod pにおける逆元を計算できる. 逆元を用いると，mod計算など有限体上での除算が行えるようになる.</span>\n<span class=\"token inserted\">+(逆元使わないでこの問題解けるっぽいけど割り算とMODの順番がどうも合わなくてWA)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+逆元の求め方は[^modinv]より.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`struct Modulo`で逆元の体を定義して，`new()`時に $a!$ 及び $a^{-1}!$ を計算し，`comb`でnCrを計算する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+pub struct Modulo {</span>\n<span class=\"token inserted\">+    fact: Vec&#x26;lt;usize&#x26;gt;,</span>\n<span class=\"token inserted\">+    inv_fact: Vec&#x26;lt;usize&#x26;gt;,</span>\n<span class=\"token inserted\">+    modulo: usize</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+impl Modulo {</span>\n<span class=\"token inserted\">+    pub fn new(n: usize, modulo: usize) -&#x26;gt; Self {</span>\n<span class=\"token inserted\">+        let mut fact = vec![0; n + 1];</span>\n<span class=\"token inserted\">+        let mut inv = vec![0; n + 1];</span>\n<span class=\"token inserted\">+        let mut inv_fact = vec![0; n + 1];</span>\n<span class=\"token inserted\">+        inv[1] = 1;</span>\n<span class=\"token inserted\">+        for i in 2..n + 1 {</span>\n<span class=\"token inserted\">+            inv[i] = inv[modulo % i] * (modulo - modulo / i) % modulo;</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+        fact[0] = 1;</span>\n<span class=\"token inserted\">+        inv_fact[0] = 1;</span>\n<span class=\"token inserted\">+        for i in 0..n {</span>\n<span class=\"token inserted\">+            fact[i + 1] = fact[i] * (i + 1) % modulo;</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+        for i in 0..n {</span>\n<span class=\"token inserted\">+            inv_fact[i + 1] = inv_fact[i] * inv[i + 1] % modulo;</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+        Modulo { fact: fact, inv_fact: inv_fact, modulo: modulo }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    pub fn comb(&#x26;self, n: usize, r: usize) -&#x26;gt; usize {</span>\n<span class=\"token inserted\">+        self.fact[n] * self.inv_fact[r] %</span>\n<span class=\"token inserted\">+            self.modulo * self.inv_fact[n - r] % self.modulo</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^modinv]: [Qiita - drken](https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a#3-3-逆元の求め方の概要)</span>\n</code></pre></div>"}],"publishedAt":"2019-08-12","updatedAt":"2021-01-30"},{"slug":"2019-08-08-autolock-with-yubikey","title":"Linux: Login/sudo with Yubikey","categories":["diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Linux","udev","yubikey"],"content":"<h2 id=\"abstract\"><a href=\"#abstract\">Abstract</a></h2>\n<ul>\n<li>Linux Desktopのログイン時及び<code>sudo</code>時にYubikey + Passwordを必須にしてみた.</li>\n<li>ログインした状態でYubikeyを抜くとlockするようにした.</li>\n</ul>\n<h2 id=\"env\"><a href=\"#env\">Env</a></h2>\n<ul>\n<li>Ubuntu 18.04</li>\n<li>FIDO U2F Security Key(自分は<a href=\"https://www.amazon.co.jp/dp/B06XHTKFH3/ref=cm_sw_em_r_mt_dp_U_Ha5sDbS6H12P6\" rel=\"nofollow\">これ</a>つかってます. 端子ガードついてるKey他にも出てほしい)</li>\n</ul>\n<h2 id=\"install-dependencies\"><a href=\"#install-dependencies\">Install Dependencies</a></h2>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> add-apt-repository ppa:yubico/stable</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> yubikey-manager-qt yubioath-desktop yubikey-personalization-gui</span></span>\n</code></pre></div>\n<h2 id=\"setup-u2f-key\"><a href=\"#setup-u2f-key\">Setup U2F Key</a></h2>\n<h3 id=\"u2f-keyの登録\"><a href=\"#u2f-keyの登録\">U2F Keyの登録</a></h3>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token environment constant\">$HOME</span>/.config/Yubico</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pamu2fcfg -u<span class=\"token variable\">${<span class=\"token environment constant\">USER</span>}</span> <span class=\"token operator\">></span> <span class=\"token environment constant\">$HOME</span>/.config/Yubico/u2f_keys</span></span>\n</code></pre></div>\n<p>またバックアップデバイスを追加する場合には<code>--nouser</code>をつけて追記<sup><a href=\"#user-content-fn-pamu2fcfg\" id=\"user-content-fnref-pamu2fcfg\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>.</p>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">pamu2fcfg <span class=\"token parameter variable\">-n</span> <span class=\"token operator\">>></span> <span class=\"token environment constant\">$HOME</span>/.config/Yubico/u2f_keys</span></span>\n</code></pre></div>\n<h3 id=\"u2f-for-sudo\"><a href=\"#u2f-for-sudo\">U2F for SUDO</a></h3>\n<p>以下の6行目を追記. PAM(Pluggable Authentication Modules)での認証において，password入力後にYubikeyがrequireされるようになる(Yubikeyが無いとauthできない).</p>\n<p><strong><code>/etc/pam.d/sudo</code></strong></p>\n<div class=\"remark-highlight\"><pre data-file=\"/etc/pam.d/sudo\" class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>#%PAM-1.0\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>session    required    pam_env.so readenv=1 user_readenv=0\n<span class=\"token prefix unchanged\"> </span>session    required    pam_env.so readenv=1 envfile=/etc/default/locale user_readenv=0\n<span class=\"token prefix unchanged\"> </span>@include   common-auth\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>auth       required    pam_u2f.so\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>@include   common-account\n<span class=\"token prefix unchanged\"> </span>@include   common-session-noninteractive</span>\n</code></pre></div>\n<h3 id=\"u2f-for-login\"><a href=\"#u2f-for-login\">U2F for Login</a></h3>\n<p>Display ManagerにGDM(Gnome Display Manager)を用いている場合は以下のファイルに<code>pam_u2f.so</code>の行を追記する.<br>\n<strong><code>/etc/pam.d/gdm-password</code></strong>\nその他のDMを用いている場合(KDE等)は <strong><code>/etc/pam.d/lightdm</code></strong> に追記する.</p>\n<div class=\"remark-highlight\"><pre data-file=\"/etc/pam.d/gdm-password\" class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>#%PAM-1.0\n<span class=\"token prefix unchanged\"> </span>auth     requisite       pam_nologin.so\n<span class=\"token prefix unchanged\"> </span>auth     required        pam_succeed_if.so user != root quiet_success\n<span class=\"token prefix unchanged\"> </span>@include common-auth\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>auth     required        pam_u2f.so\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>auth     optional        pam_gnome_keyring.so\n<span class=\"token prefix unchanged\"> </span>@include common-account\n<span class=\"token prefix unchanged\"> </span>...omit</span>\n</code></pre></div>\n<h2 id=\"auto-lock-without-u2f\"><a href=\"#auto-lock-without-u2f\">Auto-lock without U2F</a></h2>\n<p>ここからが本題. U2F Keyの接続が解除されると端末をロックする.</p>\n<p>もともと自分の使っているLaptopには指紋認証センサが付属している．一般に生体認証はU2Fよりもセキュアであるし，自分も異論はない.<br>\nではU2Fが生体認証より優れている点はなにか. 自分の答えは認証の持続性をコントロールできる点である.</p>\n<p>指紋認証を例に取ると，一度ログインした端末は一定時間操作をしない際のオートロックまたはユーザ自身の能動的なログアウトをしない限り，認証を再度必要としない.<br>\n対してU2Fでは<strong>デバイスが接続されている間だけ認証されている</strong>という状態をもたらすことができる.</p>\n<p>Apple Watchを身に着けた状態でMacの自動ログインが可能<sup><a href=\"#user-content-fn-applewatch\" id=\"user-content-fnref-applewatch\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup>という例がある.\nこれはbluetooth接続したU2Fデバイスが一定距離離れるもしくはUSB接続したデバイスをejectすることで端末からログアウトする，という仕様で再現できる.</p>\n<h3 id=\"monitoring-u2f-key-by-udev\"><a href=\"#monitoring-u2f-key-by-udev\">monitoring U2F key by udev</a></h3>\n<p>U2F Keyモニターをudevに任せることにする. まず対象のIDを特定する.\n<code>udevadm monitor</code>でudevのイベントをモニタリングした状態でU2F Keyを抜き差しすると <code>bind</code>, <code>remove</code> イベントが通知されるので， <code>$ID_MODEL_ID</code> 及び <code>$ID_VENDOR_ID</code> を取得する.</p>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">udevadm monitor <span class=\"token parameter variable\">--environment</span> <span class=\"token parameter variable\">--udev</span></span></span>\n\n<span class=\"token output\">UDEV  [28028.490650] bind     /devices/pci0000:00/0000:00:14.0/usb1/1-3 (usb)</span>\n<span class=\"token output\">ACTION=bind</span>\n<span class=\"token output\">BUSNUM=001</span>\n<span class=\"token output\">DEVNAME=/dev/bus/usb/001/013</span>\n<span class=\"token output\">DEVNUM=013</span>\n<span class=\"token output\">DEVPATH=/devices/pci0000:00/0000:00:14.0/usb1/1-3</span>\n<span class=\"token output\">DEVTYPE=usb_device</span>\n<span class=\"token output\">DRIVER=usb</span>\n<span class=\"token output\">ID_BUS=usb</span>\n<span class=\"token output\">ID_MODEL=XXXXX</span>\n<span class=\"token output\">ID_MODEL_ENC=XXXXX</span>\n<span class=\"token output\">ID_MODEL_ID=f025</span>\n<span class=\"token output\">ID_REVISION=0100</span>\n<span class=\"token output\">ID_SERIAL=ExcelSecu_EsecuFIDO_HID</span>\n<span class=\"token output\">ID_USB_INTERFACES=:030000:</span>\n<span class=\"token output\">ID_VENDOR=ExcelSecu</span>\n<span class=\"token output\">ID_VENDOR_ENC=ExcelSecu</span>\n<span class=\"token output\">ID_VENDOR_ID=1ea8</span>\n<span class=\"token output\">MAJOR=189</span>\n<span class=\"token output\">MINOR=12</span>\n<span class=\"token output\">PRODUCT=1ea8/f025/100</span>\n<span class=\"token output\">SEQNUM=12938</span>\n<span class=\"token output\">SUBSYSTEM=usb</span>\n<span class=\"token output\">TYPE=0/0/0</span>\n<span class=\"token output\">USEC_INITIALIZED=28027949334</span>\n</code></pre></div>\n<p>上記の例では <code>ID_MODEL_ID=f025</code>，<code>ID_VENDOR_ID=1ea8</code> となっている.\nこのIDペアを用いて，U2F Key解除時の<code>udev</code>ルールを作成する.</p>\n<p><strong><code>/etc/udev/rules.d/xx-u2fkey.rules</code></strong> (xxは適当な数字)</p>\n<div class=\"remark-highlight\"><pre data-file=\"/etc/udev/rules.d/xx-u2fkey.rules\" class=\"language-config\"><code class=\"language-config\">ACTION==&#x26;quot;remove&#x26;quot;, ENV{ID_VENDOR_ID}==&#x26;quot;1ea8&#x26;quot;, ENV{ID_MODEL_ID}==&#x26;quot;f025&#x26;quot;, RUN+=&#x26;quot;/usr/local/bin/i3lock&#x26;quot;</code></pre></div>\n<p>最後にrulesを登録し完了.</p>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">udevadm control --reload-rules</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">service</span> udev reload</span></span>\n</code></pre></div>\n<hr>\n<p>フリーランスという職業柄，PCを所持して企業へ出向くことが多くどうやってセキュリティ担保するかなーと考えてたところ<code>pamu2fcfg</code>を見かけたので試してみた.<br>\nYubikeyを忘れて外出するという失態を犯した<sup><a href=\"#user-content-fn-twi\" id=\"user-content-fnref-twi\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">3</a></sup>ので既に運用が危ういがデータは守れてるのでよし(よくないが)</p>\n<h2 id=\"reference\"><a href=\"#reference\">Reference</a></h2>\n<ul>\n<li><a href=\"https://wiki.gentoo.org/wiki/Pam_u2f\" rel=\"nofollow\">Enable FIDO U2F USB support</a></li>\n<li><a href=\"https://support.yubico.com/support/solutions/articles/15000010964-enabling-the-yubico-ppa-on-ubuntu\" rel=\"nofollow\">support.yubico.com#enabling the Yubico PPA on Ubuntu</a></li>\n<li><a href=\"https://support.yubico.com/support/solutions/articles/15000011356-ubuntu-linux-login-guide-u2f\" rel=\"nofollow\">support.yubico.com#Ubuntu Linux Login Guide - U2F</a></li>\n</ul>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-pamu2fcfg\">\n<p><a href=\"https://developers.yubico.com/pam-u2f/Manuals/pamu2fcfg.1.html\" rel=\"nofollow\">developers.yubico.com/pam-u2f/Manuals/pamu2fcfg.1.html</a> <a href=\"#user-content-fnref-pamu2fcfg\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-applewatch\">\n<p><a href=\"https://support.apple.com/ja-jp/HT206995\" rel=\"nofollow\">support.apple.com/ja-jp/HT206995</a> <a href=\"#user-content-fnref-applewatch\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-twi\">\n<p><a href=\"https://twitter.com/k_0ka/status/1159312312156561408\" rel=\"nofollow\">twitter.com/k_0ka/status/1159312312156561408</a> <a href=\"#user-content-fnref-twi\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","description":"Yubikeyを自宅に忘れて１敗","commits":[{"title":"update","date":"2021-04-10 17:49:51","hash":"7fc1fe90","diff":"<div class=\"remark-highlight\"><pre data-file=\"7fc1fe90.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 7fc1fe9095a4a16d5b29f42b7ce90933aa17d91e</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Apr 10 17:49:51 2021 +0900\n\n  update\n\ndiff --git a/_posts/2019-08-08-autolock-with-yubikey.md b/_posts/2019-08-08-autolock-with-yubikey.md\nindex f40e591..e3bfc43 100644\n<span class=\"token deleted\">--- a/_posts/2019-08-08-autolock-with-yubikey.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-08-08-autolock-with-yubikey.md</span>\n@@ -20,7 +20,7 @@ description: Yubikeyを自宅に忘れて１敗\n\n<span class=\"token comment\">## Install Dependencies</span>\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n$ sudo add-apt-repository ppa:yubico/stable\n$ sudo apt-get install yubikey-manager-qt yubioath-desktop yubikey-personalization-gui\n\\```\n@@ -28,14 +28,14 @@ $ sudo apt-get install yubikey-manager-qt yubioath-desktop yubikey-personalizati\n<span class=\"token comment\">## Setup U2F Key</span>\n<span class=\"token comment\">### U2F Keyの登録</span>\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n$ mkdir -p $HOME/.config/Yubico\n$ pamu2fcfg -u${USER} &#x26;gt; $HOME/.config/Yubico/u2f_keys\n\\```\n\nまたバックアップデバイスを追加する場合には`--nouser`をつけて追記[^pamu2fcfg].\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n$ pamu2fcfg -n &#x26;gt;&#x26;gt; $HOME/.config/Yubico/u2f_keys\n\\```\n\n@@ -44,7 +44,7 @@ $ pamu2fcfg -n &#x26;gt;&#x26;gt; $HOME/.config/Yubico/u2f_keys\n\n**`/etc/pam.d/sudo`**\n\n<span class=\"token deleted\">-\\```diff</span>\n<span class=\"token inserted\">+\\```diff[data-file=\"/etc/pam.d/sudo\"]</span>\n<span class=\"token comment\">#%PAM-1.0</span>\n\nsession    required    pam_env.so readenv=1 user_readenv=0\n@@ -61,7 +61,7 @@ Display ManagerにGDM(Gnome Display Manager)を用いている場合は以下の\nその他のDMを用いている場合(KDE等)は **`/etc/pam.d/lightdm`** に追記する.\n\n\n<span class=\"token deleted\">-\\```diff</span>\n<span class=\"token inserted\">+\\```diff[data-file=\"/etc/pam.d/gdm-password\"]</span>\n<span class=\"token comment\">#%PAM-1.0</span>\nauth     requisite       pam_nologin.so\nauth     required        pam_succeed_if.so user != root quiet_success\n@@ -88,7 +88,7 @@ Apple Watchを身に着けた状態でMacの自動ログインが可能[^applewa\nU2F Keyモニターをudevに任せることにする. まず対象のIDを特定する.\n`udevadm monitor`でudevのイベントをモニタリングした状態でU2F Keyを抜き差しすると `bind`, `remove` イベントが通知されるので， `$ID_MODEL_ID` 及び `$ID_VENDOR_ID` を取得する.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n$ udevadm monitor --environment --udev\n\nUDEV  [28028.490650] bind     /devices/pci0000:00/0000:00:14.0/usb1/1-3 (usb)\n@@ -123,13 +123,13 @@ USEC_INITIALIZED=28027949334\n\n**`/etc/udev/rules.d/xx-u2fkey.rules`** (xxは適当な数字)\n\n<span class=\"token deleted\">-\\```config</span>\n<span class=\"token inserted\">+\\```config[data-file=\"/etc/udev/rules.d/xx-u2fkey.rules\"]</span>\nACTION==<span class=\"token string\">\"remove\"</span>, ENV{ID_VENDOR_ID}==<span class=\"token string\">\"1ea8\"</span>, ENV{ID_MODEL_ID}==<span class=\"token string\">\"f025\"</span>, RUN+=<span class=\"token string\">\"/usr/local/bin/i3lock\"</span>\n\\```\n\n最後にrulesを登録し完了.\n\n<span class=\"token deleted\">-\\```sh</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n$ udevadm control --reload-rules\n$ service udev reload\n\\```\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-08-08-autolock-with-yubikey.md b/_posts/2019-08-08-autolock-with-yubikey.md\nnew file mode 100644\nindex 0000000..f40e591\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-08-08-autolock-with-yubikey.md</span>\n<span class=\"token coord\">@@ -0,0 +1,148 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Linux: Login/sudo with Yubikey'</span>\n<span class=\"token inserted\">+date: 2019-08-08</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Linux</span>\n<span class=\"token inserted\">+- udev</span>\n<span class=\"token inserted\">+- yubikey</span>\n<span class=\"token inserted\">+description: Yubikeyを自宅に忘れて１敗</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Abstract</span>\n<span class=\"token inserted\">+- Linux Desktopのログイン時及び`sudo`時にYubikey + Passwordを必須にしてみた.</span>\n<span class=\"token inserted\">+- ログインした状態でYubikeyを抜くとlockするようにした.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Env</span>\n<span class=\"token inserted\">+- Ubuntu 18.04</span>\n<span class=\"token inserted\">+- FIDO U2F Security Key(自分は[これ](https://www.amazon.co.jp/dp/B06XHTKFH3/ref=cm_sw_em_r_mt_dp_U_Ha5sDbS6H12P6)つかってます. 端子ガードついてるKey他にも出てほしい)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Install Dependencies</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ sudo add-apt-repository ppa:yubico/stable</span>\n<span class=\"token inserted\">+$ sudo apt-get install yubikey-manager-qt yubioath-desktop yubikey-personalization-gui</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Setup U2F Key</span>\n<span class=\"token inserted\">+### U2F Keyの登録</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ mkdir -p $HOME/.config/Yubico</span>\n<span class=\"token inserted\">+$ pamu2fcfg -u${USER} &#x26;gt; $HOME/.config/Yubico/u2f_keys</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+またバックアップデバイスを追加する場合には`--nouser`をつけて追記[^pamu2fcfg].</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ pamu2fcfg -n &#x26;gt;&#x26;gt; $HOME/.config/Yubico/u2f_keys</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### U2F for SUDO</span>\n<span class=\"token inserted\">+以下の6行目を追記. PAM(Pluggable Authentication Modules)での認証において，password入力後にYubikeyがrequireされるようになる(Yubikeyが無いとauthできない).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+**`/etc/pam.d/sudo`**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```diff</span>\n<span class=\"token inserted\">+ #%PAM-1.0</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ session    required    pam_env.so readenv=1 user_readenv=0</span>\n<span class=\"token inserted\">+ session    required    pam_env.so readenv=1 envfile=/etc/default/locale user_readenv=0</span>\n<span class=\"token inserted\">+ @include   common-auth</span>\n<span class=\"token inserted\">++auth       required    pam_u2f.so</span>\n<span class=\"token inserted\">+ @include   common-account</span>\n<span class=\"token inserted\">+ @include   common-session-noninteractive</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### U2F for Login</span>\n<span class=\"token inserted\">+Display ManagerにGDM(Gnome Display Manager)を用いている場合は以下のファイルに`pam_u2f.so`の行を追記する.  </span>\n<span class=\"token inserted\">+**`/etc/pam.d/gdm-password`**</span>\n<span class=\"token inserted\">+その他のDMを用いている場合(KDE等)は **`/etc/pam.d/lightdm`** に追記する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```diff</span>\n<span class=\"token inserted\">+ #%PAM-1.0</span>\n<span class=\"token inserted\">+ auth     requisite       pam_nologin.so</span>\n<span class=\"token inserted\">+ auth     required        pam_succeed_if.so user != root quiet_success</span>\n<span class=\"token inserted\">+ @include common-auth</span>\n<span class=\"token inserted\">++auth     required        pam_u2f.so</span>\n<span class=\"token inserted\">+ auth     optional        pam_gnome_keyring.so</span>\n<span class=\"token inserted\">+ @include common-account</span>\n<span class=\"token inserted\">+ ...omit</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Auto-lock without U2F</span>\n<span class=\"token inserted\">+ここからが本題. U2F Keyの接続が解除されると端末をロックする.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+もともと自分の使っているLaptopには指紋認証センサが付属している．一般に生体認証はU2Fよりもセキュアであるし，自分も異論はない.  </span>\n<span class=\"token inserted\">+ではU2Fが生体認証より優れている点はなにか. 自分の答えは認証の持続性をコントロールできる点である.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+指紋認証を例に取ると，一度ログインした端末は一定時間操作をしない際のオートロックまたはユーザ自身の能動的なログアウトをしない限り，認証を再度必要としない.  </span>\n<span class=\"token inserted\">+対してU2Fでは**デバイスが接続されている間だけ認証されている**という状態をもたらすことができる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Apple Watchを身に着けた状態でMacの自動ログインが可能[^applewatch]という例がある.</span>\n<span class=\"token inserted\">+これはbluetooth接続したU2Fデバイスが一定距離離れるもしくはUSB接続したデバイスをejectすることで端末からログアウトする，という仕様で再現できる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### monitoring U2F key by udev</span>\n<span class=\"token inserted\">+U2F Keyモニターをudevに任せることにする. まず対象のIDを特定する.</span>\n<span class=\"token inserted\">+`udevadm monitor`でudevのイベントをモニタリングした状態でU2F Keyを抜き差しすると `bind`, `remove` イベントが通知されるので， `$ID_MODEL_ID` 及び `$ID_VENDOR_ID` を取得する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ udevadm monitor --environment --udev</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+UDEV  [28028.490650] bind     /devices/pci0000:00/0000:00:14.0/usb1/1-3 (usb)</span>\n<span class=\"token inserted\">+ACTION=bind</span>\n<span class=\"token inserted\">+BUSNUM=001</span>\n<span class=\"token inserted\">+DEVNAME=/dev/bus/usb/001/013</span>\n<span class=\"token inserted\">+DEVNUM=013</span>\n<span class=\"token inserted\">+DEVPATH=/devices/pci0000:00/0000:00:14.0/usb1/1-3</span>\n<span class=\"token inserted\">+DEVTYPE=usb_device</span>\n<span class=\"token inserted\">+DRIVER=usb</span>\n<span class=\"token inserted\">+ID_BUS=usb</span>\n<span class=\"token inserted\">+ID_MODEL=XXXXX</span>\n<span class=\"token inserted\">+ID_MODEL_ENC=XXXXX</span>\n<span class=\"token inserted\">+ID_MODEL_ID=f025</span>\n<span class=\"token inserted\">+ID_REVISION=0100</span>\n<span class=\"token inserted\">+ID_SERIAL=ExcelSecu_EsecuFIDO_HID</span>\n<span class=\"token inserted\">+ID_USB_INTERFACES=:030000:</span>\n<span class=\"token inserted\">+ID_VENDOR=ExcelSecu</span>\n<span class=\"token inserted\">+ID_VENDOR_ENC=ExcelSecu</span>\n<span class=\"token inserted\">+ID_VENDOR_ID=1ea8</span>\n<span class=\"token inserted\">+MAJOR=189</span>\n<span class=\"token inserted\">+MINOR=12</span>\n<span class=\"token inserted\">+PRODUCT=1ea8/f025/100</span>\n<span class=\"token inserted\">+SEQNUM=12938</span>\n<span class=\"token inserted\">+SUBSYSTEM=usb</span>\n<span class=\"token inserted\">+TYPE=0/0/0</span>\n<span class=\"token inserted\">+USEC_INITIALIZED=28027949334</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+上記の例では `ID_MODEL_ID=f025`，`ID_VENDOR_ID=1ea8` となっている.</span>\n<span class=\"token inserted\">+このIDペアを用いて，U2F Key解除時の`udev`ルールを作成する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+**`/etc/udev/rules.d/xx-u2fkey.rules`** (xxは適当な数字)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```config</span>\n<span class=\"token inserted\">+ACTION==\"remove\", ENV{ID_VENDOR_ID}==\"1ea8\", ENV{ID_MODEL_ID}==\"f025\", RUN+=\"/usr/local/bin/i3lock\"</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最後にrulesを登録し完了.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ udevadm control --reload-rules</span>\n<span class=\"token inserted\">+$ service udev reload</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+フリーランスという職業柄，PCを所持して企業へ出向くことが多くどうやってセキュリティ担保するかなーと考えてたところ`pamu2fcfg`を見かけたので試してみた.  </span>\n<span class=\"token inserted\">+Yubikeyを忘れて外出するという失態を犯した[^twi]ので既に運用が危ういがデータは守れてるのでよし(よくないが)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Reference</span>\n<span class=\"token inserted\">+[^pamu2fcfg]: [developers.yubico.com/pam-u2f/Manuals/pamu2fcfg.1.html](https://developers.yubico.com/pam-u2f/Manuals/pamu2fcfg.1.html)</span>\n<span class=\"token inserted\">+[^applewatch]: [support.apple.com/ja-jp/HT206995](https://support.apple.com/ja-jp/HT206995)</span>\n<span class=\"token inserted\">+[^twi]: [twitter.com/k_0ka/status/1159312312156561408](https://twitter.com/k_0ka/status/1159312312156561408)</span>\n<span class=\"token inserted\">+- [Enable FIDO U2F USB support](https://wiki.gentoo.org/wiki/Pam_u2f)</span>\n<span class=\"token inserted\">+- [support.yubico.com#enabling the Yubico PPA on Ubuntu](https://support.yubico.com/support/solutions/articles/15000010964-enabling-the-yubico-ppa-on-ubuntu)</span>\n<span class=\"token inserted\">+- [support.yubico.com#Ubuntu Linux Login Guide - U2F](https://support.yubico.com/support/solutions/articles/15000011356-ubuntu-linux-login-guide-u2f)</span>\n</code></pre></div>"}],"publishedAt":"2019-08-08","updatedAt":"2021-04-10"},{"slug":"2019-07-27-linux-usergroup","title":"Linux: 画面の明るさを変更できなくなった","categories":["diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Linux","udev"],"content":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\">TL; DR</a></h2>\n<ul>\n<li>作業ユーザを<code>video</code>グループに追加</li>\n<li>udevのrulesを追加し<code>brightness</code>デバイスへの書き込み権限を付与</li>\n</ul>\n<h2 id=\"概要\"><a href=\"#概要\">概要</a></h2>\n<p>Thinkpad X1 Carbon(2019)を購入したので，Gentooをインストールした.\nが，F5, F6での明るさ調整が効かなかった. クッソまぶしい.</p>\n<p>明るさ調整には<code>light</code>コマンドを用いたところ，<code>sudo light -A 5</code>のようにroot権限を用いると調整が行えた.</p>\n<h2 id=\"解決策\"><a href=\"#解決策\">解決策</a></h2>\n<ol>\n<li>作業ユーザを<code>video</code>グループに追加する.</li>\n</ol>\n<p>usergroupは以下で確認できる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ <span class=\"token function\">cut</span> -d: <span class=\"token parameter variable\">-f1</span> /etc/group\n</code></pre></div>\n<p>そのなかでもメジャーなものは以下(独断).</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">name</th><th align=\"center\">role</th></tr></thead><tbody><tr><td align=\"center\">wheel</td><td align=\"center\">管理権限作業用グループ</td></tr><tr><td align=\"center\">log</td><td align=\"center\">/var/log/ へのアクセス用グループ</td></tr><tr><td align=\"center\">video</td><td align=\"center\">ビデオキャプチャ・フレームバッファアクセス</td></tr><tr><td align=\"center\">docker</td><td align=\"center\">docker作業用グループ</td></tr></tbody></table>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">usermod</span> <span class=\"token parameter variable\">-aG</span> video <span class=\"token variable\">${<span class=\"token environment constant\">USER</span>}</span>\n</code></pre></div>\n<p><code>usermod</code>コマンドを用いて<code>$USER</code>をグループに追加する.<br>\n例えば<code>$USER</code>を<code>docker</code>グループに追加した場合, <code>$USER</code>は<code>docker</code>の操作に管理者権限が不要となる.</p>\n<p>(ただ第三者が作成したスクリプトであってもroot権限で実行できるということなので，<code>docker</code>を用いる場合には<code>newgrp</code>を用いて一時的にグループを変更するなどのほうがいいと思う. <code>docker</code>の場合権限昇格などのリスクもあるので気をつけよう．お兄さんとの約束だよ)</p>\n<ol start=\"2\">\n<li><code>brightness</code>デバイスの書き込み権限を<code>video</code>グループに付与する.</li>\n</ol>\n<p>画面の明るさ(<code>brightness</code>)は<code>udev</code>によって管理されている.\n<code>/usr/lib/udev/rules.d/xx-brightness.rules</code>を次のように記述する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ACTION==&#x26;quot;add&#x26;quot;, SUBSYSTEM==&#x26;quot;backlight&#x26;quot;, RUN+=&#x26;quot;/bin/chgrp video /sys/class/backlight/%k/brightness&#x26;quot;\nACTION==&#x26;quot;add&#x26;quot;, SUBSYSTEM==&#x26;quot;backlight&#x26;quot;, RUN+=&#x26;quot;/bin/chmod g+w /sys/class/backlight/%k/brightness&#x26;quot;</code></pre></div>\n<p>これで起動時に<code>video</code>グループに対して<code>brightness</code>デバイスへの書き込み権限が付与される.</p>\n<h2 id=\"追記\"><a href=\"#追記\">追記</a></h2>\n<p>かわいい感じになりました. yay\n</p><figure><img src=\"./img/desktop.png\" alt=\"\"><figcaption>img.1 </figcaption></figure><p></p>\n<h2 id=\"reference\"><a href=\"#reference\">reference</a></h2>\n<ul>\n<li><a href=\"https://wiki.archlinux.jp/index.php/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%A8%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97\" rel=\"nofollow\">arch linux#グループ一覧</a></li>\n<li><a href=\"https://wiki.archlinux.org/index.php/Backlight\" rel=\"nofollow\">arch linux#brightness</a></li>\n</ul>","description":"バルス","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-07-27-linux-usergroup.md b/_posts/2019-07-27-linux-usergroup.md\nnew file mode 100644\nindex 0000000..0bafcf1\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-07-27-linux-usergroup.md</span>\n<span class=\"token coord\">@@ -0,0 +1,65 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Linux: 画面の明るさを変更できなくなった'</span>\n<span class=\"token inserted\">+date: 2019-07-27</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Linux</span>\n<span class=\"token inserted\">+- udev</span>\n<span class=\"token inserted\">+description: バルス</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## TL; DR</span>\n<span class=\"token inserted\">+- 作業ユーザを`video`グループに追加</span>\n<span class=\"token inserted\">+- udevのrulesを追加し`brightness`デバイスへの書き込み権限を付与</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 概要</span>\n<span class=\"token inserted\">+Thinkpad X1 Carbon(2019)を購入したので，Gentooをインストールした. </span>\n<span class=\"token inserted\">+が，F5, F6での明るさ調整が効かなかった. クッソまぶしい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+明るさ調整には`light`コマンドを用いたところ，`sudo light -A 5`のようにroot権限を用いると調整が行えた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 解決策</span>\n<span class=\"token inserted\">+1. 作業ユーザを`video`グループに追加する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+usergroupは以下で確認できる.</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+$ cut -d: -f1 /etc/group</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+そのなかでもメジャーなものは以下(独断).</span>\n<span class=\"token inserted\">+|name|role|</span>\n<span class=\"token inserted\">+|:---:|:---:|</span>\n<span class=\"token inserted\">+|wheel| 管理権限作業用グループ|</span>\n<span class=\"token inserted\">+|log| /var/log/ へのアクセス用グループ|</span>\n<span class=\"token inserted\">+|video| ビデオキャプチャ・フレームバッファアクセス|</span>\n<span class=\"token inserted\">+|docker| docker作業用グループ|</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+usermod -aG video ${USER}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+`usermod`コマンドを用いて`$USER`をグループに追加する.  </span>\n<span class=\"token inserted\">+例えば`$USER`を`docker`グループに追加した場合, `$USER`は`docker`の操作に管理者権限が不要となる.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+(ただ第三者が作成したスクリプトであってもroot権限で実行できるということなので，`docker`を用いる場合には`newgrp`を用いて一時的にグループを変更するなどのほうがいいと思う. `docker`の場合権限昇格などのリスクもあるので気をつけよう．お兄さんとの約束だよ)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+2. `brightness`デバイスの書き込み権限を`video`グループに付与する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+画面の明るさ(`brightness`)は`udev`によって管理されている. </span>\n<span class=\"token inserted\">+`/usr/lib/udev/rules.d/xx-brightness.rules`を次のように記述する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+ACTION==\"add\", SUBSYSTEM==\"backlight\", RUN+=\"/bin/chgrp video /sys/class/backlight/%k/brightness\"</span>\n<span class=\"token inserted\">+ACTION==\"add\", SUBSYSTEM==\"backlight\", RUN+=\"/bin/chmod g+w /sys/class/backlight/%k/brightness\"</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これで起動時に`video`グループに対して`brightness`デバイスへの書き込み権限が付与される.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 追記</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+かわいい感じになりました. yay</span>\n<span class=\"token inserted\">+![](./img/desktop.png)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## reference</span>\n<span class=\"token inserted\">+- [arch linux#グループ一覧](https://wiki.archlinux.jp/index.php/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%A8%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97)</span>\n<span class=\"token inserted\">+- [arch linux#brightness](https://wiki.archlinux.org/index.php/Backlight)</span>\n</code></pre></div>"}],"publishedAt":"2019-07-27","updatedAt":"2021-01-30"},{"slug":"2019-07-15-internal-vue","title":"Internal Vue.js 1","categories":["Code Reading"],"image":"https://koka831.github.io/img/icon.png","tags":["Vue","Virtual DOM"],"content":"<p><a href=\"https://github.com/vuejs/vue\" rel=\"nofollow\">Vue.js</a>のreactive systemがどのように実装されているか追ってみた.\n初回はコンパイラの挙動を確認.</p>\n<ul>\n<li>Vuejs v2.6.10</li>\n</ul>\n<h2 id=\"srccompilerindexjs\"><a href=\"#srccompilerindexjs\">src/compiler/index.js</a></h2>\n<p>compilerのentrypointとなるのが<code>src/compiler/index.js</code>.<br>\n(Vue.jsは<a href=\"https://flow.org\" rel=\"nofollow\">flow</a>を用いてtype checkを行っている. compiler周りの型は<code>flow/compiler.js</code>に記載.)</p>\n<p><code>parse(template, options)</code>でASTを生成し，<code>generate(ast, options)</code>でcodeを生成する.<br>\nVirtual DOMのpatch/mergeを効率よく行うため，返り値の<code>CompiledResult</code>に<code>code</code>だけでなくASTを持たせている.</p>\n<p><code>staticRenderFns</code>についてはparser部分で説明する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// `createCompilerCreator` allows creating compilers that use alternative</span>\n<span class=\"token comment\">// parser/optimizer/codegen, e.g the SSR optimizing compiler.</span>\n<span class=\"token comment\">// Here we just export a default compiler using the default parts.</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> createCompiler <span class=\"token operator\">=</span> <span class=\"token function\">createCompilerCreator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">baseCompile</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompilerOptions</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompiledResult</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">optimize</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    ast<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span><span class=\"token property-access\">staticRenderFns</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2 id=\"srccompilerparserindexjs\"><a href=\"#srccompilerparserindexjs\">src/compiler/parser/index.js</a></h2>\n<p><code>.vue</code>ファイルからASTを生成する部分. <code>parse</code>関数内部で関数定義してて長いので，重要なところだけピックアップする.<br>\nVueのテンプレートはHTMLのDOMをベースにしていて，特に</p>\n<ul>\n<li>Mustache</li>\n<li>Directive\nの2点を拡張記法としてもっている．</li>\n</ul>\n<p>そのためパース自体は<code>html-parse</code>を用いており，<code>parse</code>の主な仕事はHTML DOMのASTを返すのとパース時のエラー出力となっている．</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * Convert HTML string to AST.</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompilerOptions</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  warn <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span><span class=\"token property-access\">warn</span> <span class=\"token operator\">||</span> baseWarn\n  <span class=\"token comment\">/* omit */</span>\n\n  <span class=\"token function\">parseHTML</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* omit */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">start</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> unary<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* omit */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> root <span class=\"token comment\">// ASTのroot Node</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>関係ないけど階段状にインポートしてるの好き.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  addProp<span class=\"token punctuation\">,</span>\n  addAttr<span class=\"token punctuation\">,</span>\n  baseWarn<span class=\"token punctuation\">,</span>\n  addHandler<span class=\"token punctuation\">,</span>\n  addDirective<span class=\"token punctuation\">,</span>\n  getBindingAttr<span class=\"token punctuation\">,</span>\n  getAndRemoveAttr<span class=\"token punctuation\">,</span>\n  getRawBindingAttr<span class=\"token punctuation\">,</span>\n  pluckModuleFunction<span class=\"token punctuation\">,</span>\n  getAndRemoveAttrByRegex\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../helpers'</span>\n</code></pre></div>\n<h2 id=\"abstract-syntax-tree\"><a href=\"#abstract-syntax-tree\">Abstract Syntax Tree</a></h2>\n<p><code>generate</code>が受け取る<code>ast</code>の型<code>ASTElement</code>は<code>flow/compiler.js</code>に定義されている．<br>\nASTは以下の3種類に分類され，<code>ASTNode</code>がそれぞれの<code>type</code>を元に判別している．</p>\n<ul>\n<li><code>ASTElement</code>: type: 1</li>\n<li><code>ASTText</code>: type: 2</li>\n<li><code>ASTExpression</code>: type: 3</li>\n</ul>\n<p><code>type ASTNode = ASTElement | ASTText | ASTExpression</code></p>\n<p><code>ASTElement</code>を例にとると以下のようになっている．</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">declare type <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">attrsList</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ASTAttr</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">attrsMap</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">rawAttrsMap</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTAttr</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">parent</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ASTNode</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* omit */</span>\n  staticRoot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n  text<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  component<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  transition<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* omit */</span>\n\n  model<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">callback</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">expression</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ASTの構造は<code>ASTElement</code>がrootとなり，branchに<code>ASTNode</code>を再帰的に持つ構造になる.\n<code>staticRoot?</code>や<code>component?</code>等のパラメータは，その<code>ASTNode</code>以下が<code>static</code>であるか<code>dynamic</code>であるか，等レンダリングの最適化の際に参照される．\nこの最適化機構は<code>src/compiler/optimizer.js</code>の<code>markStatic</code>及び<code>markStaticRoot</code>が担う.</p>\n<h2 id=\"srccompilercodegenindexjs\"><a href=\"#srccompilercodegenindexjs\">src/compiler/codegen/index.js</a></h2>\n<p><code>generate</code>はASTから<code>render</code>と<code>staticRenderFns</code>の２つを生成する．<br>\n<code>render</code>がVueのDynamic Renderingを担当し，<code>staticRenderFns</code>は静的な(変更のない)DOMを生成する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generate</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">ast</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompilerOptions</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CodegenResult</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CodegenState</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> ast <span class=\"token operator\">?</span> <span class=\"token function\">genElement</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'_c(\"div\")'</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">with(this){return </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">staticRenderFns</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>genElement</code>は<code>ASTElement</code>の<code>staticRoot?</code>や<code>for?</code>等を確認し，それぞれのディレクティブ・タグに対応する<code>Element</code>, <code>Component</code>を生成する.\n各々の生成は<code>genStatic</code>, <code>genIf</code>のようにそれぞれのジェネレータで行う．\n各々のジェネレータは受け取ったASTを処理した後に再帰的に<code>genElement</code>を呼び出す．<br>\n最終的に<code>genElement</code>は最小単位である<code>Element</code>の生成を行う．<br>\n<code>Element</code>は<code>&#x3C;tag data>children&#x3C;/tag></code>からなるDOMである．</p>\n<p>以下がその生成部分.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">data <span class=\"token operator\">=</span> <span class=\"token function\">genData</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* omit */</span>\n<span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token property-access\">inlineTemplate</span> <span class=\"token operator\">?</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">:</span> <span class=\"token function\">genChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\ncode <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">_c('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span><span class=\"token property-access\">tag</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n  data <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\">// data</span>\n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n  children <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>children<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\">// children</span>\n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>\n<p><code>Element</code>のdata部分は<code>genData</code>が担当する. data部分に含まれるのは<code>class</code>, <code>directive</code>, <code>model</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">genData</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CodegenState</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'{'</span>\n\n  <span class=\"token comment\">// directives first.</span>\n  <span class=\"token comment\">// directives may mutate the el's other properties before they are generated.</span>\n  <span class=\"token keyword\">const</span> dirs <span class=\"token operator\">=</span> <span class=\"token function\">genDirectives</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>dirs<span class=\"token punctuation\">)</span> data <span class=\"token operator\">+=</span> dirs <span class=\"token operator\">+</span> <span class=\"token string\">','</span>\n\n  <span class=\"token comment\">/* omit */</span>\n  <span class=\"token comment\">// component v-model</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">model:{value:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n    <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,callback:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">callback</span>\n    <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,expression:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">expression</span>\n    <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">},</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/* omit */</span>\n  <span class=\"token keyword control-flow\">return</span> data\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最終的に<code>CompiledResult</code>が生成される.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">declare type <span class=\"token maybe-class-name\">CompiledResult</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">ast</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span><span class=\"token maybe-class-name\">ASTElement</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  stringRenderFns<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  errors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">WarningMessage</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  tips<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">WarningMessage</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2>\n<ul>\n<li>Vueのコンパイラは<code>parser</code>と<code>generator</code>からなる.</li>\n<li><code>parser</code>は<code>html-parse</code>を元にASTを生成する.</li>\n<li><code>generator</code>はASTを元に動的部分と静的部分の<code>render</code>群を生成する</li>\n</ul>\n<h2 id=\"next\"><a href=\"#next\">Next</a></h2>\n<p>次回は<code>src/core/observer</code>を読む.<br>\n(名前からVueのreactive systemがObserver patternベースなんだろうな)</p>\n<ul>\n<li><a href=\"/2019/08/08/internal-vue-2/\">次回</a></li>\n</ul>","description":"internal Vue.js & read how Vue compiler works","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-07-15-internal-vue.md b/_posts/2019-07-15-internal-vue.md\nnew file mode 100644\nindex 0000000..b460b95\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-07-15-internal-vue.md</span>\n<span class=\"token coord\">@@ -0,0 +1,228 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Internal Vue.js 1'</span>\n<span class=\"token inserted\">+date: 2019-07-15</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Code Reading</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Vue</span>\n<span class=\"token inserted\">+- Virtual DOM</span>\n<span class=\"token inserted\">+description: internal Vue.js &#x26; read how Vue compiler works</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[Vue.js](https://github.com/vuejs/vue)のreactive systemがどのように実装されているか追ってみた.</span>\n<span class=\"token inserted\">+初回はコンパイラの挙動を確認.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- Vuejs v2.6.10</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## src/compiler/index.js</span>\n<span class=\"token inserted\">+compilerのentrypointとなるのが`src/compiler/index.js`.  </span>\n<span class=\"token inserted\">+(Vue.jsは[flow](https://flow.org)を用いてtype checkを行っている. compiler周りの型は`flow/compiler.js`に記載.)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`parse(template, options)`でASTを生成し，`generate(ast, options)`でcodeを生成する.  </span>\n<span class=\"token inserted\">+Virtual DOMのpatch/mergeを効率よく行うため，返り値の`CompiledResult`に`code`だけでなくASTを持たせている.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`staticRenderFns`についてはparser部分で説明する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+// `createCompilerCreator` allows creating compilers that use alternative</span>\n<span class=\"token inserted\">+// parser/optimizer/codegen, e.g the SSR optimizing compiler.</span>\n<span class=\"token inserted\">+// Here we just export a default compiler using the default parts.</span>\n<span class=\"token inserted\">+export const createCompiler = createCompilerCreator(function baseCompile (</span>\n<span class=\"token inserted\">+  template: string,</span>\n<span class=\"token inserted\">+  options: CompilerOptions</span>\n<span class=\"token inserted\">+): CompiledResult {</span>\n<span class=\"token inserted\">+  const ast = parse(template.trim(), options)</span>\n<span class=\"token inserted\">+  if (options.optimize !== false) {</span>\n<span class=\"token inserted\">+    optimize(ast, options)</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+  const code = generate(ast, options)</span>\n<span class=\"token inserted\">+  return {</span>\n<span class=\"token inserted\">+    ast,</span>\n<span class=\"token inserted\">+    render: code.render,</span>\n<span class=\"token inserted\">+    staticRenderFns: code.staticRenderFns</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+})</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## src/compiler/parser/index.js</span>\n<span class=\"token inserted\">+`.vue`ファイルからASTを生成する部分. `parse`関数内部で関数定義してて長いので，重要なところだけピックアップする.  </span>\n<span class=\"token inserted\">+VueのテンプレートはHTMLのDOMをベースにしていて，特に</span>\n<span class=\"token inserted\">+- Mustache</span>\n<span class=\"token inserted\">+- Directive</span>\n<span class=\"token inserted\">+の2点を拡張記法としてもっている．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+そのためパース自体は`html-parse`を用いており，`parse`の主な仕事はHTML DOMのASTを返すのとパース時のエラー出力となっている．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * Convert HTML string to AST.</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+export function parse (</span>\n<span class=\"token inserted\">+  template: string,</span>\n<span class=\"token inserted\">+  options: CompilerOptions</span>\n<span class=\"token inserted\">+): ASTElement | void {</span>\n<span class=\"token inserted\">+  warn = options.warn || baseWarn</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  parseHTML(template, {</span>\n<span class=\"token inserted\">+    /* omit */,</span>\n<span class=\"token inserted\">+    start (tag, attrs, unary, start, end) { /* omit */ },</span>\n<span class=\"token inserted\">+  })</span>\n<span class=\"token inserted\">+  return root // ASTのroot Node</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+関係ないけど階段状にインポートしてるの好き.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+import {</span>\n<span class=\"token inserted\">+  addProp,</span>\n<span class=\"token inserted\">+  addAttr,</span>\n<span class=\"token inserted\">+  baseWarn,</span>\n<span class=\"token inserted\">+  addHandler,</span>\n<span class=\"token inserted\">+  addDirective,</span>\n<span class=\"token inserted\">+  getBindingAttr,</span>\n<span class=\"token inserted\">+  getAndRemoveAttr,</span>\n<span class=\"token inserted\">+  getRawBindingAttr,</span>\n<span class=\"token inserted\">+  pluckModuleFunction,</span>\n<span class=\"token inserted\">+  getAndRemoveAttrByRegex</span>\n<span class=\"token inserted\">+} from '../helpers'</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Abstract Syntax Tree</span>\n<span class=\"token inserted\">+`generate`が受け取る`ast`の型`ASTElement`は`flow/compiler.js`に定義されている．  </span>\n<span class=\"token inserted\">+ASTは以下の3種類に分類され，`ASTNode`がそれぞれの`type`を元に判別している．</span>\n<span class=\"token inserted\">+- `ASTElement`: type: 1</span>\n<span class=\"token inserted\">+- `ASTText`: type: 2</span>\n<span class=\"token inserted\">+- `ASTExpression`: type: 3</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`type ASTNode = ASTElement | ASTText | ASTExpression`</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`ASTElement`を例にとると以下のようになっている．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+declare type ASTElement = {</span>\n<span class=\"token inserted\">+  type: 1;</span>\n<span class=\"token inserted\">+  tag: string;</span>\n<span class=\"token inserted\">+  attrsList: Array&#x26;lt;ASTAttr&#x26;gt;;</span>\n<span class=\"token inserted\">+  attrsMap: { [key: string]: any };</span>\n<span class=\"token inserted\">+  rawAttrsMap: { [key: string]: ASTAttr };</span>\n<span class=\"token inserted\">+  parent: ASTElement | void;</span>\n<span class=\"token inserted\">+  children: Array&#x26;lt;ASTNode&#x26;gt;;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+  staticRoot?: boolean;</span>\n<span class=\"token inserted\">+  text?: string;</span>\n<span class=\"token inserted\">+  component?: string;</span>\n<span class=\"token inserted\">+  if?: string;</span>\n<span class=\"token inserted\">+  for?: string;</span>\n<span class=\"token inserted\">+  transition?: string | true;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  model?: {</span>\n<span class=\"token inserted\">+    value: string;</span>\n<span class=\"token inserted\">+    callback: string;</span>\n<span class=\"token inserted\">+    expression: string;</span>\n<span class=\"token inserted\">+  };</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ASTの構造は`ASTElement`がrootとなり，branchに`ASTNode`を再帰的に持つ構造になる.</span>\n<span class=\"token inserted\">+`staticRoot?`や`component?`等のパラメータは，その`ASTNode`以下が`static`であるか`dynamic`であるか，等レンダリングの最適化の際に参照される．</span>\n<span class=\"token inserted\">+この最適化機構は`src/compiler/optimizer.js`の`markStatic`及び`markStaticRoot`が担う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## src/compiler/codegen/index.js</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`generate`はASTから`render`と`staticRenderFns`の２つを生成する．  </span>\n<span class=\"token inserted\">+`render`がVueのDynamic Renderingを担当し，`staticRenderFns`は静的な(変更のない)DOMを生成する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+export function generate (</span>\n<span class=\"token inserted\">+  ast: ASTElement | void,</span>\n<span class=\"token inserted\">+  options: CompilerOptions</span>\n<span class=\"token inserted\">+): CodegenResult {</span>\n<span class=\"token inserted\">+  const state = new CodegenState(options)</span>\n<span class=\"token inserted\">+  const code = ast ? genElement(ast, state) : '_c(\"div\")'</span>\n<span class=\"token inserted\">+  return {</span>\n<span class=\"token inserted\">+    render: `with(this){return ${code}}`,</span>\n<span class=\"token inserted\">+    staticRenderFns: state.staticRenderFns</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`genElement`は`ASTElement`の`staticRoot?`や`for?`等を確認し，それぞれのディレクティブ・タグに対応する`Element`, `Component`を生成する.</span>\n<span class=\"token inserted\">+各々の生成は`genStatic`, `genIf`のようにそれぞれのジェネレータで行う．</span>\n<span class=\"token inserted\">+各々のジェネレータは受け取ったASTを処理した後に再帰的に`genElement`を呼び出す．  </span>\n<span class=\"token inserted\">+最終的に`genElement`は最小単位である`Element`の生成を行う．  </span>\n<span class=\"token inserted\">+`Element`は`&#x26;lt;tag data&#x26;gt;children&#x26;lt;/tag&#x26;gt;`からなるDOMである．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+以下がその生成部分.</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+data = genData(el, state)</span>\n<span class=\"token inserted\">+/* omit */</span>\n<span class=\"token inserted\">+const children = el.inlineTemplate ? null : genChildren(el, state, true)</span>\n<span class=\"token inserted\">+code = `_c('${el.tag}'${</span>\n<span class=\"token inserted\">+  data ? `,${data}` : '' // data</span>\n<span class=\"token inserted\">+}${</span>\n<span class=\"token inserted\">+  children ? `,${children}` : '' // children</span>\n<span class=\"token inserted\">+})`</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`Element`のdata部分は`genData`が担当する. data部分に含まれるのは`class`, `directive`, `model`.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+export function genData (el: ASTElement, state: CodegenState): string {</span>\n<span class=\"token inserted\">+  let data = '{'</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  // directives first.</span>\n<span class=\"token inserted\">+  // directives may mutate the el's other properties before they are generated.</span>\n<span class=\"token inserted\">+  const dirs = genDirectives(el, state)</span>\n<span class=\"token inserted\">+  if (dirs) data += dirs + ','</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+  // component v-model</span>\n<span class=\"token inserted\">+  if (el.model) {</span>\n<span class=\"token inserted\">+    data += `model:{value:${</span>\n<span class=\"token inserted\">+      el.model.value</span>\n<span class=\"token inserted\">+    },callback:${</span>\n<span class=\"token inserted\">+      el.model.callback</span>\n<span class=\"token inserted\">+    },expression:${</span>\n<span class=\"token inserted\">+      el.model.expression</span>\n<span class=\"token inserted\">+    }},`</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+  return data</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最終的に`CompiledResult`が生成される.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+declare type CompiledResult = {</span>\n<span class=\"token inserted\">+  ast: ?ASTElement;</span>\n<span class=\"token inserted\">+  render: string;</span>\n<span class=\"token inserted\">+  staticRenderFns: Array&#x26;lt;string&#x26;gt;;</span>\n<span class=\"token inserted\">+  stringRenderFns?: Array&#x26;lt;string&#x26;gt;;</span>\n<span class=\"token inserted\">+  errors?: Array&#x26;lt;string | WarningMessage&#x26;gt;;</span>\n<span class=\"token inserted\">+  tips?: Array&#x26;lt;string | WarningMessage&#x26;gt;;</span>\n<span class=\"token inserted\">+};</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Summary</span>\n<span class=\"token inserted\">+- Vueのコンパイラは`parser`と`generator`からなる.</span>\n<span class=\"token inserted\">+- `parser`は`html-parse`を元にASTを生成する.</span>\n<span class=\"token inserted\">+- `generator`はASTを元に動的部分と静的部分の`render`群を生成する</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Next</span>\n<span class=\"token inserted\">+次回は`src/core/observer`を読む.  </span>\n<span class=\"token inserted\">+(名前からVueのreactive systemがObserver patternベースなんだろうな)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- [次回](/2019/08/08/internal-vue-2/)</span>\n</code></pre></div>"}],"publishedAt":"2019-07-15","updatedAt":"2021-01-30"},{"slug":"2019-06-07-lie-algebra","title":"Lie Algebra","categories":["diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Lie Algebra"],"content":"<p><a href=\"https://nefrock.connpass.com/event/133937/\" rel=\"nofollow\">Lie Algebraの話</a>を聞いたときのメモ.</p>\n<p>ベクトル空間を有限次元/体<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>を複素数体とする\n因数分解の出来る体.</p>\n<p>既約可容系 → ユークリッド空間</p>\n<p>ベクトル空間上に演算を導入する系っぽい．</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">R^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>において</p>\n<ul>\n<li>交代性</li>\n<li>ヤコビの恒等式\nがなりたつ</li>\n</ul>\n<p>リー<strong>環</strong>って名前だけど加法に関してリー群をなすわけではないっぽい?</p>\n<ul>\n<li>これ環？</li>\n</ul>\n<p>既約可容系が図形に対応するの何でなん</p>\n<hr>\n<p><strong>感想</strong></p>\n<p>後半2/3ほぼほぼわからんかった.</p>","description":"リー環論完全に理解した","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-06-07-lie-algebra.md b/_posts/2019-06-07-lie-algebra.md\nnew file mode 100644\nindex 0000000..d94b869\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-06-07-lie-algebra.md</span>\n<span class=\"token coord\">@@ -0,0 +1,33 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Lie Algebra'</span>\n<span class=\"token inserted\">+date: 2019-06-07</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+  - diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - Lie Algebra</span>\n<span class=\"token inserted\">+description: リー環論完全に理解した</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[Lie Algebraの話](https://nefrock.connpass.com/event/133937/)を聞いたときのメモ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ベクトル空間を有限次元/体$K$を複素数体とする</span>\n<span class=\"token inserted\">+因数分解の出来る体.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+既約可容系 → ユークリッド空間</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ベクトル空間上に演算を導入する系っぽい．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$R^3$において</span>\n<span class=\"token inserted\">+- 交代性</span>\n<span class=\"token inserted\">+- ヤコビの恒等式</span>\n<span class=\"token inserted\">+がなりたつ</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+リー**環**って名前だけど加法に関してリー群をなすわけではないっぽい?</span>\n<span class=\"token inserted\">+- これ環？</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+既約可容系が図形に対応するの何でなん</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+**感想**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+後半2/3ほぼほぼわからんかった.</span>\n</code></pre></div>"}],"publishedAt":"2019-06-07","updatedAt":"2021-01-30"},{"slug":"2019-05-20-abc126","title":"ABC126","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","TODO"],"content":"<p>AtCoder Beginners Contest 126の参加記録.\n今回から6問100分になった.</p>\n<h2 id=\"d-even-relation\"><a href=\"#d-even-relation\"><a href=\"https://atcoder.jp/contests/abc126/tasks/abc126_d\" rel=\"nofollow\">D-Even Relation</a></a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>頂点の木があり、頂点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">u_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>と<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>間の長さが<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>のとき、距離が偶数である頂点を全て同色で塗り分ける.</p>\n<p>偶数の場合を<code>0</code>(白), 奇数の場合を<code>1</code>(黒)とする.\n与えられるグラフは木なので閉路が存在しない。したがって一点を<code>0</code>と決めてしまって、そこからの距離の偶奇が等しければ<code>0</code>, 異なれば<code>1</code>のように塗り分ければいい.\nグラフの探索部分はDFSでできる.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> edge <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        edge<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> color <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cost <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> q <span class=\"token operator\">=</span> <span class=\"token class-name\">VecDeque</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    color<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> color<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            cost<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> cost<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> color<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"e-1-or-2\"><a href=\"#e-1-or-2\"><a href=\"https://atcoder.jp/contests/abc126/tasks/abc126_e\" rel=\"nofollow\">E-1 or 2</a></a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>X</mi></msub><mo>+</mo><msub><mi>B</mi><mi>Y</mi></msub><mo>+</mo><msub><mi>Z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_X + B_Y + Z_i % 2 == 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>を満たす組が<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>組与えられる.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>X</mi></msub><mo separator=\"true\">,</mo><msub><mi>B</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_X, B_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>にはそれぞれ<code>1</code>または<code>2</code>が書かれている.\nこのとき数字が不確定なカードは何枚か.</p>\n<p>場合分けをしてみる.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Z_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>が偶数の場合、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>X</mi></msub><mo>+</mo><msub><mi>B</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_X + B_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>は偶数となるので<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>と<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>の偶奇は等しい.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Z_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>が奇数の場合、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>X</mi></msub><mo>+</mo><msub><mi>B</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_X + B_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>は奇数となるので<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>と<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>の偶奇は異なる.</p>\n<p>つまり<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Z_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>の偶奇に依らず<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>がわかれば<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>の数字がわかる.\nよって各組をグルーピングしてあげて、最終的なグループ数を求めればよい.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> uf <span class=\"token operator\">=</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>m <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        uf<span class=\"token punctuation\">.</span><span class=\"token function\">unite</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> hs <span class=\"token operator\">=</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span> hs<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>uf<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> hs<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"f-xor-matching\"><a href=\"#f-xor-matching\"><a href=\"https://atcoder.jp/contests/abc126/tasks/abc126_f\" rel=\"nofollow\">F-XOR Matching</a></a></h2>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>以上<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>M</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span></span></span></span>未満の整数をちょうど２つずつ含む</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i = a_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>を満たす<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>&#x3C;</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i, j (i &#x3C; j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span>について, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> xor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span> xor ... xor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">a_j = K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>\nを満たす長さ<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>M</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{M+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>の数列<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>を構築する.</li>\n</ul>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"></code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>Dで<code>push_front()</code>とするところを<code>push_back()</code>としてしまい(DFSのつもりがBFS), それに気づけなかった。</p>\n<p>Eは最初矛盾があるケースを考えてしまい結局誤読のまま.<br>\nFはこれから考える.<br>\n最近この時間帯に眠くなってしまうので次回は仮眠してから参加する。</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-05-20-abc126.md b/_posts/2019-05-20-abc126.md\nnew file mode 100644\nindex 0000000..5be04f4\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-05-20-abc126.md</span>\n<span class=\"token coord\">@@ -0,0 +1,106 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: ABC126</span>\n<span class=\"token inserted\">+date: 2019-05-20</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+  - TODO</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+AtCoder Beginners Contest 126の参加記録.</span>\n<span class=\"token inserted\">+今回から6問100分になった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [D-Even Relation](https://atcoder.jp/contests/abc126/tasks/abc126_d)</span>\n<span class=\"token inserted\">+$N$頂点の木があり、頂点$u_i$と$v_i$間の長さが$w_i$のとき、距離が偶数である頂点を全て同色で塗り分ける.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+偶数の場合を`0`(白), 奇数の場合を`1`(黒)とする.</span>\n<span class=\"token inserted\">+与えられるグラフは木なので閉路が存在しない。したがって一点を`0`と決めてしまって、そこからの距離の偶奇が等しければ`0`, 異なれば`1`のように塗り分ければいい.</span>\n<span class=\"token inserted\">+グラフの探索部分はDFSでできる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut edge = vec![Vec::new(); n];</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for _ in 0..n - 1 {</span>\n<span class=\"token inserted\">+        let (u, v, w) = {</span>\n<span class=\"token inserted\">+            let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+            (i[0] - 1, i[1] - 1, i[2])</span>\n<span class=\"token inserted\">+        };</span>\n<span class=\"token inserted\">+        edge[u].push((v, w));</span>\n<span class=\"token inserted\">+        edge[v].push((u, w));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut color = vec![2; n];</span>\n<span class=\"token inserted\">+    let mut cost = vec![0; n];</span>\n<span class=\"token inserted\">+    let mut q = VecDeque::new();</span>\n<span class=\"token inserted\">+    q.push_back(0);</span>\n<span class=\"token inserted\">+    color[0] = 0;</span>\n<span class=\"token inserted\">+    while let Some(u) = q.pop_front() {</span>\n<span class=\"token inserted\">+        for &#x26;(v, w) in edge[u].iter() {</span>\n<span class=\"token inserted\">+            if color[v] != 2 { continue; }</span>\n<span class=\"token inserted\">+            cost[v] = cost[u] + w;</span>\n<span class=\"token inserted\">+            if (cost[v] - cost[u]) % 2 == 0 { color[v] = color[u]; }</span>\n<span class=\"token inserted\">+            else { color[v] = 1 - color[u]; }</span>\n<span class=\"token inserted\">+            q.push_front(v);</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for i in 0..n { println!(\"{}\", color[i]); }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [E-1 or 2](https://atcoder.jp/contests/abc126/tasks/abc126_e)</span>\n<span class=\"token inserted\">+$A_X + B_Y + Z_i % 2 == 0$を満たす組が$M$組与えられる.</span>\n<span class=\"token inserted\">+$A_X, B_Y$にはそれぞれ`1`または`2`が書かれている.</span>\n<span class=\"token inserted\">+このとき数字が不確定なカードは何枚か.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+場合分けをしてみる.</span>\n<span class=\"token inserted\">+$Z_i$が偶数の場合、$A_X + B_Y$は偶数となるので$A_X$と$B_Y$の偶奇は等しい.</span>\n<span class=\"token inserted\">+$Z_i$が奇数の場合、$A_X + B_Y$は奇数となるので$A_X$と$B_Y$の偶奇は異なる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+つまり$Z_i$の偶奇に依らず$A_X$がわかれば$B_Y$の数字がわかる.</span>\n<span class=\"token inserted\">+よって各組をグルーピングしてあげて、最終的なグループ数を求めればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut uf = UnionFind::new(n);</span>\n<span class=\"token inserted\">+    for _ in 0..m {</span>\n<span class=\"token inserted\">+        let (x, y, _) = {</span>\n<span class=\"token inserted\">+            let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+            (i[0] - 1, i[1] - 1, i[2])</span>\n<span class=\"token inserted\">+        };</span>\n<span class=\"token inserted\">+        uf.unite(x, y)</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut hs = HashSet::new();</span>\n<span class=\"token inserted\">+    for i in 0..n { hs.insert(uf.find(i)); }</span>\n<span class=\"token inserted\">+    println!(\"{}\", hs.len());</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [F-XOR Matching](https://atcoder.jp/contests/abc126/tasks/abc126_f)</span>\n<span class=\"token inserted\">+- $a$は$0$以上$2^M$未満の整数をちょうど２つずつ含む</span>\n<span class=\"token inserted\">+- $a_i = a_j$を満たす$i, j (i &#x26;lt; j)$について, $a_i$ xor $a_{i+1}$ xor ... xor $a_j = K$</span>\n<span class=\"token inserted\">+を満たす長さ$2^{M+1}$の数列$a$を構築する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+Dで`push_front()`とするところを`push_back()`としてしまい(DFSのつもりがBFS), それに気づけなかった。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Eは最初矛盾があるケースを考えてしまい結局誤読のまま.  </span>\n<span class=\"token inserted\">+Fはこれから考える.  </span>\n<span class=\"token inserted\">+最近この時間帯に眠くなってしまうので次回は仮眠してから参加する。</span>\n</code></pre></div>"}],"publishedAt":"2019-05-20","updatedAt":"2021-01-30"},{"slug":"2019-03-15-candy-distribution","title":"ABC105-D: Candy Distribution","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["累積和"],"content":"<h2 id=\"概要\"><a href=\"#概要\">概要</a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>要素の配列<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>≤</mo><msup><mn>10</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">N \\leq 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>)に\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><msub><mi>A</mi><mi>i</mi></msub><mi mathvariant=\"normal\">%</mi><mi>m</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum^{r}_{i = l} A_i \\% m = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>を満たす<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(l, r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span>ペアはいくつあるか.</p>\n<hr>\n<p>連続区間なので, 累積和を用いて区間<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(l, r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span>の和の余りを表せないか考える.<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>k</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></msubsup><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_k = \\sum^{k}_{i=0} A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2887em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> とすると, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mi mathvariant=\"normal\">%</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">S_i \\% m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span></span></span></span>で表せる.\n区間<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(l, r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span>の場合には, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">%</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\left(S(r) - S(l)\\right) \\% m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span></span></span></span>となる.<br>\nただ, 上式だと余りを求める際に<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(r), S(l)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span></span></span></span>両端が必要になるので, ２重ループになってしまい, まだ計算量を削る必要がある.<br>\nこれは <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>m</mi><mo>=</mo><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>S</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(r) - S(l) \\% m == 0 \\iff S(r) \\equiv S(l) \\ (mod \\: m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">==</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6684em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>と変形できるので, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">S(i) \\% m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span></span></span></span>を累積和として持てば<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>で計算できる.</p>\n<h2 id=\"解答\"><a href=\"#解答\">解答</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> an <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rem <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cs <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> an<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>rem<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        cs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>rem<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> rem<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>num<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">ncr</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">+</span> rem<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"まとめ\"><a href=\"#まとめ\">まとめ</a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><msub><mi>A</mi><mi>i</mi></msub><mi mathvariant=\"normal\">%</mi><mi>m</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>m</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>S</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum^{r}_{i = l} A_i \\% m = 0 \\iff (S(r) - S(l) \\% m = 0 \\iff S(r) \\equiv S(l) \\ (mod \\: m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6684em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6684em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>","description":"余りの累積和","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-03-15-candy-distribution.md b/_posts/2019-03-15-candy-distribution.md\nnew file mode 100644\nindex 0000000..aa1bd53\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-03-15-candy-distribution.md</span>\n<span class=\"token coord\">@@ -0,0 +1,54 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'ABC105-D: Candy Distribution'</span>\n<span class=\"token inserted\">+date: 2019-03-15</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- 累積和</span>\n<span class=\"token inserted\">+description: 余りの累積和</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 概要</span>\n<span class=\"token inserted\">+$N$要素の配列$A_N$($N \\leq 10^5$)に</span>\n<span class=\"token inserted\">+$\\sum^{r}_{i = l} A_i \\% m = 0$を満たす$(l, r)$ペアはいくつあるか.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+連続区間なので, 累積和を用いて区間$(l, r)$の和の余りを表せないか考える.  </span>\n<span class=\"token inserted\">+$S_k = \\sum^{k}_{i=0} A_i$ とすると, $S_i \\% m$で表せる.</span>\n<span class=\"token inserted\">+区間$(l, r)$の場合には, $\\left(S(r) - S(l)\\right) \\% m$となる.  </span>\n<span class=\"token inserted\">+ただ, 上式だと余りを求める際に$S(r), S(l)$両端が必要になるので, ２重ループになってしまい, まだ計算量を削る必要がある.  </span>\n<span class=\"token inserted\">+これは $S(r) - S(l) \\% m == 0 \\iff S(r) \\equiv S(l) \\ (mod \\: m)$と変形できるので, $S(i) \\% m$を累積和として持てば$O(N)$で計算できる.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let an = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut rem = HashMap::new();</span>\n<span class=\"token inserted\">+    let mut cs = vec![0; n];</span>\n<span class=\"token inserted\">+    cs[0] = an[0] % m;</span>\n<span class=\"token inserted\">+    *rem.entry(cs[0]).or_insert(0) += 1;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for i in 1..n {</span>\n<span class=\"token inserted\">+        cs[i] = (cs[i - 1] + an[i]) % m;</span>\n<span class=\"token inserted\">+        *rem.entry(cs[i]).or_insert(0) += 1;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let ans = rem.iter()</span>\n<span class=\"token inserted\">+        .map(|(_, &#x26;num)| if num &#x26;gt;= 2 { ncr(num, 2) } else { 0 })</span>\n<span class=\"token inserted\">+        .sum::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans + rem.get(&#x26;0).unwrap_or(&#x26;0));</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## まとめ</span>\n<span class=\"token inserted\">+$\\sum^{r}_{i = l} A_i \\% m = 0 \\iff (S(r) - S(l) \\% m = 0 \\iff S(r) \\equiv S(l) \\ (mod \\: m)$</span>\n</code></pre></div>"}],"publishedAt":"2019-03-15","updatedAt":"2021-01-30"},{"slug":"2019-03-08-unionfind","title":"UnionFind","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["Graph","TODO"],"content":"<p><a href=\"https://atcoder.jp/contests/abc120\" rel=\"nofollow\">AtCoder Beginners Contest 120</a> で連結成分のsizeを計算するdisjoint-setの問題が出題された.\nそれまでrankを用いたUnion-Findしか経験がなかったので, この機会にまとめる.</p>\n<h2 id=\"union-find\"><a href=\"#union-find\">Union-Find</a></h2>\n<p>Union-Findは要素が同一の集合に含まれるかどうかを判定するデータ構造.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Query</th><th>Process</th></tr></thead><tbody><tr><td>unite(x, y)</td><td>X(x <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span> X)とY(y <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span> Y)をマージする</td></tr><tr><td>same(x, y)</td><td>X == Y か判定する</td></tr></tbody></table>\n<p>の操作を</p>\n<p>各要素を1つのノード, 集合を木と表現する.\n要素が同一の集合に含まれる場合, それらの要素は同一の木のノードである.</p>\n<p>上記操作をならし計算量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\alpha(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>で行う<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>ためのマージ戦略が以下の経路圧縮とrankである.</p>\n<h3 id=\"経路圧縮\"><a href=\"#経路圧縮\">経路圧縮</a></h3>\n<p>要素が同一の木のノードであるか判定する場合, 各要素のrootが同一かどうか見ればよい.\nただその場合木の高さだけ再帰的に親ノードを辿る必要がある.<br>\nそこで, 親ノードを調べる際に調べたノードをrootに直接つなぎ直すことで,次回以降の判定時の計算量を<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>に削減する.</p>\n<h3 id=\"rank\"><a href=\"#rank\">Rank</a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">unite()</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">ni</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span></span></span></span>操作時に木の高さが高い方を親として, 低い方を高い方に繋げるようにする.</p>\n<p>ここで, 経路圧縮と併用する場合には圧縮前の高さでrankを持つ必要がある.\n経路圧縮は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">find()</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span></span></span></span>操作時に行うため, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">unite()</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">ni</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span></span></span></span>の段階では必ずしも木の高さが<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>となっている保証はない.</p>\n<details>\n<summary>以下は経路圧縮のみの実装例.</summary>\n<div>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">UnionFind</span> <span class=\"token punctuation\">{</span>\n  par<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">{</span>\n      par<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">unite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> px <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> py <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> px <span class=\"token operator\">==</span> py <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>par<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">same</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>par<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x <span class=\"token punctuation\">{</span> x <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 経路圧縮</span>\n      <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>par<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>par<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>par<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</div>\n</details>\n<h2 id=\"decayed-bridges\"><a href=\"#decayed-bridges\"><a href=\"https://atcoder.jp/contests/abc120/tasks/abc120_d\" rel=\"nofollow\">Decayed Bridges</a></a></h2>\n<p>本題.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>頂点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>辺の無向単純グラフの辺<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">i \\in M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>を順番に取り除いたとき, 時刻<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>でアクセスできない頂点が何組あるか.</p>\n<h3 id=\"かんがえたこと\"><a href=\"#かんがえたこと\">かんがえたこと</a></h3>\n<p>Union-Findでは要素を統合することはできても分割操作は行えない.\n辺を除去する操作を考える場合にはグラフ全体を保持する必要が出てきてしまう. でも<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><msup><mn>10</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n, m \\leq 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>で隣接グラフを持つのはエグいし連結判定が厳しい.</p>\n<p>では操作を巻き戻すとどうなるかを考えた.</p>\n<p>まず辺をすべて取り除いた状態から開始し，辺を追加していく.<br>\nこのアプローチならUnion-Findで管理できる.</p>\n<p>辺を追加することで<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>頂点と<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>頂点が新たに連結されたとすると, アクセスできる頂点ペアは<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a * b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>個増える.\nこの連結された頂点の増加判定は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">same</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">am</span><span class=\"mord mathnormal\">e</span></span></span></span>操作を<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">unite</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">ni</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span></span></span></span>操作の前後に行うことで行える.</p>\n<p>が, Union-Findで集合の要素数を持つケースを初めて見たのでやや手間取った. 本番では構造体に要素数<code>siz</code>を<code>Vec</code>で保持させて<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">unite</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">ni</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span></span></span></span>時に更新してなんとかなった.</p>\n<div class=\"remark-container info\"><div class=\"remark-container__title\">追記</div><p>この辺が存在した場合の連結する頂点数を考えると, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n * (n - 1) / 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span></span></span></span>なのでここから引いてくと楽.</p></div>\n<details>\n<summary>解答</summary>\n<div>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ab <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>m <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        ab<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> uf <span class=\"token operator\">=</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cost <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> ab<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ans<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> uf<span class=\"token punctuation\">.</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> pa <span class=\"token operator\">=</span> uf<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> pb <span class=\"token operator\">=</span> uf<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> uf<span class=\"token punctuation\">.</span>siz<span class=\"token punctuation\">[</span>pa<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> uf<span class=\"token punctuation\">.</span>siz<span class=\"token punctuation\">[</span>pb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        uf<span class=\"token punctuation\">.</span><span class=\"token function\">unite</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cost <span class=\"token operator\">-=</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> ans<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</div>\n</details>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>unite by rankとunite by sizeは本質的には同じなので落ち着いて対処したかった.</p>\n<p>またrankに符号付き整数を用いて, 正負でsize or rankを表すテクもあることを知った.</p>\n<div class=\"remark-container info\"><div class=\"remark-container__title\">TODO</div><p>basic (<a href=\"https://atcoder.jp/contests/abc075/tasks/abc075_c\" rel=\"nofollow\">Bridge/ABC075</a>)<br>\nweighted(Potential) Union-Find (<a href=\"https://atcoder.jp/contests/abc087/tasks/arc090_b\" rel=\"nofollow\">People on a line/ABC087</a>)<br>\n永続UF (<a href=\"https://agc002.contest.atcoder.jp/tasks/agc002_d\" rel=\"nofollow\">Stamp Rally/AGC002</a>)<br>\nわからん (<a href=\"https://agc015.contest.atcoder.jp/tasks/agc015_c\" rel=\"nofollow\">Nuske vs Phantom Thnook/AGC015</a>)</p></div>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>α</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\alpha^{-1}(n) = Ackerman(n, n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">man</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>. 経路圧縮とrankどちらかのみの場合はならし計算量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>. <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","description":"rankしかもってなかった","commits":[{"title":"update remark-custom-container to 1.2.0","date":"2022-11-27 00:25:35","hash":"897b048f","diff":"<div class=\"remark-highlight\"><pre data-file=\"897b048f.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 897b048fe31450b5d4f6545855125b76492f9066</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Nov 27 00:25:35 2022 +0900\n\n  update remark-custom-container to 1.2.0\n  \n  fix\n\ndiff --git a/_posts/2019-03-08-unionfind.md b/_posts/2019-03-08-unionfind.md\nindex dc993c9..a040a25 100644\n<span class=\"token deleted\">--- a/_posts/2019-03-08-unionfind.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-03-08-unionfind.md</span>\n@@ -102,8 +102,10 @@ Union-Findでは要素を統合することはできても分割操作は行え\n\nが, Union-Findで集合の要素数を持つケースを初めて見たのでやや手間取った. 本番では構造体に要素数`siz`を`Vec`で保持させて$unite$時に更新してなんとかなった.\n\n<span class=\"token deleted\">-::: tip 追記</span>\n<span class=\"token inserted\">+::: info 追記</span>\n<span class=\"token inserted\">+</span>\nこの辺が存在した場合の連結する頂点数を考えると, $n * (n - 1) / 2$なのでここから引いてくと楽.\n<span class=\"token inserted\">+</span>\n:::\n\n&#x26;lt;details&#x26;gt;\n@@ -153,11 +155,13 @@ unite by rankとunite by sizeは本質的には同じなので落ち着いて対\n\nまたrankに符号付き整数を用いて, 正負でsize or rankを表すテクもあることを知った.\n\n<span class=\"token deleted\">-::: tip TODO</span>\n<span class=\"token inserted\">+::: info TODO</span>\n<span class=\"token inserted\">+</span>\nbasic ([Bridge/ABC075](<a href=\"https://atcoder.jp/contests/abc075/tasks/abc075_c))\" class=\"token url-link\" rel=\"nofollow\">https://atcoder.jp/contests/abc075/tasks/abc075_c))</a>  \nweighted(Potential) Union-Find ([People on a line/ABC087](<a href=\"https://atcoder.jp/contests/abc087/tasks/arc090_b))\" class=\"token url-link\" rel=\"nofollow\">https://atcoder.jp/contests/abc087/tasks/arc090_b))</a>  \n永続UF ([Stamp Rally/AGC002](<a href=\"https://agc002.contest.atcoder.jp/tasks/agc002_d))\" class=\"token url-link\" rel=\"nofollow\">https://agc002.contest.atcoder.jp/tasks/agc002_d))</a>  \nわからん ([Nuske vs Phantom Thnook/AGC015](<a href=\"https://agc015.contest.atcoder.jp/tasks/agc015_c))\" class=\"token url-link\" rel=\"nofollow\">https://agc015.contest.atcoder.jp/tasks/agc015_c))</a>\n<span class=\"token inserted\">+</span>\n:::\n\n[^1]: $\\alpha^{-1}(n) = Ackerman(n, n)$. 経路圧縮とrankどちらかのみの場合はならし計算量$O(log n)$.\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-03-08-unionfind.md b/_posts/2019-03-08-unionfind.md\nnew file mode 100644\nindex 0000000..dc993c9\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-03-08-unionfind.md</span>\n<span class=\"token coord\">@@ -0,0 +1,163 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: UnionFind</span>\n<span class=\"token inserted\">+date: 2019-03-08</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Graph</span>\n<span class=\"token inserted\">+- TODO</span>\n<span class=\"token inserted\">+description: rankしかもってなかった</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[AtCoder Beginners Contest 120](https://atcoder.jp/contests/abc120) で連結成分のsizeを計算するdisjoint-setの問題が出題された.</span>\n<span class=\"token inserted\">+それまでrankを用いたUnion-Findしか経験がなかったので, この機会にまとめる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Union-Find</span>\n<span class=\"token inserted\">+Union-Findは要素が同一の集合に含まれるかどうかを判定するデータ構造.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+| Query      | Process       |</span>\n<span class=\"token inserted\">+|------------|---------------|</span>\n<span class=\"token inserted\">+| unite(x, y)|X(x $\\in$ X)とY(y $\\in$ Y)をマージする |</span>\n<span class=\"token inserted\">+| same(x, y) |X == Y か判定する   |</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+の操作を</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+各要素を1つのノード, 集合を木と表現する.</span>\n<span class=\"token inserted\">+要素が同一の集合に含まれる場合, それらの要素は同一の木のノードである.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+上記操作をならし計算量$O(\\alpha(n))$で行う[^1]ためのマージ戦略が以下の経路圧縮とrankである.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 経路圧縮</span>\n<span class=\"token inserted\">+要素が同一の木のノードであるか判定する場合, 各要素のrootが同一かどうか見ればよい.</span>\n<span class=\"token inserted\">+ただその場合木の高さだけ再帰的に親ノードを辿る必要がある.  </span>\n<span class=\"token inserted\">+そこで, 親ノードを調べる際に調べたノードをrootに直接つなぎ直すことで,次回以降の判定時の計算量を$O(1)$に削減する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Rank</span>\n<span class=\"token inserted\">+$unite()$操作時に木の高さが高い方を親として, 低い方を高い方に繋げるようにする.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ここで, 経路圧縮と併用する場合には圧縮前の高さでrankを持つ必要がある.</span>\n<span class=\"token inserted\">+経路圧縮は$find()$操作時に行うため, $unite()$の段階では必ずしも木の高さが$1$となっている保証はない.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;details&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;summary&#x26;gt;以下は経路圧縮のみの実装例.&#x26;lt;/summary&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+struct UnionFind {</span>\n<span class=\"token inserted\">+  par: Vec&#x26;lt;usize&#x26;gt;,</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+impl UnionFind {</span>\n<span class=\"token inserted\">+  fn new(n: usize) -&#x26;gt; Self {</span>\n<span class=\"token inserted\">+    UnionFind {</span>\n<span class=\"token inserted\">+      par: (0..n).collect(),</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  fn unite(&#x26;mut self, x: usize, y: usize) {</span>\n<span class=\"token inserted\">+    let px = self.find(x);</span>\n<span class=\"token inserted\">+    let py = self.find(y);</span>\n<span class=\"token inserted\">+    if px == py { return; }</span>\n<span class=\"token inserted\">+    self.par[py] = px;</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  fn same(&#x26;mut self, x: usize, y: usize) -&#x26;gt; bool {</span>\n<span class=\"token inserted\">+    self.find(x) == self.find(y)</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  fn find(&#x26;mut self, x: usize) -&#x26;gt; usize {</span>\n<span class=\"token inserted\">+    if self.par[x] == x { x }</span>\n<span class=\"token inserted\">+    else {</span>\n<span class=\"token inserted\">+      // 経路圧縮</span>\n<span class=\"token inserted\">+      let p = self.par[x];</span>\n<span class=\"token inserted\">+      self.par[x] = self.find(p);</span>\n<span class=\"token inserted\">+      self.par[x]</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/details&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [Decayed Bridges](https://atcoder.jp/contests/abc120/tasks/abc120_d)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+本題.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$n$頂点$m$辺の無向単純グラフの辺$i \\in M$を順番に取り除いたとき, 時刻$i$でアクセスできない頂点が何組あるか.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### かんがえたこと</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Union-Findでは要素を統合することはできても分割操作は行えない.</span>\n<span class=\"token inserted\">+辺を除去する操作を考える場合にはグラフ全体を保持する必要が出てきてしまう. でも$n, m \\leq 10^5$で隣接グラフを持つのはエグいし連結判定が厳しい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+では操作を巻き戻すとどうなるかを考えた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+まず辺をすべて取り除いた状態から開始し，辺を追加していく.  </span>\n<span class=\"token inserted\">+このアプローチならUnion-Findで管理できる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+辺を追加することで$a$頂点と$b$頂点が新たに連結されたとすると, アクセスできる頂点ペアは$a * b$個増える.</span>\n<span class=\"token inserted\">+この連結された頂点の増加判定は$same$操作を$unite$操作の前後に行うことで行える.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+が, Union-Findで集合の要素数を持つケースを初めて見たのでやや手間取った. 本番では構造体に要素数`siz`を`Vec`で保持させて$unite$時に更新してなんとかなった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+::: tip 追記</span>\n<span class=\"token inserted\">+この辺が存在した場合の連結する頂点数を考えると, $n * (n - 1) / 2$なのでここから引いてくと楽.</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;details&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;summary&#x26;gt;解答&#x26;lt;/summary&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ab = Vec::new();</span>\n<span class=\"token inserted\">+    for _ in 0..m {</span>\n<span class=\"token inserted\">+        let (a, b) = {</span>\n<span class=\"token inserted\">+            let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+            (i[0], i[1])</span>\n<span class=\"token inserted\">+        };</span>\n<span class=\"token inserted\">+        ab.push((a, b));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut uf = UnionFind::new(n + 1);</span>\n<span class=\"token inserted\">+    let mut cost = n * (n - 1) / 2;</span>\n<span class=\"token inserted\">+    let mut ans = Vec::new();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for (a, b) in ab.into_iter().rev() {</span>\n<span class=\"token inserted\">+        ans.push(cost);</span>\n<span class=\"token inserted\">+        if uf.same(a, b) { continue; }</span>\n<span class=\"token inserted\">+        let pa = uf.find(a);</span>\n<span class=\"token inserted\">+        let pb = uf.find(b);</span>\n<span class=\"token inserted\">+        let c = uf.siz[pa] * uf.siz[pb];</span>\n<span class=\"token inserted\">+        uf.unite(a, b);</span>\n<span class=\"token inserted\">+        cost -= c;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for a in ans.iter().rev() {</span>\n<span class=\"token inserted\">+        println!(\"{}\", a);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/details&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+unite by rankとunite by sizeは本質的には同じなので落ち着いて対処したかった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+またrankに符号付き整数を用いて, 正負でsize or rankを表すテクもあることを知った.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+::: tip TODO</span>\n<span class=\"token inserted\">+basic ([Bridge/ABC075](https://atcoder.jp/contests/abc075/tasks/abc075_c))  </span>\n<span class=\"token inserted\">+weighted(Potential) Union-Find ([People on a line/ABC087](https://atcoder.jp/contests/abc087/tasks/arc090_b))  </span>\n<span class=\"token inserted\">+永続UF ([Stamp Rally/AGC002](https://agc002.contest.atcoder.jp/tasks/agc002_d))  </span>\n<span class=\"token inserted\">+わからん ([Nuske vs Phantom Thnook/AGC015](https://agc015.contest.atcoder.jp/tasks/agc015_c))</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^1]: $\\alpha^{-1}(n) = Ackerman(n, n)$. 経路圧縮とrankどちらかのみの場合はならし計算量$O(log n)$.</span>\n</code></pre></div>"}],"publishedAt":"2019-03-08","updatedAt":"2022-11-27"},{"slug":"2019-02-20-setup_ubuntu_mysql","title":"Install MySQL on EC2","categories":["memo"],"image":"https://koka831.github.io/img/icon.png","tags":["AWS","installation","MySQL"],"content":"<h2 id=\"install-ubuntu-mysql-on-ec2\"><a href=\"#install-ubuntu-mysql-on-ec2\">install ubuntu mysql on ec2</a></h2>\n<p>install <code>mysql-server</code> and setup mysql privillege table via <code>mysql_secure_installation</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nginx mysql-server\n<span class=\"token function\">sudo</span> mysql_secure_installation\n\n</code></pre></div>\n<h2 id=\"step2-create-a-new-user\"><a href=\"#step2-create-a-new-user\">step.2 create a new user</a></h2>\n<p>create a database and a user for the database with minimum permission.</p>\n<div class=\"remark-container tip\"><p>Note: set charset to <code>UTF8mb4</code> to store emoji</p></div>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\">sudo mysql <span class=\"token operator\">-</span>u root <span class=\"token operator\">-</span>p\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token string\">'database'</span> <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> UTF8mb4 <span class=\"token keyword\">collate</span> utf8mb4_bin<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">database</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'localhost'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"step3-install-php\"><a href=\"#step3-install-php\">step.3 install php</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n</code></pre></div>\n<h2 id=\"step4-download-wordpress\"><a href=\"#step4-download-wordpress\">step.4 download wordpress</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">cd /tmp\ncurl -O https://wordpress.org/latest.tar.gz\nmv wp-config-sample.php wp-config.php\n\n## open the link below to generate salt\nchrome https://api.wordpress.org/secret-key/1.1/salt/</code></pre></div>\n<h2 id=\"step5-setup-nginx\"><a href=\"#step5-setup-nginx\">step.5 setup nginx</a></h2>\n<ul>\n<li>default.conf</li>\n<li>php-fpm unix domain socket</li>\n</ul>\n<h2 id=\"ref\"><a href=\"#ref\">ref</a></h2>\n<p><a href=\"https://stackoverflow.com/questions/25774975/unable-to-start-php-fpm-cannot-get-uid-for-user-apache\" rel=\"nofollow\">https://stackoverflow.com/questions/25774975/unable-to-start-php-fpm-cannot-get-uid-for-user-apache</a></p>","description":"procedure memo","commits":[{"title":"update remark-custom-container to 1.2.0","date":"2022-11-27 00:25:35","hash":"897b048f","diff":"<div class=\"remark-highlight\"><pre data-file=\"897b048f.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 897b048fe31450b5d4f6545855125b76492f9066</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Nov 27 00:25:35 2022 +0900\n\n  update remark-custom-container to 1.2.0\n  \n  fix\n\ndiff --git a/_posts/2019-02-20-setup_ubuntu_mysql.md b/_posts/2019-02-20-setup_ubuntu_mysql.md\nindex 77b7437..01e440f 100644\n<span class=\"token deleted\">--- a/_posts/2019-02-20-setup_ubuntu_mysql.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-02-20-setup_ubuntu_mysql.md</span>\n@@ -24,7 +24,9 @@ sudo mysql_secure_installation\ncreate a database and a user for the database with minimum permission.\n\n::: tip\n<span class=\"token inserted\">+</span>\nNote: set charset to `UTF8mb4` to store emoji\n<span class=\"token inserted\">+</span>\n:::\n\n\\```sql\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-02-20-setup_ubuntu_mysql.md b/_posts/2019-02-20-setup_ubuntu_mysql.md\nnew file mode 100644\nindex 0000000..77b7437\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-02-20-setup_ubuntu_mysql.md</span>\n<span class=\"token coord\">@@ -0,0 +1,63 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Install MySQL on EC2'</span>\n<span class=\"token inserted\">+date: 2019-02-20</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+  - memo</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AWS</span>\n<span class=\"token inserted\">+  - installation</span>\n<span class=\"token inserted\">+  - MySQL</span>\n<span class=\"token inserted\">+description: procedure memo</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## install ubuntu mysql on ec2</span>\n<span class=\"token inserted\">+install `mysql-server` and setup mysql privillege table via `mysql_secure_installation`.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+sudo apt install nginx mysql-server</span>\n<span class=\"token inserted\">+sudo mysql_secure_installation</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## step.2 create a new user</span>\n<span class=\"token inserted\">+create a database and a user for the database with minimum permission.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+::: tip</span>\n<span class=\"token inserted\">+Note: set charset to `UTF8mb4` to store emoji</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sql</span>\n<span class=\"token inserted\">+sudo mysql -u root -p</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+CREATE DATABASE 'database' character set UTF8mb4 collate utf8mb4_bin;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+GRANT ALL PRIVILEGES ON database.* TO 'username'@'localhost' WITH GRANT OPTION;</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## step.3 install php</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## step.4 download wordpress</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+cd /tmp</span>\n<span class=\"token inserted\">+curl -O https://wordpress.org/latest.tar.gz</span>\n<span class=\"token inserted\">+mv wp-config-sample.php wp-config.php</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## open the link below to generate salt</span>\n<span class=\"token inserted\">+chrome https://api.wordpress.org/secret-key/1.1/salt/</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## step.5 setup nginx</span>\n<span class=\"token inserted\">+- default.conf</span>\n<span class=\"token inserted\">+- php-fpm unix domain socket</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## ref</span>\n<span class=\"token inserted\">+https://stackoverflow.com/questions/25774975/unable-to-start-php-fpm-cannot-get-uid-for-user-apache</span>\n</code></pre></div>"}],"publishedAt":"2019-02-20","updatedAt":"2022-11-27"},{"slug":"2019-02-09-minpro2019","title":"みんなのプロコン 2019","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","TODO"],"content":"<p>みんなのプロコン 2019の参加記録.</p>\n<h2 id=\"b---path\"><a href=\"#b---path\"><a href=\"https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_b\" rel=\"nofollow\">B - Path</a></a></h2>\n<p>4つの街と3つの道が与えられる. 一筆書で全ての街を訪れることができるか.</p>\n<p>制約</p>\n<blockquote>\n<p>同じ街の対の間を結ぶ道は複数存在しない\nどの2つの街の間も、道を何本か通ることで行き来することができる</p>\n</blockquote>\n<p>より, 全ての街を訪れることは可能であることがわかる.\nこのとき道と街の組み合わせしてありうるのは以下の2パターン.</p>\n<div class=\"graph-wrapper\">\n<div>\n<div class=\"graph graph1\">\n  <div class=\"edge\">\n  <div class=\"node none\">\n  <div class=\"edge\">\n</div>\n<div class=\"graph\">\n  <div class=\"edge\">\n  <div class=\"node\">\n  <div class=\"edge cross vertical\">\n</div>\n<div class=\"label\">A</div>\n</div>\n<div>\n<div class=\"graph graph2\">\n  <div class=\"edge\">\n  <div class=\"node\">\n  <div class=\"edge\">\n</div>\n<div class=\"graph\">\n  <div class=\"edge\">\n  <div class=\"node\">\n  <div class=\"edge vertical\">\n</div>\n<div class=\"label\">B</div>\n</div>\n</div>\n<p>一筆書き出来るのはB.<br>\nAは1つの街から3本以上の道が存在する場合なので, 街から生えている道の本数で判定すればいい.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">3</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> ab <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> ab <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">match</span> i <span class=\"token punctuation\">{</span>\n                <span class=\"token number\">1</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">2</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">3</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">4</span> <span class=\"token operator\">=></span> d <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                _ <span class=\"token operator\">=></span> <span class=\"token macro property\">unreachable!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> d <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c---when-i-hit-my-pocket\"><a href=\"#c---when-i-hit-my-pocket\"><a href=\"https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_c\" rel=\"nofollow\">C - When I hit my pocket...</a></a></h2>\n<p>手持ちのビスケット1枚, 0円の状態から</p>\n<ul>\n<li>持っているビスケットを増やす</li>\n<li>ビスケット1枚をA円に交換</li>\n<li>1円をビスケットB枚の交換</li>\n</ul>\n<p>以上の操作を好きな順に<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>回行ってビスケットの枚数を最大化する. なお虚無からビスケットを生成できるらしい.</p>\n<p>ビスケット → 円 → ビスケットの両替には2ターン消費するので, 2枚以上の利益がなければ愚直にビスケットを増やすのと変わらない.</p>\n<p>なので <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>−</mo><mi>A</mi><mo>&#x3C;</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">B-A &#x3C;= 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>の場合にはビスケットを増やす操作だけ行うのが最善.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>−</mo><mi>A</mi><mo>></mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">B-A>2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>の場合には, ビスケット→ 円→ ビスケット の操作でビスケットを<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(B - A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>枚増産できる. 最終的に円を持っていても意味がないので, この一連の操作は操作は同じ回数行いたい.</p>\n<p>簡単のために, ビスケットを0枚もっている状態から<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>回の操作を行えるとする.<br>\nアプローチとしては,</p>\n<ol>\n<li>A枚たまるまでビスケットを増やす</li>\n<li>残り<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">k + 1 - A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>回の操作で両替を繰り返す</li>\n</ol>\n<p>手順2は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor(k+1-a)/2\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span><span class=\"mclose\">⌋</span></span></span></span>回行うことができる. 偶奇によっては操作回数が一回あまるが,\nここでビスケット→ 円の両替をしても仕方がないのでビスケットを1枚増やす.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">>=</span> b <span class=\"token operator\">||</span> b <span class=\"token operator\">-</span> a <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> ans<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>考察を詰めきらずにふわふわした状態でB,Cをときがち.\n論文が一段落したので, しばらくはこれを書いてから実装するくらいの気持ちで精進してみる.</p></div></div></div></div></div></div></div></div></div></div></div></div>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-02-09-minpro2019.md b/_posts/2019-02-09-minpro2019.md\nnew file mode 100644\nindex 0000000..eb1daad\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-02-09-minpro2019.md</span>\n<span class=\"token coord\">@@ -0,0 +1,148 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: みんなのプロコン 2019</span>\n<span class=\"token inserted\">+date: 2019-02-09</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- AtCoder</span>\n<span class=\"token inserted\">+- TODO</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+みんなのプロコン 2019の参加記録.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B - Path](https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+4つの街と3つの道が与えられる. 一筆書で全ての街を訪れることができるか.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+制約</span>\n<span class=\"token inserted\">+&#x26;gt; 同じ街の対の間を結ぶ道は複数存在しない</span>\n<span class=\"token inserted\">+&#x26;gt; どの2つの街の間も、道を何本か通ることで行き来することができる</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+より, 全ての街を訪れることは可能であることがわかる.</span>\n<span class=\"token inserted\">+このとき道と街の組み合わせしてありうるのは以下の2パターン.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph-wrapper\"&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph graph1\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node none\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\" /&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge cross vertical\" /&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"label\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph graph2\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\" /&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge vertical\" /&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"label\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+一筆書き出来るのはB.  </span>\n<span class=\"token inserted\">+Aは1つの街から3本以上の道が存在する場合なので, 街から生えている道の本数で判定すればいい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+use std::io;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let mut a = 0;</span>\n<span class=\"token inserted\">+    let mut b = 0;</span>\n<span class=\"token inserted\">+    let mut c = 0;</span>\n<span class=\"token inserted\">+    let mut d = 0;</span>\n<span class=\"token inserted\">+    for _ in 0..3 {</span>\n<span class=\"token inserted\">+        let ab = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        for i in ab {</span>\n<span class=\"token inserted\">+            match i {</span>\n<span class=\"token inserted\">+                1 =&#x26;gt; a += 1,</span>\n<span class=\"token inserted\">+                2 =&#x26;gt; b += 1,</span>\n<span class=\"token inserted\">+                3 =&#x26;gt; c += 1,</span>\n<span class=\"token inserted\">+                4 =&#x26;gt; d += 1,</span>\n<span class=\"token inserted\">+                _ =&#x26;gt; unreachable!(),</span>\n<span class=\"token inserted\">+            }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+    if a &#x26;gt; 2 || b &#x26;gt; 2 || c &#x26;gt; 2 || d &#x26;gt; 2 {</span>\n<span class=\"token inserted\">+        println!(\"NO\");</span>\n<span class=\"token inserted\">+    } else {</span>\n<span class=\"token inserted\">+        println!(\"YES\");</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C - When I hit my pocket...](https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_c)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+手持ちのビスケット1枚, 0円の状態から</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 持っているビスケットを増やす</span>\n<span class=\"token inserted\">+- ビスケット1枚をA円に交換</span>\n<span class=\"token inserted\">+- 1円をビスケットB枚の交換</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+以上の操作を好きな順に$k$回行ってビスケットの枚数を最大化する. なお虚無からビスケットを生成できるらしい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ビスケット → 円 → ビスケットの両替には2ターン消費するので, 2枚以上の利益がなければ愚直にビスケットを増やすのと変わらない.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なので $B-A &#x26;lt;= 2$の場合にはビスケットを増やす操作だけ行うのが最善.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$B-A&#x26;gt;2$の場合には, ビスケット→ 円→ ビスケット の操作でビスケットを$(B - A)$枚増産できる. 最終的に円を持っていても意味がないので, この一連の操作は操作は同じ回数行いたい.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+簡単のために, ビスケットを0枚もっている状態から$k + 1$回の操作を行えるとする.  </span>\n<span class=\"token inserted\">+アプローチとしては,</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1. A枚たまるまでビスケットを増やす</span>\n<span class=\"token inserted\">+2. 残り$k + 1 - A$回の操作で両替を繰り返す</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+手順2は$\\lfloor(k+1-a)/2\\rfloor$回行うことができる. 偶奇によっては操作回数が一回あまるが,</span>\n<span class=\"token inserted\">+ここでビスケット→ 円の両替をしても仕方がないのでビスケットを1枚増やす.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+use std::io;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (k, a, b) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;u64&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1], i[2])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if a &#x26;gt;= b || b - a &#x26;lt;= 1{</span>\n<span class=\"token inserted\">+        println!(\"{}\", k + 1);</span>\n<span class=\"token inserted\">+        return;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let ans: u64 = if (k + 1 - a) % 2 == 0 {</span>\n<span class=\"token inserted\">+        (b - a) * (k + 1 - a) / 2 + a</span>\n<span class=\"token inserted\">+    } else {</span>\n<span class=\"token inserted\">+        (b - a) * (k - a) / 2 + a + 1</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+考察を詰めきらずにふわふわした状態でB,Cをときがち. </span>\n<span class=\"token inserted\">+論文が一段落したので, しばらくはこれを書いてから実装するくらいの気持ちで精進してみる.</span>\n<span class=\"token inserted\">+</span>\n</code></pre></div>"}],"publishedAt":"2019-02-09","updatedAt":"2021-01-30"},{"slug":"2019-02-03-renewal","title":"Renewal","categories":["diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Vue"],"content":"<p>jekyllをやめてVuePressに移行した.</p>\n<div class=\"remark-container tip\"><div class=\"remark-container__title\">INFO</div><p>Draft state</p></div>\n<hr>\n<h2 id=\"before\"><a href=\"#before\">Before</a></h2>\n<img src=\"./img/v1.png\" width=\"200px\">\n<h2 id=\"after\"><a href=\"#after\">After</a></h2>\n<p>これ</p>\n<h2 id=\"why\"><a href=\"#why\">Why</a></h2>\n<ul>\n<li>\n<p>jekyllに飽きた.</p>\n</li>\n<li>\n<p>jekyllに飽きただけだとVuePressを使う理由にはならない</p>\n<ul>\n<li>はてぶやnoteは? → そこまで真面目に使わない, 好きなことを書きたい</li>\n<li>Twitterでは? →　twitterではエンジニア/DIYの属性だけ出してる. このブログでは多種書きたい.</li>\n<li>👆くらい自由に下書きすら載せたい.\nEngineer属性を見てくれているfollowerに対して自分の全ての属性を押し付けるのはちょっと違う.</li>\n</ul>\n</li>\n<li>\n<p>等身大の自分の技術力をアウトプットしたい(ほんまか)</p>\n</li>\n<li>\n<p>デザインをすこししてみたくなった</p>\n</li>\n</ul>","description":"jekyllからVuePressに移行した","commits":[{"title":"update remark-custom-container to 1.2.0","date":"2022-11-27 00:25:35","hash":"897b048f","diff":"<div class=\"remark-highlight\"><pre data-file=\"897b048f.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 897b048fe31450b5d4f6545855125b76492f9066</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Nov 27 00:25:35 2022 +0900\n\n  update remark-custom-container to 1.2.0\n  \n  fix\n\ndiff --git a/_posts/2019-02-03-renewal.md b/_posts/2019-02-03-renewal.md\nindex 61af1cc..07a72f1 100644\n<span class=\"token deleted\">--- a/_posts/2019-02-03-renewal.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-02-03-renewal.md</span>\n@@ -11,7 +11,9 @@ description: jekyllからVuePressに移行した\njekyllをやめてVuePressに移行した.\n\n::: tip INFO\n<span class=\"token inserted\">+</span>\nDraft state\n<span class=\"token inserted\">+</span>\n:::\n\n<span class=\"token deleted\">---</span>\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-02-03-renewal.md b/_posts/2019-02-03-renewal.md\nnew file mode 100644\nindex 0000000..61af1cc\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-02-03-renewal.md</span>\n<span class=\"token coord\">@@ -0,0 +1,35 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: Renewal</span>\n<span class=\"token inserted\">+date: 2019-02-04</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Vue</span>\n<span class=\"token inserted\">+description: jekyllからVuePressに移行した</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+jekyllをやめてVuePressに移行した.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+::: tip INFO</span>\n<span class=\"token inserted\">+Draft state</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Before</span>\n<span class=\"token inserted\">+&#x26;lt;img src=\"./img/v1.png\" width=\"200px\"&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## After</span>\n<span class=\"token inserted\">+これ</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Why</span>\n<span class=\"token inserted\">+- jekyllに飽きた.</span>\n<span class=\"token inserted\">+- jekyllに飽きただけだとVuePressを使う理由にはならない</span>\n<span class=\"token inserted\">+  - はてぶやnoteは? → そこまで真面目に使わない, 好きなことを書きたい</span>\n<span class=\"token inserted\">+  - Twitterでは? →　twitterではエンジニア/DIYの属性だけ出してる. このブログでは多種書きたい. </span>\n<span class=\"token inserted\">+  - 👆くらい自由に下書きすら載せたい.</span>\n<span class=\"token inserted\">+  Engineer属性を見てくれているfollowerに対して自分の全ての属性を押し付けるのはちょっと違う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 等身大の自分の技術力をアウトプットしたい(ほんまか)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- デザインをすこししてみたくなった</span>\n</code></pre></div>"}],"publishedAt":"2019-02-04","updatedAt":"2022-11-27"},{"slug":"2019-02-03-abc117","title":"ABC117","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","TODO"],"content":"<p>AtCoder Beginners Contest 117の参加記録。</p>\n<h2 id=\"a-entrance-examination\"><a href=\"#a-entrance-examination\"><a href=\"https://atcoder.jp/contests/abc117/tasks/abc117_a\" rel=\"nofollow\">A-Entrance Examination</a></a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>⋅</mo><mi>T</mi><mo>:</mo><mi>T</mi><mo>=</mo><mi>T</mi><mo>:</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">X \\cdot T : T = T : x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>\nを満たす<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>を求める.式変形して<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mi>T</mi><mi>X</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">x = \\frac{T}{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2173em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8723em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">f64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">/</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"b-polygon\"><a href=\"#b-polygon\"><a href=\"https://atcoder.jp/contests/abc117/tasks/abc117_b\" rel=\"nofollow\">B-Polygon</a></a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold-italic\">L</mi><mo>=</mo><msub><mi>L</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>L</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>L</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\bm{L} = L_1, L_2, \\dots , L_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">L</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> の<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>角形は存在するか.</p>\n<blockquote>\n<p>定理 : 一番長い辺が他の<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N−1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>辺の長さの合計よりも真に短い場合に限り、条件を満たす<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>角形が描ける。</p>\n</blockquote>\n<p>から, 最も長い辺とその他の辺の和を比較する.<br>\nその他の辺の和は, (全ての辺の和) - (最長辺)とすれば楽.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ln <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> ln<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> ln<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> max <span class=\"token operator\">&#x3C;</span> <span class=\"token operator\">&#x26;</span>sum <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c---streamline\"><a href=\"#c---streamline\"><a href=\"https://atcoder.jp/contests/abc117/tasks/abc117_c\" rel=\"nofollow\">C - Streamline</a></a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>個の駒と数直線上に<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>個の座標が与えられる.\n最初に<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>個の駒を好きな座標に置いてから,</p>\n<ul>\n<li>ある駒を1つ選び, その駒の座標を<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">1</span></span></span></span>または<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>する</li>\n</ul>\n<p>操作を行い, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>個全ての座標を訪れる為の操作の最小回数を求める.</p>\n<hr>\n<p>初期配置にはコストがかからない.</p>\n<p><code>-90 -10 0 1 4</code>に対して2つ駒を置くとする. このとき移動コストは以下のようになる.</p>\n<div class=\"graph\">\n  <div class=\"edge\">-90</div>\n  <div class=\"node\">80</div>\n  <div class=\"edge\">-10</div>\n  <div class=\"node\">10</div>\n  <div class=\"edge\">0</div>\n  <div class=\"node\">1</div>\n  <div class=\"edge\">1</div>\n  <div class=\"node\">3</div>\n  <div class=\"edge\">4</div>\n</div>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>から<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>に移動する為の操作回数は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">abs(x_i - x_j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> だから, 移動コストが大きい座標<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i, x_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>に配置すればその2点間の移動コストが節約できる.</p>\n<div class=\"graph\">\n  <div class=\"edge piece\">-90</div>\n  <div class=\"node cut\">80</div>\n  <div class=\"edge piece\">-10</div>\n  <div class=\"node\">10</div>\n  <div class=\"edge\">0</div>\n  <div class=\"node\">1</div>\n  <div class=\"edge\">1</div>\n  <div class=\"node\">3</div>\n  <div class=\"edge\">4</div>\n</div>\n<p>3つ目以降の駒や, 駒を座標の途中に置いた場合でも, 右端からその座標までの移動と, その座標から左端までをそれぞれの駒で行なえばよい.<br>\nしたがって(駒数 - 1)個分だけ座標間の移動コストを取り除けばよい.</p>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> xm <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">isize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xm<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cost <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        cost<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> xm<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cost<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span> cost<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"d---xxor\"><a href=\"#d---xxor\"><a href=\"https://atcoder.jp/contests/abc117/tasks/abc117_d\" rel=\"nofollow\">D - XXOR</a></a></h2>\n<div class=\"remark-container warning\"><div class=\"remark-container__title\">TODO</div><p>桁DPについて復習</p></div>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold-italic\">A</mi><mo>=</mo><msub><mi>A</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>A</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\bm{A} = A_1, A_2, \\dots , A_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">A</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> と<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">K \\geq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>が与えられる.<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mi>i</mi><mi>N</mi></msubsup><mo stretchy=\"false\">(</mo><mi>X</mi><mi>x</mi><mi>o</mi><mi>r</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mtext>  </mtext><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>x</mi><mo>≤</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = \\sum^{N}_{i}(X xor A_i) \\; where \\; x \\leq K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2809em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9812em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">ere</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span><br>\nの最大値を求める.</p>\n<hr>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">3 7\n1 6 3</code></pre></div>\n<p>上の入力例<code>1 6 3</code>を2進数で表してみる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">0 1 1 0 # 6\n0 0 1 1 # 3\n0 0 0 1 # 1</code></pre></div>\n<p>各々とのXORが最大になるようにするには, 各桁で<code>0/1</code>の少ない方を立てればいい.</p>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>Dの方針が立ってから無限にバグらせてた.\nC迄のスピード感は良かったのでもったいなかった.</p>\n<p><a href=\"http://drken1215.hatenablog.com/entry/2019/02/03/224200\" rel=\"nofollow\">http://drken1215.hatenablog.com/entry/2019/02/03/224200</a> にある</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>≤</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">X \\leq K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> であるとは、上位ビットから見たときに<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>と<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>のビットが初めて一致しなかった桁が <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>であったとしたとき</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>より上位の桁については、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>と一致</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>桁目については<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>で,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>である</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>より下位の桁については<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>はなんでもいい</li>\n</ul>\n</blockquote>\n<p>がわかりやすかった. 各桁のビット比較で大小比較が行えればデータをbit列のまま取り扱うことができ, bit - usize間の変換がいらず実装が楽になる.</p>","description":"考察","commits":[{"title":"update remark-custom-container to 1.2.0","date":"2022-11-27 00:25:35","hash":"897b048f","diff":"<div class=\"remark-highlight\"><pre data-file=\"897b048f.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 897b048fe31450b5d4f6545855125b76492f9066</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Nov 27 00:25:35 2022 +0900\n\n  update remark-custom-container to 1.2.0\n  \n  fix\n\ndiff --git a/_posts/2019-02-03-abc117.md b/_posts/2019-02-03-abc117.md\nindex 0fd5477..72d750d 100644\n<span class=\"token deleted\">--- a/_posts/2019-02-03-abc117.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-02-03-abc117.md</span>\n@@ -115,7 +115,9 @@ fn main() {\n\n<span class=\"token comment\">## <a href=\"https://atcoder.jp/contests/abc117/tasks/abc117_d\" class=\"token md-link\" rel=\"nofollow\">D - XXOR</a></span>\n::: warning TODO\n<span class=\"token deleted\">-  桁DPについて復習</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+桁DPについて復習</span>\n<span class=\"token inserted\">+</span>\n:::\n\n$\\bm{A} = A_1, A_2, \\dots , A_N$ と$K \\geq 0$が与えられる.\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-02-03-abc117.md b/_posts/2019-02-03-abc117.md\nnew file mode 100644\nindex 0000000..0fd5477\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-02-03-abc117.md</span>\n<span class=\"token coord\">@@ -0,0 +1,155 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: ABC117</span>\n<span class=\"token inserted\">+date: 2019-02-03</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+  - TODO</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+AtCoder Beginners Contest 117の参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [A-Entrance Examination](https://atcoder.jp/contests/abc117/tasks/abc117_a)</span>\n<span class=\"token inserted\">+$X \\cdot T : T = T : x$</span>\n<span class=\"token inserted\">+を満たす$x$を求める.式変形して  </span>\n<span class=\"token inserted\">+$x = \\frac{T}{X}$</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (t, x) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;f64&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+    println!(\"{}\", t / x);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B-Polygon](https://atcoder.jp/contests/abc117/tasks/abc117_b)</span>\n<span class=\"token inserted\">+$\\bm{L} = L_1, L_2, \\dots , L_N$ の$N$角形は存在するか.  </span>\n<span class=\"token inserted\">+&#x26;gt; 定理 : 一番長い辺が他の$N−1$辺の長さの合計よりも真に短い場合に限り、条件を満たす$N$角形が描ける。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+から, 最も長い辺とその他の辺の和を比較する.  </span>\n<span class=\"token inserted\">+その他の辺の和は, (全ての辺の和) - (最長辺)とすれば楽.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let _ = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let ln = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let max = ln.iter().max().unwrap();</span>\n<span class=\"token inserted\">+    let sum = ln.iter().sum::&#x26;lt;usize&#x26;gt;() - max;</span>\n<span class=\"token inserted\">+    if max &#x26;lt; &#x26;sum {</span>\n<span class=\"token inserted\">+        println!(\"Yes\");</span>\n<span class=\"token inserted\">+    } else {</span>\n<span class=\"token inserted\">+        println!(\"No\");</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C - Streamline](https://atcoder.jp/contests/abc117/tasks/abc117_c)</span>\n<span class=\"token inserted\">+$N$個の駒と数直線上に$M$個の座標が与えられる.</span>\n<span class=\"token inserted\">+最初に$N$個の駒を好きな座標に置いてから,</span>\n<span class=\"token inserted\">+- ある駒を1つ選び, その駒の座標を$+1$または$-1$する  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+操作を行い, $M$個全ての座標を訪れる為の操作の最小回数を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+初期配置にはコストがかからない.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`-90 -10 0 1 4`に対して2つ駒を置くとする. このとき移動コストは以下のようになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;-90&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\"&#x26;gt;80&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;-10&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\"&#x26;gt;10&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\"&#x26;gt;1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\"&#x26;gt;3&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;4&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$x_i$から$x_j$に移動する為の操作回数は$abs(x_i - x_j)$ だから, 移動コストが大きい座標$x_i, x_j$に配置すればその2点間の移動コストが節約できる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge piece\"&#x26;gt;-90&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node cut\"&#x26;gt;80&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge piece\"&#x26;gt;-10&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\"&#x26;gt;10&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\"&#x26;gt;1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"node\"&#x26;gt;3&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;4&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+3つ目以降の駒や, 駒を座標の途中に置いた場合でも, 右端からその座標までの移動と, その座標から左端までをそれぞれの駒で行なえばよい.  </span>\n<span class=\"token inserted\">+したがって(駒数 - 1)個分だけ座標間の移動コストを取り除けばよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+    let mut xm = read::&#x26;lt;isize&#x26;gt;();</span>\n<span class=\"token inserted\">+    xm.sort();</span>\n<span class=\"token inserted\">+    let mut cost = Vec::new();</span>\n<span class=\"token inserted\">+    for i in 0..m - 1 {</span>\n<span class=\"token inserted\">+        cost.push((xm[i] - xm[i + 1]).abs() as usize);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    cost.sort();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for _ in 0..n - 1 { cost.pop(); }</span>\n<span class=\"token inserted\">+    println!(\"{}\", cost.into_iter().sum::&#x26;lt;usize&#x26;gt;());</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [D - XXOR](https://atcoder.jp/contests/abc117/tasks/abc117_d)</span>\n<span class=\"token inserted\">+::: warning TODO</span>\n<span class=\"token inserted\">+  桁DPについて復習</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$\\bm{A} = A_1, A_2, \\dots , A_N$ と$K \\geq 0$が与えられる.  </span>\n<span class=\"token inserted\">+$f(x) = \\sum^{N}_{i}(X xor A_i) \\; where \\; x \\leq K$  </span>\n<span class=\"token inserted\">+の最大値を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+3 7</span>\n<span class=\"token inserted\">+1 6 3</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+上の入力例`1 6 3`を2進数で表してみる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+0 1 1 0 # 6</span>\n<span class=\"token inserted\">+0 0 1 1 # 3</span>\n<span class=\"token inserted\">+0 0 0 1 # 1</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+各々とのXORが最大になるようにするには, 各桁で`0/1`の少ない方を立てればいい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Dの方針が立ってから無限にバグらせてた.</span>\n<span class=\"token inserted\">+C迄のスピード感は良かったのでもったいなかった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[http://drken1215.hatenablog.com/entry/2019/02/03/224200](http://drken1215.hatenablog.com/entry/2019/02/03/224200) にある</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;gt; $X \\leq K$ であるとは、上位ビットから見たときに$X$と$K$のビットが初めて一致しなかった桁が $d$であったとしたとき</span>\n<span class=\"token inserted\">+&#x26;gt; - $d$より上位の桁については、$X$は$K$と一致</span>\n<span class=\"token inserted\">+&#x26;gt; - $d$桁目については$X$は$0$で,$K$は$1$である</span>\n<span class=\"token inserted\">+&#x26;gt; - $d$より下位の桁については$X$はなんでもいい</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+がわかりやすかった. 各桁のビット比較で大小比較が行えればデータをbit列のまま取り扱うことができ, bit - usize間の変換がいらず実装が楽になる.</span>\n<span class=\"token inserted\">+</span>\n</code></pre></div>"}],"publishedAt":"2019-02-03","updatedAt":"2022-11-27"},{"slug":"2019-01-17-hello2nand","title":"Hello2NAND","categories":["diary"],"image":"https://koka831.github.io/img/icon.png","tags":["発表資料","Python"],"content":"<p>先日 <a href=\"https://connpass.com/event/115301/\" rel=\"nofollow\">Hello, World から トランジスタまで</a>という勉強会を開催した. <a href=\"https://koka831.github.io/slide/hello2nand/\" rel=\"nofollow\">これ</a>が発表資料というか勉強会でつかった資料.</p>\n<iframe src=\"https://koka831.github.io/slide/hello2nand/\" width=\"100%\" height=\"300px\">\n会場を提供してくださったNefrock</iframe>さんありがとうございます.<p></p>\n<hr>\n<p>勉強会を開催した目的は主に自分が発表練習をしたい,という個人的なものだけど,\n今までいくつか勉強会に参加した経験から, 自分がやるならどういう勉強会にしたいかというのを考えていて, 今回はそれを試す場でもあった.</p>\n<ul>\n<li>聴講者側の受け身感を減らしたい</li>\n<li>発表者側のメリットを高めたい</li>\n</ul>\n<p>つまるところ参加者全体がフラットに利益を享受できる場にしたかった.</p>\n<p>聴講者の受け身感, これは勉強会に参加して分かった気になって帰ることなく, その場で疑問をできる限り解消してほしい.</p>\n<p>そして発表者には, 発表という行為自体の利益に加えて, 技術的なフィードバックを多く受け取って欲しい.</p>\n<p>発表者は元々発表するという行為自体が当人のメリットになっているものの, その利益は主にプレゼンスキルであったり登壇経験であったりで, 技術的な利益は発表資料をつくる時に曖昧な部分を自分で調べて解消している, という程度である.<br>\nこの時点で各々の知識量において, 発表者 > 聴講者 の構図ができてしまっている.</p>\n<p>知識というのは聴講者<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span>発表者ではなく, 聴講者<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∩</mo></mrow><annotation encoding=\"application/x-tex\">\\cap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∩</span></span></span></span>発表者 な部分があるだけで, 聴講者がしっているけど発表者が知らない内容はザラにある.\nその上で勉強会では聴講者が知らなくて発表者が知っている内容が発表される.</p>\n<p>そうではなく双方向の知識の交換があるべきだと思う.</p>\n<p>大学の輪講は自分の理想形に近かった.\n発表者側は発表後, 発表中に<del>マサカリ</del>フィードバックが貰える. 聴講者側は気軽に質問を投げられる. この質問自体もお互いの共通認識の共有になる. andでしかなかった共通認識がorにまで広がる.</p>\n<hr>\n<p>勉強会で輪講を再現するにはなにが必要か. 今回は質問しやすい空気感が必要だと仮定して開催してみた.\n質問者が発表を遮ることをためらわない規模感はどれくらいなのか. また発表者が質問したい人を見つけられるのはどれくらいの人数が限度なのか.\nまずは控えめに発表者3人, 聴講者3人としてみた.<br>\n当日の参加者は発表者2人, 聴講者2人だったが結果的にこれは正解だった.\n会場を提供してくれた会社の方々も参加してくれたのだが, 全員がつよつよだったのである種教授陣に囲まれながらの輪講ができあがった.</p>\n<p>発表内容自体はここでは触れないが, 聴講者は2人とも発表内容のレイヤーを専門としていない.\nけれど沢山の質問をしてもらえた. 終わった後にも楽しんでもらえた旨をDMで頂いたので, やってよかったと思う. ぼくは結構鋭いマサカリを食らってしんだ.</p>\n<hr>\n<p>おわりに</p>\n<p>会場を提供してくださっただけでなく楽しんで参加してくれたNefrockの皆さん, 参加してくれた両名, そして企画をめっちゃやってくれたatsuki, どうもありがとう.</p>","description":"勉強会やってみた","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-01-17-hello2nand.md b/_posts/2019-01-17-hello2nand.md\nnew file mode 100644\nindex 0000000..30dd1ce\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-01-17-hello2nand.md</span>\n<span class=\"token coord\">@@ -0,0 +1,60 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: Hello2NAND</span>\n<span class=\"token inserted\">+date: 2019-01-17</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- 発表資料</span>\n<span class=\"token inserted\">+- Python</span>\n<span class=\"token inserted\">+description: 勉強会やってみた</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+先日 [Hello, World から トランジスタまで](https://connpass.com/event/115301/)という勉強会を開催した. [これ](https://koka831.github.io/slide/hello2nand/)が発表資料というか勉強会でつかった資料.</span>\n<span class=\"token inserted\">+&#x26;lt;iframe src=\"https://koka831.github.io/slide/hello2nand/\" width=\"100%\" height=\"300px\" /&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+会場を提供してくださった[Nefrock](https://www.nefrock.com/)さんありがとうございます.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+勉強会を開催した目的は主に自分が発表練習をしたい,という個人的なものだけど, </span>\n<span class=\"token inserted\">+今までいくつか勉強会に参加した経験から, 自分がやるならどういう勉強会にしたいかというのを考えていて, 今回はそれを試す場でもあった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 聴講者側の受け身感を減らしたい</span>\n<span class=\"token inserted\">+- 発表者側のメリットを高めたい</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+つまるところ参加者全体がフラットに利益を享受できる場にしたかった.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+聴講者の受け身感, これは勉強会に参加して分かった気になって帰ることなく, その場で疑問をできる限り解消してほしい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+そして発表者には, 発表という行為自体の利益に加えて, 技術的なフィードバックを多く受け取って欲しい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+発表者は元々発表するという行為自体が当人のメリットになっているものの, その利益は主にプレゼンスキルであったり登壇経験であったりで, 技術的な利益は発表資料をつくる時に曖昧な部分を自分で調べて解消している, という程度である.  </span>\n<span class=\"token inserted\">+この時点で各々の知識量において, 発表者 &#x26;gt; 聴講者 の構図ができてしまっている.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+知識というのは聴講者$\\in$発表者ではなく, 聴講者$\\cap$発表者 な部分があるだけで, 聴講者がしっているけど発表者が知らない内容はザラにある.</span>\n<span class=\"token inserted\">+その上で勉強会では聴講者が知らなくて発表者が知っている内容が発表される.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+そうではなく双方向の知識の交換があるべきだと思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+大学の輪講は自分の理想形に近かった.</span>\n<span class=\"token inserted\">+発表者側は発表後, 発表中に~~マサカリ~~フィードバックが貰える. 聴講者側は気軽に質問を投げられる. この質問自体もお互いの共通認識の共有になる. andでしかなかった共通認識がorにまで広がる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+勉強会で輪講を再現するにはなにが必要か. 今回は質問しやすい空気感が必要だと仮定して開催してみた.</span>\n<span class=\"token inserted\">+質問者が発表を遮ることをためらわない規模感はどれくらいなのか. また発表者が質問したい人を見つけられるのはどれくらいの人数が限度なのか.</span>\n<span class=\"token inserted\">+まずは控えめに発表者3人, 聴講者3人としてみた.  </span>\n<span class=\"token inserted\">+当日の参加者は発表者2人, 聴講者2人だったが結果的にこれは正解だった.</span>\n<span class=\"token inserted\">+会場を提供してくれた会社の方々も参加してくれたのだが, 全員がつよつよだったのである種教授陣に囲まれながらの輪講ができあがった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+発表内容自体はここでは触れないが, 聴講者は2人とも発表内容のレイヤーを専門としていない.</span>\n<span class=\"token inserted\">+けれど沢山の質問をしてもらえた. 終わった後にも楽しんでもらえた旨をDMで頂いたので, やってよかったと思う. ぼくは結構鋭いマサカリを食らってしんだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+おわりに</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+会場を提供してくださっただけでなく楽しんで参加してくれたNefrockの皆さん, 参加してくれた両名, そして企画をめっちゃやってくれたatsuki, どうもありがとう.</span>\n</code></pre></div>"}],"publishedAt":"2019-01-17","updatedAt":"2021-01-30"},{"slug":"2018-12-22-caddi2018b","title":"CADDi2018","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder"],"content":"<p>CADDi 2018 for Beginners の参加記録。</p>\n<h2 id=\"a---1222\"><a href=\"#a---1222\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_a\" rel=\"nofollow\">A - 12/22</a></a></h2>\n<p>与えられる数字の中に<code>2</code>がいくつあるか.\n数字を一桁毎に走査していくのはしんどいので, 文字の配列として扱うのが吉.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'2'</span> <span class=\"token punctuation\">{</span> cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"b---atcoder-alloy\"><a href=\"#b---atcoder-alloy\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_b\" rel=\"nofollow\">B - AtCoder Alloy</a></a></h2>\n<p>N枚の板のうち<code>H * W</code>の大きさが切り出せるものは何枚あるか.<br>\n今回は<code>H * W</code>を<code>W * H</code>にしてはいけないことに注意したくらい.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>h_i<span class=\"token punctuation\">,</span> w_i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> h_i <span class=\"token operator\">>=</span> h <span class=\"token operator\">&#x26;&#x26;</span> w_i <span class=\"token operator\">>=</span> w <span class=\"token punctuation\">{</span> ans <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c---product-and-gcd\"><a href=\"#c---product-and-gcd\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_a\" rel=\"nofollow\">C - Product and GCD</a></a></h2>\n<p>n個の整数からなる配列があって,その要素数と積が与えられる<code>(N, P)</code>.<br>\n各要素の最大公約数として考えられるもののうち, 最も大きいものを求める.</p>\n<p>配列<code>an</code>が<code>x</code>を公約数にもつ ←→ <code>an</code>の各要素は<code>x</code>を約数に持っている<br>\nなので, <code>an</code>を素因数分解して, <code>n</code>個以上ある素因数の積が答えになる.</p>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> hm <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 素因数分解してhashmapにいれる</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">/=</span> f<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>hm<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">*</span>hm<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> hm<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 因数kが2n個以上あったときにk^xする(2敗)</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">>=</span> <span class=\"token operator\">&#x26;</span>n <span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">*=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">divide</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">2</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">(</span>n <span class=\"token keyword\">as</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u64</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"d---harlequin\"><a href=\"#d---harlequin\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_b\" rel=\"nofollow\">D - Harlequin</a></a></h2>\n<p>格子の交点を横線または点でなぞって、最後の点をなぞった人の勝ち.\nお互いに最善手をとる前提で実験してみる.<br>\nやった実験は</p>\n<ul>\n<li><code>2 * 2</code></li>\n<li>↑を横にのばす</li>\n<li>↑を縦にのばす</li>\n<li>↑を合成したやつ\nの4パターン.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o\no o</code></pre></div>\n<p>のように<code>2*2</code>の格子があった場合, 先手の取り得る点は1か2.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o\nx o</code></pre></div>\n<p>のように一つとった場合, 後手は同列の点を一つとればよい.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">x o\nx o</code></pre></div>\n<p>また, 2つとった場合 後手はそのまま2つ取って勝ち.</p>\n<p>次に<code>2 * k</code>のように引き伸ばした場合.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o o ..... o o\no o o ..... o o</code></pre></div>\n<p>これについても<code>2 * 2</code>の場合と同様で, 先手のとった数だけ後手もとれば負けることはない(最終的に<code>2 * 2</code>に帰着するので).</p>\n<p>では<code>k * 2</code>の場合はどうか.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o\no o\n...\no o</code></pre></div>\n<p>これまでの実験から, <code>2 * k</code>の形に持ち込んだら勝敗がきまることがわかったので, そうしない立ち回りを行なえば良い.\n<code>k</code>が偶数の場合, 後手の勝ち. <code>k</code>が奇数の場合, 先手の勝ち.</p>\n<p>最後に一般形を考える.\n元の問題では<code>1 4 5 2 4</code>のようにランダムに並んでるけどソートしてしまっても問題ない.\nすると<code>n * (偶数)</code>の形をつくるかどうか, になるので,初期配置の各列の偶奇を判断すればよい.</p>\n<h3 id=\"解答-3\"><a href=\"#解答-3\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> an <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        an<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> an<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>a<span class=\"token closure-punctuation punctuation\">|</span></span> a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"所感\"><a href=\"#所感\">所感</a></h3>\n<p>一番よかったとき(!)\n</p><figure><img src=\"./img/caddi2018b.png\" alt=\"\"><figcaption>img.1 </figcaption></figure>\n(結果は31位)<p></p>\n<p>Dの考察をスムーズに行なえたのに, Cでの2WAがもったいない.\nデバッグを如何にやるかが課題っぽい.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-12-22-caddi2018b.md b/_posts/2018-12-22-caddi2018b.md\nnew file mode 100644\nindex 0000000..2225289\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-12-22-caddi2018b.md</span>\n<span class=\"token coord\">@@ -0,0 +1,191 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: CADDi2018</span>\n<span class=\"token inserted\">+date: 2018-12-15</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+CADDi 2018 for Beginners の参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [A - 12/22](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+与えられる数字の中に`2`がいくつあるか.</span>\n<span class=\"token inserted\">+数字を一桁毎に走査していくのはしんどいので, 文字の配列として扱うのが吉.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;String&#x26;gt;().chars().collect::&#x26;lt;Vec&#x26;lt;char&#x26;gt;&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut cnt = 0;</span>\n<span class=\"token inserted\">+    for c in n {</span>\n<span class=\"token inserted\">+        if c == '2' { cnt += 1; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    println!(\"{}\", cnt);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B - AtCoder Alloy](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+N枚の板のうち`H * W`の大きさが切り出せるものは何枚あるか.  </span>\n<span class=\"token inserted\">+今回は`H * W`を`W * H`にしてはいけないことに注意したくらい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, h, w) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1], i[2])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+    let mut ans = 0;</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let (h_i, w_i) = {</span>\n<span class=\"token inserted\">+            let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+            (i[0], i[1])</span>\n<span class=\"token inserted\">+        };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if h_i &#x26;gt;= h &#x26;&#x26; w_i &#x26;gt;= w { ans += 1; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C - Product and GCD](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+n個の整数からなる配列があって,その要素数と積が与えられる`(N, P)`.  </span>\n<span class=\"token inserted\">+各要素の最大公約数として考えられるもののうち, 最も大きいものを求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+配列`an`が`x`を公約数にもつ ←→ `an`の各要素は`x`を約数に持っている  </span>\n<span class=\"token inserted\">+なので, `an`を素因数分解して, `n`個以上ある素因数の積が答えになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, p) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;u64&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut hm = HashMap::new();</span>\n<span class=\"token inserted\">+    let mut x = p;</span>\n<span class=\"token inserted\">+    // 素因数分解してhashmapにいれる</span>\n<span class=\"token inserted\">+    while let Some(f) = divide(x) {</span>\n<span class=\"token inserted\">+        x /= f;</span>\n<span class=\"token inserted\">+        *hm.entry(f).or_insert(0) += 1;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    *hm.entry(x).or_insert(0) += 1;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ans: u64 = 1;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for (k, v) in hm.iter() {</span>\n<span class=\"token inserted\">+        // 因数kが2n個以上あったときにk^xする(2敗)</span>\n<span class=\"token inserted\">+        if v &#x26;gt;= &#x26;n {</span>\n<span class=\"token inserted\">+            ans *= k.pow((v / n) as u32);</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+fn divide(n: u64) -&#x26;gt; Option&#x26;lt;u64&#x26;gt; {</span>\n<span class=\"token inserted\">+    for i in 2..(n as f64).sqrt().ceil() as u64 + 2 {</span>\n<span class=\"token inserted\">+        if n % i == 0 {</span>\n<span class=\"token inserted\">+            return Some(i);</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    } </span>\n<span class=\"token inserted\">+    return None;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [D - Harlequin](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+格子の交点を横線または点でなぞって、最後の点をなぞった人の勝ち.</span>\n<span class=\"token inserted\">+お互いに最善手をとる前提で実験してみる.  </span>\n<span class=\"token inserted\">+やった実験は</span>\n<span class=\"token inserted\">+- `2 * 2`</span>\n<span class=\"token inserted\">+- ↑を横にのばす</span>\n<span class=\"token inserted\">+- ↑を縦にのばす</span>\n<span class=\"token inserted\">+- ↑を合成したやつ</span>\n<span class=\"token inserted\">+の4パターン.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+のように`2*2`の格子があった場合, 先手の取り得る点は1か2.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+x o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+のように一つとった場合, 後手は同列の点を一つとればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+x o</span>\n<span class=\"token inserted\">+x o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また, 2つとった場合 後手はそのまま2つ取って勝ち.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に`2 * k`のように引き伸ばした場合.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o o ..... o o</span>\n<span class=\"token inserted\">+o o o ..... o o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これについても`2 * 2`の場合と同様で, 先手のとった数だけ後手もとれば負けることはない(最終的に`2 * 2`に帰着するので).  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+では`k * 2`の場合はどうか.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+...</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これまでの実験から, `2 * k`の形に持ち込んだら勝敗がきまることがわかったので, そうしない立ち回りを行なえば良い.</span>\n<span class=\"token inserted\">+`k`が偶数の場合, 後手の勝ち. `k`が奇数の場合, 先手の勝ち.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最後に一般形を考える.</span>\n<span class=\"token inserted\">+元の問題では`1 4 5 2 4`のようにランダムに並んでるけどソートしてしまっても問題ない.</span>\n<span class=\"token inserted\">+すると`n * (偶数)`の形をつくるかどうか, になるので,初期配置の各列の偶奇を判断すればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut an = Vec::new();</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        an.push(read_one::&#x26;lt;usize&#x26;gt;());</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if an.iter().all(|a| a % 2 == 0) {</span>\n<span class=\"token inserted\">+        println!(\"second\");</span>\n<span class=\"token inserted\">+    } else {</span>\n<span class=\"token inserted\">+        println!(\"first\");</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 所感</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+一番よかったとき(!)</span>\n<span class=\"token inserted\">+![](./img/caddi2018b.png)</span>\n<span class=\"token inserted\">+(結果は31位)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Dの考察をスムーズに行なえたのに, Cでの2WAがもったいない.</span>\n<span class=\"token inserted\">+デバッグを如何にやるかが課題っぽい.</span>\n</code></pre></div>"}],"publishedAt":"2018-12-15","updatedAt":"2021-01-30"},{"slug":"2018-12-15-agc029","title":"AGC029","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder"],"content":"<p>AtCoder Grand Contest 29の参加記録。</p>\n<h1 id=\"a\"><a href=\"#a\"><a href=\"https://beta.atcoder.jp/contests/agc029/tasks/agc029_a\" rel=\"nofollow\">A</a></a></h1>\n<p><code>xoxooox</code> のようにオセロの並びが与えられるので, 隣合う<code>ox</code> を <code>xo</code> にする操作が最大何回行えるか求める.</p>\n<p><code>oooox</code> の場合, <code>xoooo</code>となるまでに4回操作できる.<br>\n<code>ooooxx</code> の場合, まず右から二つ目の<code>x</code>を↑の様に動かしてから<code>xoooo + x</code>とみるとそれぞれの<code>x</code>に対する操作は独立.<br>\nなので各<code>x</code>の左側にある<code>o</code>の数の和を求めればいい.</p>\n<h2 id=\"解答\"><a href=\"#解答\">解答</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'B'</span> <span class=\"token punctuation\">{</span> cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'W'</span> <span class=\"token punctuation\">{</span> ans <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上の解答はWAになります()<br>\nRustの数値リテラルにおける型推論のデフォルトは<code>i32</code>のため, <code>s.len() &#x3C; O(10^5)</code>の制約ではオーバーフローしうる.</p>\n<p>5分で解答してWA食らって正直全く分からなかった.これに気付くまで25分.<br>\n流石に初歩過ぎるので反省.</p>\n<h1 id=\"b\"><a href=\"#b\"><a href=\"https://beta.atcoder.jp/contests/agc029/tasks/agc029_b\" rel=\"nofollow\">B</a></a></h1>\n<p><code>3 11 14 5 13</code> のように数列が与えられる. この中から和が<code>2^k</code>の形になるようにペアをつくるとき, 最大いくつ作れるか.</p>\n<p>↑の例だと, ペアは<code>(3, 5), (3, 13), (5, 11)</code> の3通り考えられる. 複数回使うことは出来ないので, 2部グラフの最大マッチングか? <code>n &#x3C;= 2 * 10^5</code>からできる候補なら計算量<code>O(NM)</code>でも間に合うのか? などと考えていた(無事TLE).</p>\n<p>まずソートして, 各<code>a_i</code>に対しそれより大きい最小の<code>2^k</code>を求める.<br>\n<code>2^k - a_i</code>が数列の中に存在するかどうかbinary search等で求めてペアの候補とする.</p>\n<p>ペアの候補は, 大きいものから順に選択していけば最大となる.</p>\n<h2 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> an <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    an<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> graph <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> bn <span class=\"token operator\">=</span> an<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> bn<span class=\"token punctuation\">.</span><span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自身がペア対象にならないように一旦</span>\n        bn<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ceil <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> ceil <span class=\"token operator\">&#x3C;=</span> an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            ceil <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">match</span> bn<span class=\"token punctuation\">.</span><span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">(</span>ceil <span class=\"token operator\">-</span> an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> graph<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 自身を戻す</span>\n        bn<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* 最大マッチングWA</span>\n<span class=\"token comment\">    let n = graph.len();</span>\n<span class=\"token comment\">    let mut dinitz = Dinitz::new(n * 2 + 2);</span>\n<span class=\"token comment\">    for (a, b) in graph {</span>\n<span class=\"token comment\">        dinitz.add_edge(a, b, 1);</span>\n<span class=\"token comment\">        dinitz.add_edge(b, a, 1);</span>\n<span class=\"token comment\">    }</span>\n<span class=\"token comment\">    println!(\"{:?}\", dinitz.max_flow(n * 2, n * 2 + 1));</span>\n<span class=\"token comment\">    */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>Aのミスで800位くらい落ちてて草も生えない.<br>\nBは2部マッチングを勉強したあとだったのでそれに引っ張られた.<br>\n精進の量がたりてないので300~500埋めをやろう.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-12-15-agc029.md b/_posts/2018-12-15-agc029.md\nnew file mode 100644\nindex 0000000..1b81973\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-12-15-agc029.md</span>\n<span class=\"token coord\">@@ -0,0 +1,102 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: AGC029</span>\n<span class=\"token inserted\">+date: 2018-12-15</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+AtCoder Grand Contest 29の参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# [A](https://beta.atcoder.jp/contests/agc029/tasks/agc029_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`xoxooox` のようにオセロの並びが与えられるので, 隣合う`ox` を `xo` にする操作が最大何回行えるか求める.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`oooox` の場合, `xoooo`となるまでに4回操作できる.  </span>\n<span class=\"token inserted\">+`ooooxx` の場合, まず右から二つ目の`x`を↑の様に動かしてから`xoooo + x`とみるとそれぞれの`x`に対する操作は独立.  </span>\n<span class=\"token inserted\">+なので各`x`の左側にある`o`の数の和を求めればいい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let mut ans = 0;</span>\n<span class=\"token inserted\">+    let s = read_one::&#x26;lt;String&#x26;gt;().chars().collect::&#x26;lt;Vec&#x26;lt;char&#x26;gt;&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut cnt = 0;</span>\n<span class=\"token inserted\">+    for i in 0..s.len() {</span>\n<span class=\"token inserted\">+        if s[i] == 'B' { cnt += 1; }</span>\n<span class=\"token inserted\">+        if s[i] == 'W' { ans += cnt; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+上の解答はWAになります()  </span>\n<span class=\"token inserted\">+Rustの数値リテラルにおける型推論のデフォルトは`i32`のため, `s.len() &#x26;lt; O(10^5)`の制約ではオーバーフローしうる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+5分で解答してWA食らって正直全く分からなかった.これに気付くまで25分.  </span>\n<span class=\"token inserted\">+流石に初歩過ぎるので反省.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# [B](https://beta.atcoder.jp/contests/agc029/tasks/agc029_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`3 11 14 5 13` のように数列が与えられる. この中から和が`2^k`の形になるようにペアをつくるとき, 最大いくつ作れるか.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+↑の例だと, ペアは`(3, 5), (3, 13), (5, 11)` の3通り考えられる. 複数回使うことは出来ないので, 2部グラフの最大マッチングか? `n &#x26;lt;= 2 * 10^5`からできる候補なら計算量`O(NM)`でも間に合うのか? などと考えていた(無事TLE).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+まずソートして, 各`a_i`に対しそれより大きい最小の`2^k`を求める.  </span>\n<span class=\"token inserted\">+`2^k - a_i`が数列の中に存在するかどうかbinary search等で求めてペアの候補とする.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ペアの候補は, 大きいものから順に選択していけば最大となる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut an = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    an.sort();</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+    let mut graph = Vec::new();</span>\n<span class=\"token inserted\">+    let mut bn = an.clone();</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+    for i in 0..n {</span>\n<span class=\"token inserted\">+        let x = bn.binary_search(&#x26;an[i]).unwrap();</span>\n<span class=\"token inserted\">+        // 自身がペア対象にならないように一旦</span>\n<span class=\"token inserted\">+        bn.remove(x);</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+        let mut ceil = 2;</span>\n<span class=\"token inserted\">+        while ceil &#x26;lt;= an[i] {</span>\n<span class=\"token inserted\">+            ceil *= 2;</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+        match bn.binary_search(&#x26;(ceil - an[i])) {</span>\n<span class=\"token inserted\">+            Ok(n) =&#x26;gt; { graph.push((i, n)); },</span>\n<span class=\"token inserted\">+            _ =&#x26;gt; {}</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+        // 自身を戻す</span>\n<span class=\"token inserted\">+        bn.insert(x, an[i]);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    /* 最大マッチングWA</span>\n<span class=\"token inserted\">+    let n = graph.len();</span>\n<span class=\"token inserted\">+    let mut dinitz = Dinitz::new(n * 2 + 2);</span>\n<span class=\"token inserted\">+    for (a, b) in graph {</span>\n<span class=\"token inserted\">+        dinitz.add_edge(a, b, 1);</span>\n<span class=\"token inserted\">+        dinitz.add_edge(b, a, 1);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    println!(\"{:?}\", dinitz.max_flow(n * 2, n * 2 + 1));</span>\n<span class=\"token inserted\">+    */</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+Aのミスで800位くらい落ちてて草も生えない.  </span>\n<span class=\"token inserted\">+Bは2部マッチングを勉強したあとだったのでそれに引っ張られた.  </span>\n<span class=\"token inserted\">+精進の量がたりてないので300~500埋めをやろう.</span>\n</code></pre></div>"}],"publishedAt":"2018-12-15","updatedAt":"2021-01-30"},{"slug":"2018-11-11-influxdb","title":"InfluxDB","categories":["memo"],"image":"https://koka831.github.io/img/icon.png","tags":["database","時系列データ"],"content":"<h2 id=\"background\"><a href=\"#background\">Background</a></h2>\n<p>センサから取得した時系列データを解析することになった.<br>\n普段の研究ではDynamoDB等のNoSQLを利用しているのだけど, 今回のセンサデータはセンサ数が多い上に欠損率が結構高い.</p>\n<p>なので,</p>\n<ul>\n<li>書き込み速度重視</li>\n<li>データの線形補間ができる・やりやすい</li>\n<li>できればローカルで使える\nことを要件として調査した.<br>\n補間に関してはDB側で巻いてくれると嬉しいけど, パフォーマンスをみてクライアント側でやるのでもまあいい.<br>\nこれはそのときのログと, (結果的にInfluxDBを選択したのだけど)その結果をまとめたもの.</li>\n</ul>\n<h1 id=\"調査\"><a href=\"#調査\">調査</a></h1>\n<p>今回調べたソフトウェアは以下.</p>\n<ul>\n<li>OpenTSDB 2.3.0</li>\n<li>InfluxDB 1.7</li>\n<li>Prometheus 2.5.0</li>\n</ul>\n<p>調査対象はデータベースの中でも時系列データベースと呼ばれるものに絞った.<br>\n一般的なRDBはそのインデクスにBTree(もしくはB+Tree)を用いているが, BTreeの挿入コストはO(n) ~ O(log n)程度かかってしまう. もちろん最適化はされているのだろうからコストは抑えられるだろうが, 挿入に限ってはO(1)で行いたい.  このあたり勉強しないとなあ</p>\n<h2 id=\"opentsdb\"><a href=\"#opentsdb\">OpenTSDB</a></h2>\n<ul>\n<li>open source time series database</li>\n<li>store trillions of data points(!)</li>\n<li>scales using HBase</li>\n</ul>\n<p>分散型の時系列データベース. OpenTSDBでのデータはHBase/Hadoopのクラスタ側で保持する.</p>\n<p>PinterestやYahooで使われているとのこと<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>.\nYahooの例では, 200k TSD / s の書き込みを50サーバで行っており, 10億件を超えるデータを保持している.</p>\n<h4 id=\"tsd形式\"><a href=\"#tsd形式\">TSD形式</a></h4>\n<ul>\n<li>metric: 時系列データの属性の名前. RDBでいうテーブル名.</li>\n<li>timestamp</li>\n<li>value: integer / float</li>\n<li>tag(s): { \"key\": \"value\" }のペア.</li>\n</ul>\n<p>tagについては最低一つつける必要がある(最大8つまでサポートされているが, usually up to 4 or 5 tags とのこと).<br>\n時系列DBではvalueが数値しか取れない代わりに, tagsのkeyを組み合わせて集計を行うみたい.</p>\n<p>APIはHTTP RestとTelnet Style(!)がある.</p>\n<p>補間については, 分散データベースなので物理的な断片化が考慮されており, OpenTSDB側で線形補間・スキップ・ゼロ補間がサポートされている.</p>\n<h2 id=\"prometheus\"><a href=\"#prometheus\">Prometheus</a></h2>\n<ul>\n<li>monitoring system &#x26; time series database</li>\n</ul>\n<p>今回調べるまで存在を知らなかった. 用途を見るとどうもElasticSearch等の用途と似ていて, モニター側に重きを置いているっぽい.</p>\n<p>そのためデータは別口からインポートする必要がある.</p>\n<p>データについては15日間分の保持がデフォルトのようで, Prometheus単体で利用するのは(データ解析のフェーズにおいても)今回の用途では厳しそう.</p>\n<h2 id=\"influxdb\"><a href=\"#influxdb\">InfluxDB</a></h2>\n<h4 id=\"tsd形式-1\"><a href=\"#tsd形式-1\">TSD形式</a></h4>\n<p><a href=\"https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_tutorial/\" rel=\"nofollow\">Line Protocol</a>と呼ばれる行データの書式に従う.<br>\n以下の書式のように, 配列はスペースなしのカンマ区切りで, tagとmeasurementの区切り, measurementとtimestampの区切りにはスペースをいれる.<br>\nmeasurementが値部分となっていて, こちらもtagと同様カンマ区切りで複数のtag付のmeasurementを持てる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">metrix,&#x26;lt;tag_key&#x26;gt;=&#x26;lt;tag_value&#x26;gt;,&#x26;lt;tag_key&#x26;gt;=&#x26;lt;tag_value&#x26;gt; &#x26;lt;measurement&#x26;gt;=&#x26;lt;value&#x26;gt; &#x26;lt;timestamp&#x26;gt;</code></pre></div>\n<p>Measurementにはinteger, floatの他にstring, booleanも扱える.</p>\n<p>補間については, <code>fill()</code>を用いてnull, 指定値, 線形補間, 前データ値が利用できる.<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup></p>\n<p><a href=\"https://www.influxdata.com/blog/influxdb-markedly-outperforms-opentsdb-in-time-series-data-metrics-benchmark/\" rel=\"nofollow\">blog</a> によるとwrite performanceがOpenTSDBの9倍.</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\">まとめ</a></h2>\n<p>結論としては補間が必要なデータストアにはInfluxDB一択だと思う.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">DB</th><th align=\"center\">書き込み</th><th align=\"center\">データ量</th><th align=\"center\">補間</th><th align=\"center\">ローカル</th></tr></thead><tbody><tr><td align=\"center\">OpenTSDB</td><td align=\"center\">○</td><td align=\"center\">◎</td><td align=\"center\">○</td><td align=\"center\">Docker</td></tr><tr><td align=\"center\">InfluxDB</td><td align=\"center\">◎</td><td align=\"center\">○</td><td align=\"center\">○</td><td align=\"center\">Docker</td></tr><tr><td align=\"center\">Prometheus</td><td align=\"center\">-</td><td align=\"center\">x</td><td align=\"center\">-</td><td align=\"center\">Docker</td></tr></tbody></table>\n<h2 id=\"ref\"><a href=\"#ref\">ref</a></h2>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><a href=\"https://www.slideshare.net/HBaseCon/operations-session-3-49043534?qid=5547eada-f70d-4730-bacb-6aeb6f37c068&#x26;v=&#x26;b=&#x26;from_search=5\" rel=\"nofollow\">slideshare</a> <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p><a href=\"https://docs.influxdata.com/influxdb/v1.3/query_language/data_exploration/#advanced-group-by-time-syntax\" rel=\"nofollow\">document</a> <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","description":"色々と必要になったのでまとめ","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-11-11-influxdb.md b/_posts/2018-11-11-influxdb.md\nnew file mode 100644\nindex 0000000..534d52b\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-11-11-influxdb.md</span>\n<span class=\"token coord\">@@ -0,0 +1,97 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: InfluxDB</span>\n<span class=\"token inserted\">+date: 2018-11-11</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- memo</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - database</span>\n<span class=\"token inserted\">+  - 時系列データ</span>\n<span class=\"token inserted\">+description: 色々と必要になったのでまとめ</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Background</span>\n<span class=\"token inserted\">+センサから取得した時系列データを解析することになった.  </span>\n<span class=\"token inserted\">+普段の研究ではDynamoDB等のNoSQLを利用しているのだけど, 今回のセンサデータはセンサ数が多い上に欠損率が結構高い.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なので, </span>\n<span class=\"token inserted\">+- 書き込み速度重視</span>\n<span class=\"token inserted\">+- データの線形補間ができる・やりやすい</span>\n<span class=\"token inserted\">+- できればローカルで使える</span>\n<span class=\"token inserted\">+ことを要件として調査した.   </span>\n<span class=\"token inserted\">+補間に関してはDB側で巻いてくれると嬉しいけど, パフォーマンスをみてクライアント側でやるのでもまあいい.  </span>\n<span class=\"token inserted\">+これはそのときのログと, (結果的にInfluxDBを選択したのだけど)その結果をまとめたもの.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# 調査</span>\n<span class=\"token inserted\">+今回調べたソフトウェアは以下.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- OpenTSDB 2.3.0</span>\n<span class=\"token inserted\">+- InfluxDB 1.7</span>\n<span class=\"token inserted\">+- Prometheus 2.5.0</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+調査対象はデータベースの中でも時系列データベースと呼ばれるものに絞った.  </span>\n<span class=\"token inserted\">+一般的なRDBはそのインデクスにBTree(もしくはB+Tree)を用いているが, BTreeの挿入コストはO(n) ~ O(log n)程度かかってしまう. もちろん最適化はされているのだろうからコストは抑えられるだろうが, 挿入に限ってはO(1)で行いたい.  このあたり勉強しないとなあ</span>\n<span class=\"token inserted\">+## OpenTSDB</span>\n<span class=\"token inserted\">+- open source time series database</span>\n<span class=\"token inserted\">+- store trillions of data points(!)</span>\n<span class=\"token inserted\">+- scales using HBase</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+分散型の時系列データベース. OpenTSDBでのデータはHBase/Hadoopのクラスタ側で保持する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+PinterestやYahooで使われているとのこと[^1].</span>\n<span class=\"token inserted\">+Yahooの例では, 200k TSD / s の書き込みを50サーバで行っており, 10億件を超えるデータを保持している.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### TSD形式</span>\n<span class=\"token inserted\">+- metric: 時系列データの属性の名前. RDBでいうテーブル名.</span>\n<span class=\"token inserted\">+- timestamp </span>\n<span class=\"token inserted\">+- value: integer / float</span>\n<span class=\"token inserted\">+- tag(s): { \"key\": \"value\" }のペア. </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+tagについては最低一つつける必要がある(最大8つまでサポートされているが, usually up to 4 or 5 tags とのこと).  </span>\n<span class=\"token inserted\">+時系列DBではvalueが数値しか取れない代わりに, tagsのkeyを組み合わせて集計を行うみたい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+APIはHTTP RestとTelnet Style(!)がある. </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+補間については, 分散データベースなので物理的な断片化が考慮されており, OpenTSDB側で線形補間・スキップ・ゼロ補間がサポートされている.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Prometheus</span>\n<span class=\"token inserted\">+- monitoring system &#x26; time series database</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+今回調べるまで存在を知らなかった. 用途を見るとどうもElasticSearch等の用途と似ていて, モニター側に重きを置いているっぽい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+そのためデータは別口からインポートする必要がある.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+データについては15日間分の保持がデフォルトのようで, Prometheus単体で利用するのは(データ解析のフェーズにおいても)今回の用途では厳しそう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## InfluxDB</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### TSD形式</span>\n<span class=\"token inserted\">+[Line Protocol](https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_tutorial/)と呼ばれる行データの書式に従う.  </span>\n<span class=\"token inserted\">+以下の書式のように, 配列はスペースなしのカンマ区切りで, tagとmeasurementの区切り, measurementとtimestampの区切りにはスペースをいれる.  </span>\n<span class=\"token inserted\">+measurementが値部分となっていて, こちらもtagと同様カンマ区切りで複数のtag付のmeasurementを持てる.</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+metrix,&#x26;lt;tag_key&#x26;gt;=&#x26;lt;tag_value&#x26;gt;,&#x26;lt;tag_key&#x26;gt;=&#x26;lt;tag_value&#x26;gt; &#x26;lt;measurement&#x26;gt;=&#x26;lt;value&#x26;gt; &#x26;lt;timestamp&#x26;gt;</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Measurementにはinteger, floatの他にstring, booleanも扱える.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+補間については, `fill()`を用いてnull, 指定値, 線形補間, 前データ値が利用できる.[^2]</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[blog](https://www.influxdata.com/blog/influxdb-markedly-outperforms-opentsdb-in-time-series-data-metrics-benchmark/) によるとwrite performanceがOpenTSDBの9倍.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## まとめ</span>\n<span class=\"token inserted\">+結論としては補間が必要なデータストアにはInfluxDB一択だと思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+|   DB   | 書き込み |  データ量 |  補間 | ローカル |</span>\n<span class=\"token inserted\">+|:------:|:--------:|:---------:|:-----:|:--------:|</span>\n<span class=\"token inserted\">+|OpenTSDB|  ○       |  ◎        |   ○   | Docker   |</span>\n<span class=\"token inserted\">+|InfluxDB|  ◎       |  ○        |   ○   | Docker   |</span>\n<span class=\"token inserted\">+|Prometheus| -      |  x        |   -   | Docker   |</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## ref</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^1]: [slideshare](https://www.slideshare.net/HBaseCon/operations-session-3-49043534?qid=5547eada-f70d-4730-bacb-6aeb6f37c068&#x26;v=&#x26;b=&#x26;from_search=5)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^2]: [document](https://docs.influxdata.com/influxdb/v1.3/query_language/data_exploration/#advanced-group-by-time-syntax)</span>\n</code></pre></div>"}],"publishedAt":"2018-11-11","updatedAt":"2021-01-30"},{"slug":"2018-10-14-code-festival-b","title":"Code Festival 2018 qual B","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","Grid"],"content":"<p><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/\" rel=\"nofollow\">CODE FESTIVAL 2018 qual B</a> 予選参加記録。</p>\n<h2 id=\"a\"><a href=\"#a\"><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_a\" rel=\"nofollow\">A</a></a></h2>\n<p>1から100の目が出るサイコロを振った時、出た目が入力<code>N</code>の倍数でない確率を求める。</p>\n<p>1から100のうち、<code>N</code>の倍数であるものは<code>N</code>で割り切れるものの個数であるから、<code>100 / N</code>個.</p>\n<p>なので<code>N</code>の倍数でないものは<code>100 - 100 / N</code>個.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"b\"><a href=\"#b\"><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_b\" rel=\"nofollow\">B</a></a></h2>\n<p>数列<code>a_n, b_n</code>が与えられた時, 任意の<code>a_i in a_n</code>の値を1だけ増加させることができる。\nこれを<code>X</code>回以内行った場合に<code>\\sum a_i * b_i = a_1 * b_1 + a_2 * b_2 + ... + a_N * b_N</code>の最大値を求める。</p>\n<p>制約</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">1 &#x26;lt;= a_i, b_i &#x26;lt;= 100\n0 &#x26;lt;= X &#x26;lt;= 100</code></pre></div>\n<p>任意の<code>a_j</code>の値を一度だけ1増加させたとすると、元の配列の和からの差分は</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">(a_1 * b_1 + ... + a_j * b_j + ... a_N * b_N) - (a_1 * b_1 + ... + (a_j + 1) * b_j + ... + a_N + b_N)\n= a_j</code></pre></div>\n<p>なので、増分は<code>a_j</code>に比例する.<br>\nこれを<code>X</code>回繰り返しても増分は<code>a_j</code>に比例するし、<code>a_j</code>の大きさは変動しない.<br>\nまた、<code>b_i</code>が1以上なので、<code>a_i</code>は大きいものから1つだけ選び、その<code>a_i</code>に対して処理を行えばよい。<br>\n(仮に<code>b_i = 0</code>となる場合があるなら, そのような<code>b_i</code>に対しては<code>(a_i + k) * b_i => 0</code>なので)</p>\n<p>したがって求める値は, <code>\\sum a_n * b_n + max(a_n) * X</code>.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ab <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ab<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ab<span class=\"token punctuation\">.</span><span class=\"token function\">sort_by_key</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ab<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ab<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> x<span class=\"token number\">.0</span> <span class=\"token operator\">*</span> x<span class=\"token number\">.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">+</span> ab<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c\"><a href=\"#c\"><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_c\" rel=\"nofollow\">C</a></a></h2>\n<p><code>N * N (N &#x3C;= 1000)</code>マスのグリッドが与えられる.<br>\nあるマスを塗るとその4近傍も塗られるとした時, グリッドを全て塗る方法を出力する.</p>\n<p>このときに塗っていいマスの上限が<code>201,800</code>マスである.</p>\n<p>以下のようにチェスのナイトが動けるマス目っぽく塗ると, 無駄なく4近傍をカバーできる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">x . . . . x . . . . x . .\n. . . x . . . . x . . . .\n. x . . . . x . . . . x .\n. . . . x . . . . x . . .\n. . x . . . . x . . . . x\nx . . . . x . . . . x . .\n. . . x . . . . x . . . .</code></pre></div>\n<p>このときに<code>N * N</code>の四隅が切り取られるので、はみ出た部分を押し込む形で塗ると上手くいく.</p>\n<p>このアプローチでいくと, <code>N = 1000</code>のときに塗るマスが<code>200,800</code>マスとなる.</p>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> vec <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ar <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ra <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ar<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ra<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ra<span class=\"token punctuation\">[</span>j <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> flg <span class=\"token punctuation\">{</span> vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'X'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// let mut cnt = 0;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// if vec[i][j] == 'X' { cnt += 1; }</span>\n            <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// n == 1000 -> 200,800</span>\n    <span class=\"token comment\">// println!(\"{}\", cnt);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>最初Cでn = 2の場合をアドホックに書いてて、👆の形の解答に直した後にアドホックの部分を消すのを忘れて1テストケースだけ通らない...と無駄に悩んでしまった. 解法はすぐわかったので本当にもったいない.<br>\nD, Eに関しては順位表を見てE &#x3C; DっぽかったのでEを見て撤退. いつか解けるようになりたい.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-10-14-code-festival-b.md b/_posts/2018-10-14-code-festival-b.md\nnew file mode 100644\nindex 0000000..2ba0706\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-10-14-code-festival-b.md</span>\n<span class=\"token coord\">@@ -0,0 +1,157 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: Code Festival 2018 qual B</span>\n<span class=\"token inserted\">+date: 2017-11-29</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+  - Grid</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[CODE FESTIVAL 2018 qual B](https://code-festival-2018-qualb.contest.atcoder.jp/) 予選参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [A](https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1から100の目が出るサイコロを振った時、出た目が入力`N`の倍数でない確率を求める。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1から100のうち、`N`の倍数であるものは`N`で割り切れるものの個数であるから、`100 / N`個.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なので`N`の倍数でないものは`100 - 100 / N`個.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    println!(\"{}\", 100 - 100 / n);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B](https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+数列`a_n, b_n`が与えられた時, 任意の`a_i in a_n`の値を1だけ増加させることができる。</span>\n<span class=\"token inserted\">+これを`X`回以内行った場合に`\\sum a_i * b_i = a_1 * b_1 + a_2 * b_2 + ... + a_N * b_N`の最大値を求める。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+制約</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+1 &#x26;lt;= a_i, b_i &#x26;lt;= 100</span>\n<span class=\"token inserted\">+0 &#x26;lt;= X &#x26;lt;= 100</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+任意の`a_j`の値を一度だけ1増加させたとすると、元の配列の和からの差分は</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+(a_1 * b_1 + ... + a_j * b_j + ... a_N * b_N) - (a_1 * b_1 + ... + (a_j + 1) * b_j + ... + a_N + b_N)</span>\n<span class=\"token inserted\">+= a_j</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+なので、増分は`a_j`に比例する.  </span>\n<span class=\"token inserted\">+これを`X`回繰り返しても増分は`a_j`に比例するし、`a_j`の大きさは変動しない.  </span>\n<span class=\"token inserted\">+また、`b_i`が1以上なので、`a_i`は大きいものから1つだけ選び、その`a_i`に対して処理を行えばよい。  </span>\n<span class=\"token inserted\">+(仮に`b_i = 0`となる場合があるなら, そのような`b_i`に対しては`(a_i + k) * b_i =&#x26;gt; 0`なので)  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがって求める値は, `\\sum a_n * b_n + max(a_n) * X`.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, x) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ab = Vec::new();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        ab.push((i[0], i[1]));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    ab.sort_by_key(|x| x.1);</span>\n<span class=\"token inserted\">+    ab.reverse();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut sum = 0;</span>\n<span class=\"token inserted\">+    for x in ab.iter() {</span>\n<span class=\"token inserted\">+        sum += x.0 * x.1;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", sum + ab[0].1 * x);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C](https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_c)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`N * N (N &#x26;lt;= 1000)`マスのグリッドが与えられる.  </span>\n<span class=\"token inserted\">+あるマスを塗るとその4近傍も塗られるとした時, グリッドを全て塗る方法を出力する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このときに塗っていいマスの上限が`201,800`マスである.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+以下のようにチェスのナイトが動けるマス目っぽく塗ると, 無駄なく4近傍をカバーできる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+x . . . . x . . . . x . .</span>\n<span class=\"token inserted\">+. . . x . . . . x . . . .</span>\n<span class=\"token inserted\">+. x . . . . x . . . . x .</span>\n<span class=\"token inserted\">+. . . . x . . . . x . . .</span>\n<span class=\"token inserted\">+. . x . . . . x . . . . x</span>\n<span class=\"token inserted\">+x . . . . x . . . . x . .</span>\n<span class=\"token inserted\">+. . . x . . . . x . . . .</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このときに`N * N`の四隅が切り取られるので、はみ出た部分を押し込む形で塗ると上手くいく.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このアプローチでいくと, `N = 1000`のときに塗るマスが`200,800`マスとなる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut vec = vec![vec!['.'; n]; n];</span>\n<span class=\"token inserted\">+    let ar = [0, 3, 1, 4, 2];</span>\n<span class=\"token inserted\">+    let ra = [2, 4, 1, 3, 0];</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for i in 0..n { for j in 0..n {</span>\n<span class=\"token inserted\">+        let mut flg = false;</span>\n<span class=\"token inserted\">+        if j % 5 == ar[i % 5] { flg = true; }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if i == 0 {</span>\n<span class=\"token inserted\">+            if j % 5 == ra[(j + 3) % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if j == 0 {</span>\n<span class=\"token inserted\">+            if i % 5 == ar[(i + 3) % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if i == n - 1 {</span>\n<span class=\"token inserted\">+            if j % 5 == ar[(i + 1) % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if j == n - 1 {</span>\n<span class=\"token inserted\">+            if i % 5 == ra[j % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if flg { vec[i][j] = 'X'; }</span>\n<span class=\"token inserted\">+    }}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    // let mut cnt = 0;</span>\n<span class=\"token inserted\">+    for i in 0..n { for j in 0..n {</span>\n<span class=\"token inserted\">+            // if vec[i][j] == 'X' { cnt += 1; }</span>\n<span class=\"token inserted\">+            print!(\"{}\", vec[i][j]);</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+        println!();</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    // n == 1000 -&#x26;gt; 200,800</span>\n<span class=\"token inserted\">+    // println!(\"{}\", cnt);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+最初Cでn = 2の場合をアドホックに書いてて、👆の形の解答に直した後にアドホックの部分を消すのを忘れて1テストケースだけ通らない...と無駄に悩んでしまった. 解法はすぐわかったので本当にもったいない.  </span>\n<span class=\"token inserted\">+D, Eに関しては順位表を見てE &#x26;lt; DっぽかったのでEを見て撤退. いつか解けるようになりたい.</span>\n</code></pre></div>"}],"publishedAt":"2017-11-29","updatedAt":"2021-01-30"},{"slug":"2018-10-06-abc112","title":"ABC112","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder"],"content":"<p>AtCoder Beginners Contest 112の参加記録。</p>\n<h2 id=\"a\"><a href=\"#a\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_a\" rel=\"nofollow\">A</a></a></h2>\n<p>入力<code>N</code>が1なら指定の文字列を出力, 2なら更に標準入力から数字を読み、計算結果を出力.</p>\n<p>インタラクティブに標準入力の分岐処理を行う問題はABCだと初めて?</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"b\"><a href=\"#b\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_b\" rel=\"nofollow\">B</a></a></h2>\n<p><code>(c_i, t_i)</code>のうち、<code>t_i &#x3C;= T</code>を満たす最小の<code>c_i</code>を求める.\n存在しない場合には<code>TLE</code>を出力する。</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ct <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ct<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> ct<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.1</span> <span class=\"token operator\">&#x3C;=</span> t<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> ans <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c\"><a href=\"#c\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_c\" rel=\"nofollow\">C</a></a></h2>\n<p>座標<code>(x_i, y_i)</code>と高度<code>h_i</code>及び高度の計算式が与えられ、それを満たす中心座標及びそれの高度を求める.</p>\n<p>制約が<code>x &#x3C; 10^2, y &#x3C; 10^2, N &#x3C; 10 ^ 2</code>なので全探索でも<code>10^8</code>なので通る.\n<code>x, y</code>及び<code>n</code>を固定すれば<code>h = max(H - (X - c_x).abs() - (Y - c_y).abs(), 0)</code>から<code>H</code>は定まるが、最初<code>h_i</code>が<code>0</code>になりうるケースを考慮せずにやってWA.\nそこで, クエリを<code>h_i</code>によってソートすれば<code>max(..., 0)</code>の結果が正になるから, ここでの条件分岐を考えずに済む.</p>\n<p>後は各クエリがこの<code>x, y, h</code>と一致するか確認する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> vec <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">isize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vec<span class=\"token punctuation\">.</span><span class=\"token function\">sort_by_key</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vec<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans_y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans_h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">101</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">101</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> v<span class=\"token number\">.2</span> <span class=\"token operator\">!=</span> <span class=\"token namespace\">cmp<span class=\"token punctuation\">::</span></span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> v<span class=\"token number\">.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> v<span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                flg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> flg <span class=\"token punctuation\">{</span>\n            ans_x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            ans_y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n            ans_h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} {} {}\"</span><span class=\"token punctuation\">,</span> ans_x<span class=\"token punctuation\">,</span> ans_y<span class=\"token punctuation\">,</span> ans_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"d\"><a href=\"#d\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_d\" rel=\"nofollow\">D</a></a></h2>\n<p>数列<code>an</code>の要素数<code>N</code>と和<code>M</code>が与えられるので、<code>an</code>の各要素の最大公約数の取りうる最大値を求める.</p>\n<p><code>a_1 + a_2 + ... + a_N</code>の最大公約数が<code>K</code>であるとき, 次のように括り出すことができる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">K * (a_1&#x26;#39; + a_2&#x26;#39; + ... + a_N&#x26;#39;) = K * sum(a&#x26;#39;)</code></pre></div>\n<p>したがって<code>K</code>は<code>M</code>の約数.</p>\n<p>次に<code>an</code>の要素数を<code>N</code>にするためには, <code>a'</code>の要素数が<code>N</code>個である必要がある.\n<code>min(sum(a'))</code>は全ての要素が<code>1</code>の場合に<code>N</code>となるので, <code>K</code>は大きくても<code>M / N</code>の範囲であることがわかる.</p>\n<p>よって, <code>i in 1 ~ M / N</code>について,Mが割り切れる<code>i</code>のうち最大のものが答え.</p>\n<p>また制約から<code>n = 1, m = 10^9</code>のケースがありうる. その場合処理が全て走ってしまうのでTLE(1WA), その場合の処理はアドホックに書いてしまった.</p>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">/</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> m <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> ans <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>A -> B -> D -> Cの順で解いた.\n立ち回りは悪くなかったと思う(DよりCにかけた時間の方が長かったので).<br>\nただこのレベルで立ち回りとか考えずに全部解けるようにすべき,というのはそれはそうなので精進する.\nCに戻ってきたときに全探索が可能なことに気づくまでは早かったがそこからの比較ミスは2WAに抑えられるものだったので反省.</p>\n<p>CよりDの方が簡単じゃないですか?<br>\n2WA以上出した時は全部消して0から書き直すと吉っぽい.<br>\nこれを書いた後に見た解説放送中のコメントに, Cは<code>max(h) &#x3C;= H &#x3C;= max(h) + 200</code>に収まるからHについても全探索が可能、とあってなるほどなあとなった.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-10-06-abc112.md b/_posts/2018-10-06-abc112.md\nnew file mode 100644\nindex 0000000..44ab51b\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-10-06-abc112.md</span>\n<span class=\"token coord\">@@ -0,0 +1,168 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: ABC112</span>\n<span class=\"token inserted\">+date: 2018-10-06</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+AtCoder Beginners Contest 112の参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [A](https://beta.atcoder.jp/contests/abc112/tasks/abc112_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+入力`N`が1なら指定の文字列を出力, 2なら更に標準入力から数字を読み、計算結果を出力.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+インタラクティブに標準入力の分岐処理を行う問題はABCだと初めて?</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;String&#x26;gt;();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if n == \"1\" {</span>\n<span class=\"token inserted\">+        println!(\"Hello World\");</span>\n<span class=\"token inserted\">+    } else {</span>\n<span class=\"token inserted\">+        let a = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        let b = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        println!(\"{}\", a + b);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B](https://beta.atcoder.jp/contests/abc112/tasks/abc112_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`(c_i, t_i)`のうち、`t_i &#x26;lt;= T`を満たす最小の`c_i`を求める.</span>\n<span class=\"token inserted\">+存在しない場合には`TLE`を出力する。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, t) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ct = Vec::new();</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        ct.push((i[0], i[1]));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let ans = ct.iter()</span>\n<span class=\"token inserted\">+        .filter(|x| x.1 &#x26;lt;= t)</span>\n<span class=\"token inserted\">+        .map(|x| x.0)</span>\n<span class=\"token inserted\">+        .min();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    match ans {</span>\n<span class=\"token inserted\">+        Some(x) =&#x26;gt; println!(\"{}\", x),</span>\n<span class=\"token inserted\">+        None =&#x26;gt; println!(\"TLE\"),</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C](https://beta.atcoder.jp/contests/abc112/tasks/abc112_c)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+座標`(x_i, y_i)`と高度`h_i`及び高度の計算式が与えられ、それを満たす中心座標及びそれの高度を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+制約が`x &#x26;lt; 10^2, y &#x26;lt; 10^2, N &#x26;lt; 10 ^ 2`なので全探索でも`10^8`なので通る.</span>\n<span class=\"token inserted\">+`x, y`及び`n`を固定すれば`h = max(H - (X - c_x).abs() - (Y - c_y).abs(), 0)`から`H`は定まるが、最初`h_i`が`0`になりうるケースを考慮せずにやってWA.</span>\n<span class=\"token inserted\">+そこで, クエリを`h_i`によってソートすれば`max(..., 0)`の結果が正になるから, ここでの条件分岐を考えずに済む.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+後は各クエリがこの`x, y, h`と一致するか確認する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut vec = Vec::new();</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;isize&#x26;gt;();</span>\n<span class=\"token inserted\">+        vec.push((i[0], i[1], i[2]));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    vec.sort_by_key(|x| x.2);</span>\n<span class=\"token inserted\">+    vec.reverse();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ans_x = 0;</span>\n<span class=\"token inserted\">+    let mut ans_y = 0;</span>\n<span class=\"token inserted\">+    let mut ans_h = 0;</span>\n<span class=\"token inserted\">+    for x in 0..101 { for y in 0..101 {</span>\n<span class=\"token inserted\">+        let mut flg = true;</span>\n<span class=\"token inserted\">+        let h = vec[0].2 + (x - vec[0].0).abs() + (y - vec[0].1).abs();</span>\n<span class=\"token inserted\">+        for v in vec.iter() {</span>\n<span class=\"token inserted\">+            if v.2 != cmp::max(h - (x - v.0).abs() - (y - v.1).abs(), 0) {</span>\n<span class=\"token inserted\">+                flg = false;</span>\n<span class=\"token inserted\">+                continue;</span>\n<span class=\"token inserted\">+            }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if flg {</span>\n<span class=\"token inserted\">+            ans_x = x;</span>\n<span class=\"token inserted\">+            ans_y = y;</span>\n<span class=\"token inserted\">+            ans_h = h;</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{} {} {}\", ans_x, ans_y, ans_h);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [D](https://beta.atcoder.jp/contests/abc112/tasks/abc112_d)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+数列`an`の要素数`N`と和`M`が与えられるので、`an`の各要素の最大公約数の取りうる最大値を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`a_1 + a_2 + ... + a_N`の最大公約数が`K`であるとき, 次のように括り出すことができる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+K * (a_1' + a_2' + ... + a_N') = K * sum(a')</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがって`K`は`M`の約数.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に`an`の要素数を`N`にするためには, `a'`の要素数が`N`個である必要がある.</span>\n<span class=\"token inserted\">+`min(sum(a'))`は全ての要素が`1`の場合に`N`となるので, `K`は大きくても`M / N`の範囲であることがわかる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+よって, `i in 1 ~ M / N`について,Mが割り切れる`i`のうち最大のものが答え.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また制約から`n = 1, m = 10^9`のケースがありうる. その場合処理が全て走ってしまうのでTLE(1WA), その場合の処理はアドホックに書いてしまった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;u64&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ans = 1;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if n == 1 {</span>\n<span class=\"token inserted\">+        println!(\"{}\", m);</span>\n<span class=\"token inserted\">+        return;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for i in 1..(m / n + 1) {</span>\n<span class=\"token inserted\">+        if m % i == 0 { ans = i; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+A -&#x26;gt; B -&#x26;gt; D -&#x26;gt; Cの順で解いた.</span>\n<span class=\"token inserted\">+立ち回りは悪くなかったと思う(DよりCにかけた時間の方が長かったので).  </span>\n<span class=\"token inserted\">+ただこのレベルで立ち回りとか考えずに全部解けるようにすべき,というのはそれはそうなので精進する.</span>\n<span class=\"token inserted\">+Cに戻ってきたときに全探索が可能なことに気づくまでは早かったがそこからの比較ミスは2WAに抑えられるものだったので反省.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+CよりDの方が簡単じゃないですか?  </span>\n<span class=\"token inserted\">+2WA以上出した時は全部消して0から書き直すと吉っぽい.  </span>\n<span class=\"token inserted\">+これを書いた後に見た解説放送中のコメントに, Cは`max(h) &#x26;lt;= H &#x26;lt;= max(h) + 200`に収まるからHについても全探索が可能、とあってなるほどなあとなった.</span>\n</code></pre></div>"}],"publishedAt":"2018-10-06","updatedAt":"2021-01-30"},{"slug":"2018-01-11-reading-futures-await","title":"memo:reading futures-await","categories":["Code Reading"],"image":"https://koka831.github.io/img/icon.png","tags":["Rust"],"content":"<p><a href=\"https://github.com/alexcrichton/futures-rs\" rel=\"nofollow\">futures-rs</a> is a libary allows zero cost abstruction of state machine; <code>Future</code> trait in Rust.</p>\n<p>futures-await provides Async/await syntax for <code>futures-rs</code>.</p>\n<h2 id=\"async\"><a href=\"#async\">#[async]</a></h2>\n<p>make it returns future instead of result.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[async]</span> <span class=\"token comment\">// tagged with #[async] option</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fetch</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Err }</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"async_stream\"><a href=\"#async_stream\">#[async_stream]</a></h2>\n<p>stream instead of future</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[async_stream(item=T)]</span>\n<span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token macro property\">stream_yield!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"await-macro\"><a href=\"#await-macro\">await! macro</a></h2>\n<p><code>await!</code> macro allows blocking the procedure until completion, not blocking the thread.</p>\n<p>it behaves like a function returns <code>Result(e)</code></p>\n<p>here is a brief procedure of <code>await!</code> macro.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token macro property\">macro_rules!</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> future <span class=\"token operator\">=</span> <span class=\"token variable\">$e</span>\n  <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> future<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">break</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotReady</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// continue and wait</span>\n      <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// block until NotReady -> Ready(e)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token namespace\">futures<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Async</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotReady</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"async_block-macro\"><a href=\"#async_block-macro\">async_block! macro</a></h2>\n<p>it doesn't need a dedicated function like <code>#[async]</code>, (I think it's a like <code>thread::spawn()</code>, so it can be run with <code>core.run(Fn(async_block!))</code>)</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">spawn</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">JoinHandle</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">where</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span>\n\n</code></pre></div>\n<p>here's the brief internal procedure of async_block macro.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[proc_macro]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">async_block</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TokenStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">TokenStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// input -> TokenTree -> TokenStream -> parse -> TokenStream</span>\n  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">TokenStream</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenTree</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// parse input as token node</span>\n    <span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TokenNode</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Delimiter</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Brace</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> expr <span class=\"token operator\">=</span> <span class=\"token namespace\">syn<span class=\"token punctuation\">::</span></span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// token construction..</span>\n  token<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// return Stream</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"nightly-features\"><a href=\"#nightly-features\">nightly features</a></h2>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/43122\" rel=\"nofollow\">generators</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/35896\" rel=\"nofollow\">proc_macro</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/42183\" rel=\"nofollow\">conservative_impl_trait</a></li>\n</ul>","description":"memo","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-01-11-reading-futures-await.md b/_posts/2018-01-11-reading-futures-await.md\nnew file mode 100644\nindex 0000000..6e034f0\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-11-reading-futures-await.md</span>\n<span class=\"token coord\">@@ -0,0 +1,93 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: memo:reading futures-await</span>\n<span class=\"token inserted\">+date: 2018-01-11</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Code Reading</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - Rust</span>\n<span class=\"token inserted\">+description: memo</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[futures-rs](https://github.com/alexcrichton/futures-rs) is a libary allows zero cost abstruction of state machine; `Future` trait in Rust.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+futures-await provides Async/await syntax for `futures-rs`.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## #[async]</span>\n<span class=\"token inserted\">+make it returns future instead of result.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[async] // tagged with #[async] option</span>\n<span class=\"token inserted\">+fn fetch(c: Client) -&#x26;gt; Result&#x26;lt;T&#x26;gt; {</span>\n<span class=\"token inserted\">+  let res = await!()?; // Optional</span>\n<span class=\"token inserted\">+  if !res.status().is_success() { // Err }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## #[async_stream]</span>\n<span class=\"token inserted\">+stream instead of future</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[async_stream(item=T)]</span>\n<span class=\"token inserted\">+for s in T {</span>\n<span class=\"token inserted\">+  ...</span>\n<span class=\"token inserted\">+  stream_yield!(await!(..))</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## await! macro</span>\n<span class=\"token inserted\">+`await!` macro allows blocking the procedure until completion, not blocking the thread.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+it behaves like a function returns `Result(e)`</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+here is a brief procedure of `await!` macro.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+macro_rules! await {</span>\n<span class=\"token inserted\">+  let mut future = $e</span>\n<span class=\"token inserted\">+  loop {</span>\n<span class=\"token inserted\">+    match poll(&#x26;mut future) {</span>\n<span class=\"token inserted\">+      Ok(Ready(e)) =&#x26;gt; break Ok(e),</span>\n<span class=\"token inserted\">+      Ok(NotReady) =&#x26;gt; {}, // continue and wait</span>\n<span class=\"token inserted\">+      Err(e) =&#x26;gt; Err(e)</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+  // block until NotReady -&#x26;gt; Ready(e)</span>\n<span class=\"token inserted\">+  yield futures::Async::NotReady</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## async_block! macro</span>\n<span class=\"token inserted\">+it doesn't need a dedicated function like `#[async]`, (I think it's a like `thread::spawn()`, so it can be run with `core.run(Fn(async_block!))`)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+pub fn spawn&#x26;lt;F, T&#x26;gt;(f: F) -&#x26;gt; JoinHandle&#x26;lt;T&#x26;gt;</span>\n<span class=\"token inserted\">+  where F: FnOnce() -&#x26;gt; T,</span>\n<span class=\"token inserted\">+  F: Send + 'static, T: Send + 'static</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+here's the brief internal procedure of async_block macro.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[proc_macro]</span>\n<span class=\"token inserted\">+fn async_block(i: TokenStream) -&#x26;gt; TokenStream {</span>\n<span class=\"token inserted\">+  // input -&#x26;gt; TokenTree -&#x26;gt; TokenStream -&#x26;gt; parse -&#x26;gt; TokenStream</span>\n<span class=\"token inserted\">+  let input = TokenStream::from(TokenTree {...,</span>\n<span class=\"token inserted\">+    // parse input as token node</span>\n<span class=\"token inserted\">+    ..., kind: TokenNode::Group(Delimiter::Brace, i)})</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  let expr = syn::parse(input)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  // token construction..</span>\n<span class=\"token inserted\">+  token.into() // return Stream</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## nightly features</span>\n<span class=\"token inserted\">+- [generators](https://github.com/rust-lang/rust/issues/43122)</span>\n<span class=\"token inserted\">+- [proc_macro](https://github.com/rust-lang/rust/issues/35896)</span>\n<span class=\"token inserted\">+- [conservative_impl_trait](https://github.com/rust-lang/rust/issues/42183)</span>\n<span class=\"token inserted\">+</span>\n</code></pre></div>"}],"publishedAt":"2018-01-11","updatedAt":"2021-01-30"},{"slug":"2018-01-09-reading-wordpress","title":"reading wordpress","categories":["Code Reading"],"image":"https://koka831.github.io/img/2018-01-10-thumb.png","tags":["Wordpress"],"content":"<p>友人からコードリーディングの方法について聞かれたので,僕自身もCSバックグラウンドではないけれどソースコードの読み方を説明しようと思う.<br>\n以下友人向け文体.</p>\n<p>途中でプロジェクトにアサインされた時、過去の自分のコードをリファクタリングする時、OSSのコードを読む時など、ある程度の規模のソースコードを読む機会があると思う.<br>\nサーバーだったりコマンドラインツールだったり,言語も責務も異なる様々なプログラムを読む際に一貫した読み方はあるのだろうか.\n完全な解はないと思うが、僕個人の経験からすると、</p>\n<ul>\n<li>抽象化・抽象度を意識すること</li>\n<li>読まないこと\nこれらを意識するだけででソースコードはだいぶ読みやすくなる.</li>\n</ul>\n<p>抽象化・抽象度を意識するとはどういうことか.\n具体的に言うと、自分が今、全体の処理の流れのうち、どの部分を読んでいるかを意識することである。</p>\n<p>僕らは普段プログラムを書くためにOSを使っているけれど、OSは実際どんなことをしてくれているのか.<br>\nプログラムをコンパイラに喰わせると実行可能なファイルを吐いてくれるけれど、内部ではなにをしているのか.<br>\nCPUはフリップフロップ<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>という素子からできているし、フリップフロップは半導体からできている.<br>\nけれど、プログラムを組む上で僕らはそんなこと気にする必要がない.<br>\nこれが抽象化である. 内部構造を隠蔽し、表に見えるのはユーザが触って良い部分だけ.</p>\n<p>注意して欲しいのが、ここで言うユーザは必ずしも人間だけではないということ.<br>\n例えば実行中のプログラムがメモリの状態を知りたい時、直接メモリを参照するのは無理がある.\n実行中のプログラムからメモリまでには以下のような層がある.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">+-----+    +-----+    +-----------+    +---------+\n| mem | == | CPU | == | kernel/OS | == | program |\n+-----+    +-----+    +-----------+    +---------+</code></pre></div>\n<p>ではどうするか. 見えないものは下の層が知っているかもしれない.\nOSにメモリの使用状況を尋ねる命令を送るのである.</p>\n<p>上の例では物理的に層が分かれていたので抽象化の区切りが分かりやすかったが、ソフトウェアの構成も同様に抽象化が行われている.<br>\nソフトウェアのコードを読む時にも、自分が今メモリを見ているのかOSの命令を見ているのか、また隠蔽されている処理なのか、表に見えている部分なのか、どのレベルを見ているのかを意識することが必要なのがわかると思う.</p>\n<p>次に、読まないこと.\nこれは<strong>読むべき情報以外を読まない</strong>という意味.</p>\n<p>全体像を知る、というのは全部を知ることではない. 上の話でも言ったように、基本的にソフトウェアは抽象化の繰り返しで構成されている.<br>\nつまり、自分が欲しい情報の層に立った時に、表に見える情報以外は読まなくていい.\nOSがどうなっているか知りたいのにメモリを分解してみてもどうにもならない.</p>\n<p>恐らくソースコードを読むことに慣れているエンジニアはこれらを無意識に行っている.\nそのため同じ抽象度のものを見る時に,自分の培ったパターンを当てはめることができ、更に自分がコードを書く際に、同様の設計で実装することが出来る.<br>\nプロジェクトが書けるエンジニアは読む力もある.</p>\n<p>以上を踏まえてWordPressのソースコード<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup>を読んでみよう.</p>\n<p>まずなにを知りたいか.\nここでは全体的な構成とCMSとしての処理の流れを把握することを目標としてみよう.</p>\n<p>全体構成を把握する場合、複数の層の責務を把握する必要があるため、特に<strong>読まない</strong>ことが重要である.<br>\nコードを実際に読む前に、まずは公式サイトやリファレンスに書いていないか確認してみよう.\nリファレンスがダメならコメントだ.</p>\n<p>公式に<a href=\"http://wpdocs.osdn.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E9%9A%8E%E5%B1%A4\" rel=\"nofollow\">ディレクトリ階層</a>というページがある.<br>\n見てみるとこれは自作テーマにおけるディレクトリ階層のようだ. 今回はWordPress自体がどのように動作するのかを知りたいので、今回は素直にコードを読むしかなさそうだ.</p>\n<p>では実際にディレクトリ構成を見てみよう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">index.php\nlicense.txt\nreadme.html\nwp-activate.php\nwp-blog-header.php\nwp-comments-post.php\nwp-config-sample.php\nwp-cron.php\nwp-links-opml.php\nwp-load.php\nwp-login.php\nwp-mail.php\nwp-settings.php\nwp-signup.php\nwp-trackback.php\nxmlrpc.php\n<span class=\"token builtin class-name\">.</span>\n├── wp-admin\n│   ├── css\n│   ├── images\n│   ├── includes\n│   ├── js\n│   ├── maint\n│   ├── network\n│   └── user\n├── wp-content\n│   ├── plugins\n│   ├── themes\n│   └index.php\n└── wp-includes\n    ├── certificates\n    ├── css\n    ├── customize\n    ├── fonts\n    ├── ID3\n    ├── images\n    ├── IXR\n    ├── js\n    ├── pomo\n    ├── random_compat\n    ├── Requests\n    ├── rest-api\n    ├── SimplePie\n    ├── Text\n    ├── theme-compat\n    ├── widgets\n    └<span class=\"token punctuation\">..</span>.\n\n<span class=\"token number\">28</span> directories\n</code></pre></div>\n<p>構成を見つつ、このうちどれが読まなくてもいいものか考えてみよう.</p>\n<p>まず<code>wp-admin/</code>. これは管理者パネル用のディレクトリだろう. CMSとしてはとりあえず読まなくても良さそうだ.</p>\n<p>次に<code>wp-content/</code>配下. <code>plugins/</code>, <code>themes/</code>は それぞれユーザインストールのプラグインとテーマ用のディレクトリだろうか.<br>\n<code>index.php</code>はルートディレクトリにもあったがどちらがエントリーポイントになるのだろう. テーマを読み込む処理はルーティング後に行われるだろうからとりあえずは後回しにしよう.</p>\n<p>最後に<code>wp-includes</code>はどうだろう.<br>\n大抵<code>includes/</code>ディレクトリにはシステムで利用するライブラリ等が置かれる. 読むのは必要な機能が出てきてからで良さそうだ.</p>\n<p>つまり最初に読む必要があるのはこれらになりそうだ.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ tree <span class=\"token parameter variable\">-I</span> <span class=\"token string\">'wp-includes|wp-admin|themes|plugins|licence|readme'</span>\n\n├── index.php\n├── wp-activate.php\n├── wp-blog-header.php\n├── wp-comments-post.php\n├── wp-config-sample.php\n├── wp-content\n│   └── index.php\n├── wp-cron.php\n├── wp-links-opml.php\n├── wp-load.php\n├── wp-login.php\n├── wp-mail.php\n├── wp-settings.php\n├── wp-signup.php\n├── wp-trackback.php\n└── xmlrpc.php\n\n<span class=\"token number\">1</span> directory, <span class=\"token number\">17</span> files\n</code></pre></div>\n<p>では実際の処理の流れを追っていこう.</p>\n<p>大抵WordPressはApacheやNginx等のウェブサーバを介してPHP-FPMやFastCGIを用いてホスティングされる.<br>\nApacheであれば<code>DirectoryIndex</code>, Nginxであれば<code>http</code>ディレクティブ内の<code>index</code>に、ウェブサーバにアクセスがあった時に最初にアクセスされるファイルが指定されている.</p>\n<div class=\"remark-highlight\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token comment\"># nginx.conf</span>\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># ...</span>\n  <span class=\"token directive\"><span class=\"token keyword\">index</span>                index.php index.html index.htm</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>なので<code>/index.php</code>が最初に読み込まれる.\n処理より流れを把握することを意識して実際に読んでいこう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/* index.php */</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'WP_USE_THEMES'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'/wp-blog-header.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>index.php</code>では定数を定義して、<code>wp-blog-header.php</code>を読み込んでいる.\nでは<code>wp-blog-header.php</code>を見てみよう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/* wp-blog-header.php */</span>\n<span class=\"token comment\">/* Loads the WordPress environment and template. */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$wp_did_header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$wp_did_header</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Load the WordPress library. */</span>\n  <span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/wp-load.php'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Set up the WordPress query. */</span>\n  <span class=\"token function\">wp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Load the theme template. */</span>\n  <span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">ABSPATH</span> <span class=\"token operator\">.</span> <span class=\"token constant\">WPINC</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/template-loader.php'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<blockquote>\n<p>Loads the WordPress environment and template.</p>\n</blockquote>\n<p>とあるので、<code>wp-load.php</code>が\"environment\"、定数やデータベースの設定を、<code>template-loader.php</code>が\"template\"、<code>wp-contents/themes</code>のテーマテンプレートをロードするファイルなのだろう.<br>\nでは<code>wp()</code>は? <code>wp()</code>を呼ぶ前にインクルードしたファイルは<code>wp-load.php</code>しかないので、ここで定義されているのだろう.<br>\nそして\"Set up the WordPress query.\"とはどういうことだろう.<br>\n順に追っていこう.</p>\n<h4 id=\"wp-loadphp\"><a href=\"#wp-loadphp\">wp-load.php</a></h4>\n<p>コメントを読むと</p>\n<ul>\n<li>ABSPATHの定義</li>\n<li><code>wp-config.php</code>, <code>wp-settings.php</code>のロード\n<ul>\n<li>ファイルが存在しなければセットアップするように表示する\nと書いてある.\nセットアップ時のエラーハンドリングもCMSの機能としては本質ではないので、ここもコメントを読んでこれくらいで次に進むようにしよう.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"wp-configphp\"><a href=\"#wp-configphp\">wp-config.php</a></h4>\n<p>これは初期状態では存在しない. <code>wp-config-sample.php</code>をベースにセットアップ時に作成されるようだ.\nこのファイルでは</p>\n<ul>\n<li>MySQL settings</li>\n<li>Secret Keys</li>\n<li>Database table prefix</li>\n<li>ABSPATH\nの定義がされるようだ.</li>\n</ul>\n<p><code>wp-load.php</code>でABSPATHの定義をしたはずなのに、どうしてまた定義するのだろうか?\nとりあえず全体像を確認するためにこれは置いておこう.</p>\n<h4 id=\"wp-settingsphp\"><a href=\"#wp-settingsphp\">wp-settings.php</a></h4>\n<p>トップレベルコメントには、</p>\n<blockquote>\n<p>Used to set up and fix common variables and include the WordPress procedural and class library</p>\n</blockquote>\n<p>とあるので、基本的な関数やクラスのロードが行われるのだろう.</p>\n<p>次に進みたいけれどまだ<code>wp()</code>が見つかっていない. 恐らく<code>wp-settings.php</code>で読み込んでいるファイルのどれかに定義されているのだろう.<br>\nただこの量の<code>require</code>文を全て読んでいくのはしんどい.</p>\n<p>こんな時は<strong>タグジャンプ</strong>を使ってみよう.<br>\nタグジャンプとは、ctagsを用いてソースコードを静的解析し、定義元のファイルを開く方法である.\nVimやSublime Textのプラグインとして公開されているものがあるので使ってみよう.\nもちろんgrepでもいい.</p>\n<p>そうして<code>wp-includes/functions.php</code>に<code>wp()</code>を見つけた.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n * Set up the WordPress query.\n *\n * <span class=\"token keyword\">@since</span> 2.0.0\n *\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP</span>       <span class=\"token parameter\">$wp_locale</span>\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP_Query</span> <span class=\"token parameter\">$wp_query</span>\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP_Query</span> <span class=\"token parameter\">$wp_the_query</span>\n *\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">array</span></span> <span class=\"token parameter\">$query_vars</span> Default WP_Query arguments.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">wp</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$query_vars</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">global</span> <span class=\"token variable\">$wp</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$wp_query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$wp_the_query</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$wp</span><span class=\"token operator\">-></span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$query_vars</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$wp_the_query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$wp_the_query</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$wp_query</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>なるほど、この<code>$wp</code>がメインのオブジェクトなのだろう.<br>\n@globalとあるので、<code>$GLOBALS['wp']</code>を定義している箇所を探してみよう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// wp-settings.php</span>\n<span class=\"token doc-comment comment\">/**\n * WordPress Object\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP</span> <span class=\"token parameter\">$wp</span>\n * <span class=\"token keyword\">@since</span> 2.0.0\n */</span>\n<span class=\"token global\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'wp'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>$wp</code>の実態はclass WPのインスタンスだった.<br>\n<code>$wp->main( $query_vars )</code>とあったので、WPクラスのmainメソッドを見てみよう.<br>\nWPクラスは<code>wp-includes/class-wp.php</code>に定義されている.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n * Sets up all of the variables required by the WordPress environment.\n *\n * The action <span class=\"token punctuation\">{</span><span class=\"token keyword\">@see</span> 'wp'<span class=\"token punctuation\">}</span> has one parameter that references the WP object. It\n * allows for accessing the properties and methods to further manipulate the\n * object.\n *\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">array</span></span> <span class=\"token parameter\">$query_args</span> Passed to parse_request().\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query_args</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">parse_request</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query_args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">send_headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">query_posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">handle_404</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">register_globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * Fires once the WordPress environment has been set up.\n   *\n   * <span class=\"token keyword\">@since</span> 2.1.0\n   *\n   * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">WP</span> <span class=\"token parameter\">$this</span> Current WordPress environment instance (passed by reference).\n   */</span>\n  <span class=\"token function\">do_action_ref_array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'wp'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&#x26;</span><span class=\"token this keyword\">$this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ようやく実態が見えてきた. ここでそれぞれのメソッドを読みたい気持ちをこらえて、最後のフェーズ、<code>wp-includes/template-loader.php</code>を読んでいこう.</p>\n<h4 id=\"template-loaderphp\"><a href=\"#template-loaderphp\">template-loader.php</a></h4>\n<p>まず<code>do_action( 'template_redirect' )</code>が目につく.<br>\nコメントを見るとどのテンプレートを読むかを判断する命令を送っているようだ.<br>\n<code>do_action()</code>は命令に応じたアクションを呼び出す関数らしい. これも後で確認してみよう.</p>\n<p>読み進めると、elseifの分岐に圧倒されるが<code>is_</code>でリクエストされたページのタイプを判定して、それにあったテンプレートをレンダリングする関数を呼んでいるだけのようだ.<br>\n<code>is_</code>系の関数が全て引数を取っていないので、先の<code>main()</code>関数で読んでいた<br>\n<code>$this->register_globals()</code>でそれらの情報もグローバル変数に定義しているのだろう.</p>\n<p>ここまで読んだ流れをまとめると次のようになる.</p>\n<p></p><figure><img src=\"./img/2018-01-10.png\" alt=\"\"><figcaption>img.1 </figcaption></figure><p></p>\n<h4 id=\"終わりに\"><a href=\"#終わりに\">終わりに</a></h4>\n<p>これで予想も交えながらではあったが処理の流れをさらうことができた.<br>\n内容の確認よりも確認する手順を自分の思考とともに紹介することに重きをおいたので、課題がそのまま残っている. 良かったら読んで教えて欲しい.</p>\n<h3 id=\"reference\"><a href=\"#reference\">reference</a></h3>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><a href=\"https://ja.wikipedia.org/wiki/%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97#D%E5%9E%8B%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97\" rel=\"nofollow\">wikipedia</a> <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>WordPress/ver.4.9 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","description":"How to read source code with an example","commits":[{"title":"tweak ogp","date":"2021-04-22 15:12:31","hash":"cd43e57e","diff":"<div class=\"remark-highlight\"><pre data-file=\"cd43e57e.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit cd43e57eef247d695ae5d7ec91dd77bdd26b3d1d</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Thu Apr 22 15:12:31 2021 +0900\n\n  tweak ogp\n\ndiff --git a/_posts/2018-01-09-reading-wordpress.md b/_posts/2018-01-09-reading-wordpress.md\nindex f6c20d2..d0792b0 100644\n<span class=\"token deleted\">--- a/_posts/2018-01-09-reading-wordpress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-09-reading-wordpress.md</span>\n@@ -3,7 +3,7 @@ title: reading wordpress\ndate: 2018-01-09\ncategories:\n<span class=\"token deleted\">- Code Reading</span>\n<span class=\"token deleted\">-image: /img/2018-01-10-thumb.png</span>\n<span class=\"token inserted\">+image: 2018-01-10-thumb.png</span>\ntags:\n - Wordpress\ndescription: How to read source code with an example\n</code></pre></div>"},{"title":"tweak","date":"2021-04-22 01:20:00","hash":"fabe928f","diff":"<div class=\"remark-highlight\"><pre data-file=\"fabe928f.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit fabe928f5f60875b34ca333ba1bd5f4c21c143d1</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Thu Apr 22 01:20:00 2021 +0900\n\n  tweak\n\ndiff --git a/_posts/2018-01-09-reading-wordpress.md b/_posts/2018-01-09-reading-wordpress.md\nindex 4934b7f..f6c20d2 100644\n<span class=\"token deleted\">--- a/_posts/2018-01-09-reading-wordpress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-09-reading-wordpress.md</span>\n@@ -3,7 +3,7 @@ title: reading wordpress\ndate: 2018-01-09\ncategories:\n<span class=\"token deleted\">- Code Reading</span>\n<span class=\"token deleted\">-image: /assets/img/2018-01-10-thumb.png</span>\n<span class=\"token inserted\">+image: /img/2018-01-10-thumb.png</span>\ntags:\n - Wordpress\ndescription: How to read source code with an example\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-01-09-reading-wordpress.md b/_posts/2018-01-09-reading-wordpress.md\nnew file mode 100644\nindex 0000000..4934b7f\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-09-reading-wordpress.md</span>\n<span class=\"token coord\">@@ -0,0 +1,334 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: reading wordpress</span>\n<span class=\"token inserted\">+date: 2018-01-09</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Code Reading</span>\n<span class=\"token inserted\">+image: /assets/img/2018-01-10-thumb.png</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - Wordpress</span>\n<span class=\"token inserted\">+description: How to read source code with an example</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+友人からコードリーディングの方法について聞かれたので,僕自身もCSバックグラウンドではないけれどソースコードの読み方を説明しようと思う.  </span>\n<span class=\"token inserted\">+以下友人向け文体.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+途中でプロジェクトにアサインされた時、過去の自分のコードをリファクタリングする時、OSSのコードを読む時など、ある程度の規模のソースコードを読む機会があると思う.  </span>\n<span class=\"token inserted\">+サーバーだったりコマンドラインツールだったり,言語も責務も異なる様々なプログラムを読む際に一貫した読み方はあるのだろうか.</span>\n<span class=\"token inserted\">+完全な解はないと思うが、僕個人の経験からすると、</span>\n<span class=\"token inserted\">+- 抽象化・抽象度を意識すること</span>\n<span class=\"token inserted\">+- 読まないこと</span>\n<span class=\"token inserted\">+これらを意識するだけででソースコードはだいぶ読みやすくなる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+抽象化・抽象度を意識するとはどういうことか.</span>\n<span class=\"token inserted\">+具体的に言うと、自分が今、全体の処理の流れのうち、どの部分を読んでいるかを意識することである。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+僕らは普段プログラムを書くためにOSを使っているけれど、OSは実際どんなことをしてくれているのか.  </span>\n<span class=\"token inserted\">+プログラムをコンパイラに喰わせると実行可能なファイルを吐いてくれるけれど、内部ではなにをしているのか.  </span>\n<span class=\"token inserted\">+CPUはフリップフロップ[^1]という素子からできているし、フリップフロップは半導体からできている.  </span>\n<span class=\"token inserted\">+けれど、プログラムを組む上で僕らはそんなこと気にする必要がない.  </span>\n<span class=\"token inserted\">+これが抽象化である. 内部構造を隠蔽し、表に見えるのはユーザが触って良い部分だけ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+注意して欲しいのが、ここで言うユーザは必ずしも人間だけではないということ.  </span>\n<span class=\"token inserted\">+例えば実行中のプログラムがメモリの状態を知りたい時、直接メモリを参照するのは無理がある.</span>\n<span class=\"token inserted\">+実行中のプログラムからメモリまでには以下のような層がある.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">++-----+    +-----+    +-----------+    +---------+</span>\n<span class=\"token inserted\">+| mem | == | CPU | == | kernel/OS | == | program |</span>\n<span class=\"token inserted\">++-----+    +-----+    +-----------+    +---------+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ではどうするか. 見えないものは下の層が知っているかもしれない.</span>\n<span class=\"token inserted\">+OSにメモリの使用状況を尋ねる命令を送るのである.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+上の例では物理的に層が分かれていたので抽象化の区切りが分かりやすかったが、ソフトウェアの構成も同様に抽象化が行われている.  </span>\n<span class=\"token inserted\">+ソフトウェアのコードを読む時にも、自分が今メモリを見ているのかOSの命令を見ているのか、また隠蔽されている処理なのか、表に見えている部分なのか、どのレベルを見ているのかを意識することが必要なのがわかると思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に、読まないこと.</span>\n<span class=\"token inserted\">+これは**読むべき情報以外を読まない**という意味.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+全体像を知る、というのは全部を知ることではない. 上の話でも言ったように、基本的にソフトウェアは抽象化の繰り返しで構成されている.  </span>\n<span class=\"token inserted\">+つまり、自分が欲しい情報の層に立った時に、表に見える情報以外は読まなくていい.</span>\n<span class=\"token inserted\">+OSがどうなっているか知りたいのにメモリを分解してみてもどうにもならない.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+恐らくソースコードを読むことに慣れているエンジニアはこれらを無意識に行っている.</span>\n<span class=\"token inserted\">+そのため同じ抽象度のものを見る時に,自分の培ったパターンを当てはめることができ、更に自分がコードを書く際に、同様の設計で実装することが出来る.  </span>\n<span class=\"token inserted\">+プロジェクトが書けるエンジニアは読む力もある.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+以上を踏まえてWordPressのソースコード[^2]を読んでみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+まずなにを知りたいか.</span>\n<span class=\"token inserted\">+ここでは全体的な構成とCMSとしての処理の流れを把握することを目標としてみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+全体構成を把握する場合、複数の層の責務を把握する必要があるため、特に**読まない**ことが重要である.  </span>\n<span class=\"token inserted\">+コードを実際に読む前に、まずは公式サイトやリファレンスに書いていないか確認してみよう.</span>\n<span class=\"token inserted\">+リファレンスがダメならコメントだ. </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+公式に[ディレクトリ階層](http://wpdocs.osdn.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E9%9A%8E%E5%B1%A4)というページがある.   </span>\n<span class=\"token inserted\">+見てみるとこれは自作テーマにおけるディレクトリ階層のようだ. 今回はWordPress自体がどのように動作するのかを知りたいので、今回は素直にコードを読むしかなさそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+では実際にディレクトリ構成を見てみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```shell</span>\n<span class=\"token inserted\">+index.php</span>\n<span class=\"token inserted\">+license.txt</span>\n<span class=\"token inserted\">+readme.html</span>\n<span class=\"token inserted\">+wp-activate.php</span>\n<span class=\"token inserted\">+wp-blog-header.php</span>\n<span class=\"token inserted\">+wp-comments-post.php</span>\n<span class=\"token inserted\">+wp-config-sample.php</span>\n<span class=\"token inserted\">+wp-cron.php</span>\n<span class=\"token inserted\">+wp-links-opml.php</span>\n<span class=\"token inserted\">+wp-load.php</span>\n<span class=\"token inserted\">+wp-login.php</span>\n<span class=\"token inserted\">+wp-mail.php</span>\n<span class=\"token inserted\">+wp-settings.php</span>\n<span class=\"token inserted\">+wp-signup.php</span>\n<span class=\"token inserted\">+wp-trackback.php</span>\n<span class=\"token inserted\">+xmlrpc.php</span>\n<span class=\"token inserted\">+.</span>\n<span class=\"token inserted\">+├── wp-admin</span>\n<span class=\"token inserted\">+│   ├── css</span>\n<span class=\"token inserted\">+│   ├── images</span>\n<span class=\"token inserted\">+│   ├── includes</span>\n<span class=\"token inserted\">+│   ├── js</span>\n<span class=\"token inserted\">+│   ├── maint</span>\n<span class=\"token inserted\">+│   ├── network</span>\n<span class=\"token inserted\">+│   └── user</span>\n<span class=\"token inserted\">+├── wp-content</span>\n<span class=\"token inserted\">+│   ├── plugins</span>\n<span class=\"token inserted\">+│   ├── themes</span>\n<span class=\"token inserted\">+│   └index.php</span>\n<span class=\"token inserted\">+└── wp-includes</span>\n<span class=\"token inserted\">+    ├── certificates</span>\n<span class=\"token inserted\">+    ├── css</span>\n<span class=\"token inserted\">+    ├── customize</span>\n<span class=\"token inserted\">+    ├── fonts</span>\n<span class=\"token inserted\">+    ├── ID3</span>\n<span class=\"token inserted\">+    ├── images</span>\n<span class=\"token inserted\">+    ├── IXR</span>\n<span class=\"token inserted\">+    ├── js</span>\n<span class=\"token inserted\">+    ├── pomo</span>\n<span class=\"token inserted\">+    ├── random_compat</span>\n<span class=\"token inserted\">+    ├── Requests</span>\n<span class=\"token inserted\">+    ├── rest-api</span>\n<span class=\"token inserted\">+    ├── SimplePie</span>\n<span class=\"token inserted\">+    ├── Text</span>\n<span class=\"token inserted\">+    ├── theme-compat</span>\n<span class=\"token inserted\">+    ├── widgets</span>\n<span class=\"token inserted\">+    └...</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+28 directories</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+構成を見つつ、このうちどれが読まなくてもいいものか考えてみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+まず`wp-admin/`. これは管理者パネル用のディレクトリだろう. CMSとしてはとりあえず読まなくても良さそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に`wp-content/`配下. `plugins/`, `themes/`は それぞれユーザインストールのプラグインとテーマ用のディレクトリだろうか.  </span>\n<span class=\"token inserted\">+`index.php`はルートディレクトリにもあったがどちらがエントリーポイントになるのだろう. テーマを読み込む処理はルーティング後に行われるだろうからとりあえずは後回しにしよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最後に`wp-includes`はどうだろう.  </span>\n<span class=\"token inserted\">+大抵`includes/`ディレクトリにはシステムで利用するライブラリ等が置かれる. 読むのは必要な機能が出てきてからで良さそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+つまり最初に読む必要があるのはこれらになりそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```shell</span>\n<span class=\"token inserted\">+$ tree -I 'wp-includes|wp-admin|themes|plugins|licence|readme'</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+├── index.php</span>\n<span class=\"token inserted\">+├── wp-activate.php</span>\n<span class=\"token inserted\">+├── wp-blog-header.php</span>\n<span class=\"token inserted\">+├── wp-comments-post.php</span>\n<span class=\"token inserted\">+├── wp-config-sample.php</span>\n<span class=\"token inserted\">+├── wp-content</span>\n<span class=\"token inserted\">+│   └── index.php</span>\n<span class=\"token inserted\">+├── wp-cron.php</span>\n<span class=\"token inserted\">+├── wp-links-opml.php</span>\n<span class=\"token inserted\">+├── wp-load.php</span>\n<span class=\"token inserted\">+├── wp-login.php</span>\n<span class=\"token inserted\">+├── wp-mail.php</span>\n<span class=\"token inserted\">+├── wp-settings.php</span>\n<span class=\"token inserted\">+├── wp-signup.php</span>\n<span class=\"token inserted\">+├── wp-trackback.php</span>\n<span class=\"token inserted\">+└── xmlrpc.php</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1 directory, 17 files</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+では実際の処理の流れを追っていこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+大抵WordPressはApacheやNginx等のウェブサーバを介してPHP-FPMやFastCGIを用いてホスティングされる.  </span>\n<span class=\"token inserted\">+Apacheであれば`DirectoryIndex`, Nginxであれば`http`ディレクティブ内の`index`に、ウェブサーバにアクセスがあった時に最初にアクセスされるファイルが指定されている.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```nginx</span>\n<span class=\"token inserted\">+# nginx.conf</span>\n<span class=\"token inserted\">+http {</span>\n<span class=\"token inserted\">+  # ...</span>\n<span class=\"token inserted\">+  index                index.php index.html index.htm;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なので`/index.php`が最初に読み込まれる.</span>\n<span class=\"token inserted\">+処理より流れを把握することを意識して実際に読んでいこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/* index.php */</span>\n<span class=\"token inserted\">+define('WP_USE_THEMES', true);</span>\n<span class=\"token inserted\">+require( dirname(__FILE__).'/wp-blog-header.php');</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`index.php`では定数を定義して、`wp-blog-header.php`を読み込んでいる.</span>\n<span class=\"token inserted\">+では`wp-blog-header.php`を見てみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/* wp-blog-header.php */</span>\n<span class=\"token inserted\">+/* Loads the WordPress environment and template. */</span>\n<span class=\"token inserted\">+if (!isset($wp_did_header)) {</span>\n<span class=\"token inserted\">+  $wp_did_header = true;</span>\n<span class=\"token inserted\">+  /* Load the WordPress library. */</span>\n<span class=\"token inserted\">+  require_once( dirname(__FILE__) . '/wp-load.php' );</span>\n<span class=\"token inserted\">+  /* Set up the WordPress query. */</span>\n<span class=\"token inserted\">+  wp();</span>\n<span class=\"token inserted\">+  /* Load the theme template. */</span>\n<span class=\"token inserted\">+  require_once( ABSPATH . WPINC . '/template-loader.php' );</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+&#x26;gt; Loads the WordPress environment and template.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+とあるので、`wp-load.php`が\"environment\"、定数やデータベースの設定を、`template-loader.php`が\"template\"、`wp-contents/themes`のテーマテンプレートをロードするファイルなのだろう.  </span>\n<span class=\"token inserted\">+では`wp()`は? `wp()`を呼ぶ前にインクルードしたファイルは`wp-load.php`しかないので、ここで定義されているのだろう.  </span>\n<span class=\"token inserted\">+そして\"Set up the WordPress query.\"とはどういうことだろう.  </span>\n<span class=\"token inserted\">+順に追っていこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### wp-load.php</span>\n<span class=\"token inserted\">+コメントを読むと</span>\n<span class=\"token inserted\">+- ABSPATHの定義</span>\n<span class=\"token inserted\">+- `wp-config.php`, `wp-settings.php`のロード</span>\n<span class=\"token inserted\">+  - ファイルが存在しなければセットアップするように表示する</span>\n<span class=\"token inserted\">+と書いてある.</span>\n<span class=\"token inserted\">+セットアップ時のエラーハンドリングもCMSの機能としては本質ではないので、ここもコメントを読んでこれくらいで次に進むようにしよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### wp-config.php</span>\n<span class=\"token inserted\">+これは初期状態では存在しない. `wp-config-sample.php`をベースにセットアップ時に作成されるようだ.</span>\n<span class=\"token inserted\">+このファイルでは</span>\n<span class=\"token inserted\">+- MySQL settings</span>\n<span class=\"token inserted\">+- Secret Keys</span>\n<span class=\"token inserted\">+- Database table prefix</span>\n<span class=\"token inserted\">+- ABSPATH</span>\n<span class=\"token inserted\">+の定義がされるようだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`wp-load.php`でABSPATHの定義をしたはずなのに、どうしてまた定義するのだろうか?</span>\n<span class=\"token inserted\">+とりあえず全体像を確認するためにこれは置いておこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### wp-settings.php</span>\n<span class=\"token inserted\">+トップレベルコメントには、</span>\n<span class=\"token inserted\">+&#x26;gt; Used to set up and fix common variables and include the WordPress procedural and class library</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+とあるので、基本的な関数やクラスのロードが行われるのだろう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に進みたいけれどまだ`wp()`が見つかっていない. 恐らく`wp-settings.php`で読み込んでいるファイルのどれかに定義されているのだろう.   </span>\n<span class=\"token inserted\">+ただこの量の`require`文を全て読んでいくのはしんどい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+こんな時は**タグジャンプ**を使ってみよう.  </span>\n<span class=\"token inserted\">+タグジャンプとは、ctagsを用いてソースコードを静的解析し、定義元のファイルを開く方法である.</span>\n<span class=\"token inserted\">+VimやSublime Textのプラグインとして公開されているものがあるので使ってみよう.</span>\n<span class=\"token inserted\">+もちろんgrepでもいい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+そうして`wp-includes/functions.php`に`wp()`を見つけた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * Set up the WordPress query.</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @since 2.0.0</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @global WP       $wp_locale</span>\n<span class=\"token inserted\">+ * @global WP_Query $wp_query</span>\n<span class=\"token inserted\">+ * @global WP_Query $wp_the_query</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @param string|array $query_vars Default WP_Query arguments.</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+function wp( $query_vars = '' ) {</span>\n<span class=\"token inserted\">+  global $wp, $wp_query, $wp_the_query;</span>\n<span class=\"token inserted\">+  $wp-&#x26;gt;main( $query_vars );</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  if ( !isset($wp_the_query) )</span>\n<span class=\"token inserted\">+    $wp_the_query = $wp_query;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なるほど、この`$wp`がメインのオブジェクトなのだろう.   </span>\n<span class=\"token inserted\">+@globalとあるので、`$GLOBALS['wp']`を定義している箇所を探してみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+// wp-settings.php</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * WordPress Object</span>\n<span class=\"token inserted\">+ * @global WP $wp</span>\n<span class=\"token inserted\">+ * @since 2.0.0</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+$GLOBALS['wp'] = new WP();</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`$wp`の実態はclass WPのインスタンスだった.  </span>\n<span class=\"token inserted\">+`$wp-&#x26;gt;main( $query_vars )`とあったので、WPクラスのmainメソッドを見てみよう.  </span>\n<span class=\"token inserted\">+WPクラスは`wp-includes/class-wp.php`に定義されている.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * Sets up all of the variables required by the WordPress environment.</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * The action {@see 'wp'} has one parameter that references the WP object. It</span>\n<span class=\"token inserted\">+ * allows for accessing the properties and methods to further manipulate the</span>\n<span class=\"token inserted\">+ * object.</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @param string|array $query_args Passed to parse_request().</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+public function main($query_args = '') {</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;init();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;parse_request($query_args);</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;send_headers();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;query_posts();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;handle_404();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;register_globals();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /**</span>\n<span class=\"token inserted\">+   * Fires once the WordPress environment has been set up.</span>\n<span class=\"token inserted\">+   *</span>\n<span class=\"token inserted\">+   * @since 2.1.0</span>\n<span class=\"token inserted\">+   *</span>\n<span class=\"token inserted\">+   * @param WP $this Current WordPress environment instance (passed by reference).</span>\n<span class=\"token inserted\">+   */</span>\n<span class=\"token inserted\">+  do_action_ref_array( 'wp', array( &#x26;$this ) );</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ようやく実態が見えてきた. ここでそれぞれのメソッドを読みたい気持ちをこらえて、最後のフェーズ、`wp-includes/template-loader.php`を読んでいこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### template-loader.php</span>\n<span class=\"token inserted\">+まず`do_action( 'template_redirect' )`が目につく.   </span>\n<span class=\"token inserted\">+コメントを見るとどのテンプレートを読むかを判断する命令を送っているようだ.   </span>\n<span class=\"token inserted\">+`do_action()`は命令に応じたアクションを呼び出す関数らしい. これも後で確認してみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+読み進めると、elseifの分岐に圧倒されるが`is_`でリクエストされたページのタイプを判定して、それにあったテンプレートをレンダリングする関数を呼んでいるだけのようだ.   </span>\n<span class=\"token inserted\">+`is_`系の関数が全て引数を取っていないので、先の`main()`関数で読んでいた  </span>\n<span class=\"token inserted\">+`$this-&#x26;gt;register_globals()`でそれらの情報もグローバル変数に定義しているのだろう.</span>\n<span class=\"token inserted\">+  </span>\n<span class=\"token inserted\">+ここまで読んだ流れをまとめると次のようになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+![](./img/2018-01-10.png)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 終わりに</span>\n<span class=\"token inserted\">+これで予想も交えながらではあったが処理の流れをさらうことができた.  </span>\n<span class=\"token inserted\">+内容の確認よりも確認する手順を自分の思考とともに紹介することに重きをおいたので、課題がそのまま残っている. 良かったら読んで教えて欲しい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### reference</span>\n<span class=\"token inserted\">+[^1]: [wikipedia](https://ja.wikipedia.org/wiki/%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97#D%E5%9E%8B%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^2]: WordPress/ver.4.9</span>\n</code></pre></div>"}],"publishedAt":"2018-01-09","updatedAt":"2021-04-22"},{"slug":"2017-11-07-github-api","title":"memo:GitHub API & Serde.rs","categories":["memo"],"image":"https://koka831.github.io/img/icon.png","tags":["Rust","GitHub"],"content":"<p>Rusk/Task Manager in Rust の作成log.</p>\n<p>Rust とTask から命名</p>\n<h2 id=\"motivation\"><a href=\"#motivation\"><span class=\"olive\">Motivation</span></a></h2>\n<p>Googleカレンダーで主にスケジュール・タスク管理をしてたのだけど、\n色々と不満点があったので小さいCLIツールを作ることにした。</p>\n<ul>\n<li>Web上でGoogle ToDoリストを作成するまでの導線が長い</li>\n<li>ToDoにタグ付けしたい &#x26; Tag毎に確認したい</li>\n<li>ターミナルからも見たい</li>\n</ul>\n<p>Task管理する上で欲しい項目/機能をリストアップ。</p>\n<h4 id=\"項目\"><a href=\"#項目\">項目</a></h4>\n<ul>\n<li>task/name</li>\n<li>description</li>\n<li>tag(s)</li>\n<li>deadline</li>\n</ul>\n<h4 id=\"機能\"><a href=\"#機能\">機能</a></h4>\n<ul>\n<li>CRUD</li>\n<li>Notification</li>\n<li>ターミナル/Web(スマホ)両方から確認したい</li>\n</ul>\n<p>で、上記を一番楽に実装しようと考えた結果、GitHubのレポジトリを立てToDoをIssueとして管理することにした。<br>\nデータ構造としてのタスクの項目が多いので、ToDoの作成は主にWebから。CLIから作成する場合はinteractiveな感じに。</p>\n<h2 id=\"approach\"><a href=\"#approach\"><span class=\"olive\">Approach</span></a></h2>\n<p>Rustの<a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow\">hyper</a>を使ってhttpクライアントを作成。\nhyper単体だとTLS対応していないので、<a href=\"https://github.com/hyperium/hyper-tls\" rel=\"nofollow\">hyper-tls</a>をコネクタに利用した。<br>\nCLIには<a href=\"https://github.com/TeXitoi/structopt\" rel=\"nofollow\">structopt</a>を用いてCRUD操作をenumとstructでいい感じに。\n出力の整形は<a href=\"https://github.com/phsym/prettytable-rs\" rel=\"nofollow\">prettytable-rs</a>を使用。OSS様様。</p>\n<p>GitHubのAPIコールは<a href=\"https://github.com/settings/tokens\" rel=\"nofollow\">ここ</a>から発行できる<code>personal access token</code>をヘッダに付与するだけで、curlでも簡単に呼べる。<br>\nレポジトリのissue一覧を叩くと以下のようにissueに対してユーザ情報、ラベルリストが入れ子構造になって返される。</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: token <span class=\"token variable\">$GITHUB_API_TOKEN</span>\"</span> <a href=\"https://api.github.com/repos/koka831/todo/issues\" class=\"token url-link\" rel=\"nofollow\">https://api.github.com/repos/koka831/todo/issues</a>\n\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"url\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<a href=\"https://api.github.com/repos/...\" class=\"token url-link\" rel=\"nofollow\">https://api.github.com/repos/...</a>\"</span>,\n    <span class=\"token punctuation\">..</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">271094185</span>,\n    <span class=\"token string\">\"number\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,\n    <span class=\"token string\">\"title\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hoge\"</span>,\n    <span class=\"token string\">\"user\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"login\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"koka831\"</span>,\n      <span class=\"token punctuation\">..</span>.\n    <span class=\"token punctuation\">}</span>,\n    <span class=\"token string\">\"labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">..</span>.\n        <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ToDo\"</span>,\n        <span class=\"token string\">\"color\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3778ba\"</span>,\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"state\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"open\"</span>,\n    <span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">}</span>, <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>同じことをhyperからもやってみると、403/Forbiddenが返される。\n<a href=\"https://developer.github.com/v3/#user-agent-required\" rel=\"nofollow\">reference</a>を読み直すとUserAgentが必須とのこと。</p>\n<blockquote>\n<p>All API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected.</p>\n</blockquote>\n<p>したがって最小限必要なheaderは以下の２つ。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">User-Agent: app/1.0\nAuthorization: token $TOKEN</code></pre></div>\n<p>２つ目の<code>Authorization</code>の書式が曲者で、<code>token</code>とトークン文字列の間の<strong>スペースが２つあっても</strong><code>Bad credentials</code>となる。</p>\n<p>hyperで独自ヘッダを付与する際には、hyperのマクロが便利。\nAuthorizationのheader生成関数を作成して、TLSコネクタベースのHttpClientに渡す。\nClientサイドなのでシングルスレッドで。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">hyper<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">hyper<span class=\"token punctuation\">::</span>header<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">UserAgent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">hyper_tls<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HttpsConnector</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">tokio_core<span class=\"token punctuation\">::</span>reactor<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Core</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token macro property\">header!</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Authorization\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> auth_header <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token {}\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> req <span class=\"token operator\">=</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Get</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">headers_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserAgent</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">headers_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">(</span>auth_header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// setup client</span>\n<span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> core<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">::</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// creates connector with 1 thread</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">connector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpsConnector</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>取得したIssueリストはdeserializeしてstructに落としこむ。<br>\nとりあえずの構造体を作ってserde-jsonとすり合わせようと思っていたのだけど、\n構造体のkeyをjsonのkeyと合わせておくだけでそのままシリアライズしてくれた。\n今回はv3のREST APIを使ったけど、struct/enumのSerializerとGraphQLも相性がいいと思う。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Issue</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n  number<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n  labels<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Label</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Label</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> color<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    default<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// send request</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">and_then</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>res<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">and_then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>body<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> v<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Issue</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncore<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2 id=\"todo\"><a href=\"#todo\"><span class=\"olive\">ToDo</span></a></h2>\n<ul>\n<li>APIコールが1~2secかかるのでその間スピナーアイコン表示したい</li>\n<li>rusk + fzf + vimでタスクをシームレスに編集できるように\n<ul>\n<li>CLI側のメモは後日fzf+vimインターフェースと合わせて</li>\n</ul>\n</li>\n</ul>","description":"\nRusk/Task Manager in Rust の作成log.\n\nRust とTask から命名\n## <span class=\"olive\">Motivation</span>\nGoogleカ...","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2017-11-07-github-api.md b/_posts/2017-11-07-github-api.md\nnew file mode 100644\nindex 0000000..032f57e\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2017-11-07-github-api.md</span>\n<span class=\"token coord\">@@ -0,0 +1,151 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: memo:GitHub API &#x26; Serde.rs</span>\n<span class=\"token inserted\">+date: 2017-11-07</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- memo</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Rust</span>\n<span class=\"token inserted\">+- GitHub</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Rusk/Task Manager in Rust の作成log.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Rust とTask から命名</span>\n<span class=\"token inserted\">+## &#x26;lt;span class=\"olive\"&#x26;gt;Motivation&#x26;lt;/span&#x26;gt;</span>\n<span class=\"token inserted\">+Googleカレンダーで主にスケジュール・タスク管理をしてたのだけど、</span>\n<span class=\"token inserted\">+色々と不満点があったので小さいCLIツールを作ることにした。  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- Web上でGoogle ToDoリストを作成するまでの導線が長い</span>\n<span class=\"token inserted\">+- ToDoにタグ付けしたい &#x26; Tag毎に確認したい</span>\n<span class=\"token inserted\">+- ターミナルからも見たい</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Task管理する上で欲しい項目/機能をリストアップ。  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 項目</span>\n<span class=\"token inserted\">+- task/name</span>\n<span class=\"token inserted\">+- description</span>\n<span class=\"token inserted\">+- tag(s)</span>\n<span class=\"token inserted\">+- deadline</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 機能</span>\n<span class=\"token inserted\">+- CRUD</span>\n<span class=\"token inserted\">+- Notification</span>\n<span class=\"token inserted\">+- ターミナル/Web(スマホ)両方から確認したい</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+で、上記を一番楽に実装しようと考えた結果、GitHubのレポジトリを立てToDoをIssueとして管理することにした。  </span>\n<span class=\"token inserted\">+データ構造としてのタスクの項目が多いので、ToDoの作成は主にWebから。CLIから作成する場合はinteractiveな感じに。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## &#x26;lt;span class=\"olive\"&#x26;gt;Approach&#x26;lt;/span&#x26;gt;</span>\n<span class=\"token inserted\">+Rustの[hyper](https://github.com/hyperium/hyper)を使ってhttpクライアントを作成。</span>\n<span class=\"token inserted\">+hyper単体だとTLS対応していないので、[hyper-tls](https://github.com/hyperium/hyper-tls)をコネクタに利用した。  </span>\n<span class=\"token inserted\">+CLIには[structopt](https://github.com/TeXitoi/structopt)を用いてCRUD操作をenumとstructでいい感じに。</span>\n<span class=\"token inserted\">+出力の整形は[prettytable-rs](https://github.com/phsym/prettytable-rs)を使用。OSS様様。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+GitHubのAPIコールは[ここ](https://github.com/settings/tokens)から発行できる`personal access token`をヘッダに付与するだけで、curlでも簡単に呼べる。  </span>\n<span class=\"token inserted\">+レポジトリのissue一覧を叩くと以下のようにissueに対してユーザ情報、ラベルリストが入れ子構造になって返される。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+curl -H \"Authorization: token $GITHUB_API_TOKEN\" https://api.github.com/repos/koka831/todo/issues</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[</span>\n<span class=\"token inserted\">+  {</span>\n<span class=\"token inserted\">+    \"url\": \"https://api.github.com/repos/...\",</span>\n<span class=\"token inserted\">+    ..</span>\n<span class=\"token inserted\">+    \"id\": 271094185,</span>\n<span class=\"token inserted\">+    \"number\": 2,</span>\n<span class=\"token inserted\">+    \"title\": \"hoge\",</span>\n<span class=\"token inserted\">+    \"user\": {</span>\n<span class=\"token inserted\">+      \"login\": \"koka831\",</span>\n<span class=\"token inserted\">+      ...</span>\n<span class=\"token inserted\">+    },</span>\n<span class=\"token inserted\">+    \"labels\": [</span>\n<span class=\"token inserted\">+      {</span>\n<span class=\"token inserted\">+        \"id\": ...</span>\n<span class=\"token inserted\">+        \"name\": \"ToDo\",</span>\n<span class=\"token inserted\">+        \"color\": \"3778ba\",</span>\n<span class=\"token inserted\">+      }</span>\n<span class=\"token inserted\">+    ],</span>\n<span class=\"token inserted\">+    \"state\": \"open\",</span>\n<span class=\"token inserted\">+    ...</span>\n<span class=\"token inserted\">+  }, ...</span>\n<span class=\"token inserted\">+]</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+同じことをhyperからもやってみると、403/Forbiddenが返される。</span>\n<span class=\"token inserted\">+[reference](https://developer.github.com/v3/#user-agent-required)を読み直すとUserAgentが必須とのこと。</span>\n<span class=\"token inserted\">+&#x26;gt; All API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected. </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがって最小限必要なheaderは以下の２つ。</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+User-Agent: app/1.0</span>\n<span class=\"token inserted\">+Authorization: token $TOKEN</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+２つ目の`Authorization`の書式が曲者で、`token`とトークン文字列の間の**スペースが２つあっても**`Bad credentials`となる。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+hyperで独自ヘッダを付与する際には、hyperのマクロが便利。</span>\n<span class=\"token inserted\">+Authorizationのheader生成関数を作成して、TLSコネクタベースのHttpClientに渡す。</span>\n<span class=\"token inserted\">+Clientサイドなのでシングルスレッドで。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+use hyper::{Client, Method, Request};</span>\n<span class=\"token inserted\">+use hyper::header::UserAgent;</span>\n<span class=\"token inserted\">+use hyper_tls::HttpsConnector;</span>\n<span class=\"token inserted\">+use tokio_core::reactor::Core;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+// ...</span>\n<span class=\"token inserted\">+header! { ( Authorization, \"Authorization\" ) =&#x26;gt; [String] }</span>\n<span class=\"token inserted\">+let auth_header = format!(\"token {}\", token);</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+let mut req = Request::new(Method::Get, url);</span>\n<span class=\"token inserted\">+req.headers_mut().set(UserAgent::new(\"todo\"));</span>\n<span class=\"token inserted\">+req.headers_mut().set(Authorization(auth_header));</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+// setup client</span>\n<span class=\"token inserted\">+let handle = core.handle();</span>\n<span class=\"token inserted\">+let client = Client::configure()</span>\n<span class=\"token inserted\">+  // creates connector with 1 thread</span>\n<span class=\"token inserted\">+  .connector(HttpsConnector::new(1, &#x26;handle).unwrap())</span>\n<span class=\"token inserted\">+  .build(&#x26;handle);</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+取得したIssueリストはdeserializeしてstructに落としこむ。  </span>\n<span class=\"token inserted\">+とりあえずの構造体を作ってserde-jsonとすり合わせようと思っていたのだけど、</span>\n<span class=\"token inserted\">+構造体のkeyをjsonのkeyと合わせておくだけでそのままシリアライズしてくれた。</span>\n<span class=\"token inserted\">+今回はv3のREST APIを使ったけど、struct/enumのSerializerとGraphQLも相性がいいと思う。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token inserted\">+struct Issue {</span>\n<span class=\"token inserted\">+  id: u32,</span>\n<span class=\"token inserted\">+  number: u8,</span>\n<span class=\"token inserted\">+  title: String,</span>\n<span class=\"token inserted\">+  labels: Vec&#x26;lt;Label&#x26;gt;,</span>\n<span class=\"token inserted\">+  state: String,</span>\n<span class=\"token inserted\">+  body: String</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token inserted\">+pub struct Label {</span>\n<span class=\"token inserted\">+    id: u32,</span>\n<span class=\"token inserted\">+    pub name: String,</span>\n<span class=\"token inserted\">+    pub color: String,</span>\n<span class=\"token inserted\">+    default: bool,</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+// ...</span>\n<span class=\"token inserted\">+// send request</span>\n<span class=\"token inserted\">+let res = client.request(req)</span>\n<span class=\"token inserted\">+  .and_then(|res| { res.body().concat2()</span>\n<span class=\"token inserted\">+  .and_then(move |body| {</span>\n<span class=\"token inserted\">+    let v: Vec&#x26;lt;Issue&#x26;gt; = serde_json::from_slice(&#x26;body).unwrap();</span>\n<span class=\"token inserted\">+    Ok(v)</span>\n<span class=\"token inserted\">+  })</span>\n<span class=\"token inserted\">+});</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+core.run(res).unwrap()</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## &#x26;lt;span class=\"olive\"&#x26;gt;ToDo&#x26;lt;/span&#x26;gt;</span>\n<span class=\"token inserted\">+- APIコールが1~2secかかるのでその間スピナーアイコン表示したい</span>\n<span class=\"token inserted\">+- rusk + fzf + vimでタスクをシームレスに編集できるように</span>\n<span class=\"token inserted\">+  - CLI側のメモは後日fzf+vimインターフェースと合わせて</span>\n</code></pre></div>"}],"publishedAt":"2017-11-07","updatedAt":"2021-01-30"}]},"__N_SSG":true}