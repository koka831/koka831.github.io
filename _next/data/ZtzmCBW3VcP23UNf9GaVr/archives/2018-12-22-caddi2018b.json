{"pageProps":{"post":{"slug":"2018-12-22-caddi2018b","title":"CADDi2018","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder"],"content":"<p>CADDi 2018 for Beginners の参加記録。</p>\n<h2 id=\"a---1222\"><a href=\"#a---1222\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A - 12/22</a></a></h2>\n<p>与えられる数字の中に<code>2</code>がいくつあるか.\n数字を一桁毎に走査していくのはしんどいので, 文字の配列として扱うのが吉.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'2'</span> <span class=\"token punctuation\">{</span> cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"b---atcoder-alloy\"><a href=\"#b---atcoder-alloy\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">B - AtCoder Alloy</a></a></h2>\n<p>N枚の板のうち<code>H * W</code>の大きさが切り出せるものは何枚あるか.<br>\n今回は<code>H * W</code>を<code>W * H</code>にしてはいけないことに注意したくらい.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>h_i<span class=\"token punctuation\">,</span> w_i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> h_i <span class=\"token operator\">>=</span> h <span class=\"token operator\">&#x26;&#x26;</span> w_i <span class=\"token operator\">>=</span> w <span class=\"token punctuation\">{</span> ans <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c---product-and-gcd\"><a href=\"#c---product-and-gcd\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C - Product and GCD</a></a></h2>\n<p>n個の整数からなる配列があって,その要素数と積が与えられる<code>(N, P)</code>.<br>\n各要素の最大公約数として考えられるもののうち, 最も大きいものを求める.</p>\n<p>配列<code>an</code>が<code>x</code>を公約数にもつ ←→ <code>an</code>の各要素は<code>x</code>を約数に持っている<br>\nなので, <code>an</code>を素因数分解して, <code>n</code>個以上ある素因数の積が答えになる.</p>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> hm <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 素因数分解してhashmapにいれる</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">/=</span> f<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>hm<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">*</span>hm<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> hm<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 因数kが2n個以上あったときにk^xする(2敗)</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">>=</span> <span class=\"token operator\">&#x26;</span>n <span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">*=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">divide</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">2</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">(</span>n <span class=\"token keyword\">as</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u64</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"d---harlequin\"><a href=\"#d---harlequin\"><a href=\"https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D - Harlequin</a></a></h2>\n<p>格子の交点を横線または点でなぞって、最後の点をなぞった人の勝ち.\nお互いに最善手をとる前提で実験してみる.<br>\nやった実験は</p>\n<ul>\n<li><code>2 * 2</code></li>\n<li>↑を横にのばす</li>\n<li>↑を縦にのばす</li>\n<li>↑を合成したやつ\nの4パターン.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o\no o</code></pre></div>\n<p>のように<code>2*2</code>の格子があった場合, 先手の取り得る点は1か2.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o\nx o</code></pre></div>\n<p>のように一つとった場合, 後手は同列の点を一つとればよい.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">x o\nx o</code></pre></div>\n<p>また, 2つとった場合 後手はそのまま2つ取って勝ち.</p>\n<p>次に<code>2 * k</code>のように引き伸ばした場合.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o o ..... o o\no o o ..... o o</code></pre></div>\n<p>これについても<code>2 * 2</code>の場合と同様で, 先手のとった数だけ後手もとれば負けることはない(最終的に<code>2 * 2</code>に帰着するので).</p>\n<p>では<code>k * 2</code>の場合はどうか.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">o o\no o\n...\no o</code></pre></div>\n<p>これまでの実験から, <code>2 * k</code>の形に持ち込んだら勝敗がきまることがわかったので, そうしない立ち回りを行なえば良い.\n<code>k</code>が偶数の場合, 後手の勝ち. <code>k</code>が奇数の場合, 先手の勝ち.</p>\n<p>最後に一般形を考える.\n元の問題では<code>1 4 5 2 4</code>のようにランダムに並んでるけどソートしてしまっても問題ない.\nすると<code>n * (偶数)</code>の形をつくるかどうか, になるので,初期配置の各列の偶奇を判断すればよい.</p>\n<h3 id=\"解答-3\"><a href=\"#解答-3\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> an <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        an<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> an<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>a<span class=\"token closure-punctuation punctuation\">|</span></span> a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"所感\"><a href=\"#所感\">所感</a></h3>\n<p>一番よかったとき(!)\n<figure><img src=\"./img/caddi2018b.png\" alt=\"\"><figcaption>img.1 </figcaption></figure>\n(結果は31位)</p>\n<p>Dの考察をスムーズに行なえたのに, Cでの2WAがもったいない.\nデバッグを如何にやるかが課題っぽい.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-12-22-caddi2018b.md b/_posts/2018-12-22-caddi2018b.md\nnew file mode 100644\nindex 0000000..2225289\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-12-22-caddi2018b.md</span>\n<span class=\"token coord\">@@ -0,0 +1,191 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: CADDi2018</span>\n<span class=\"token inserted\">+date: 2018-12-15</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+CADDi 2018 for Beginners の参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [A - 12/22](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+与えられる数字の中に`2`がいくつあるか.</span>\n<span class=\"token inserted\">+数字を一桁毎に走査していくのはしんどいので, 文字の配列として扱うのが吉.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;String&#x26;gt;().chars().collect::&#x26;lt;Vec&#x26;lt;char&#x26;gt;&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut cnt = 0;</span>\n<span class=\"token inserted\">+    for c in n {</span>\n<span class=\"token inserted\">+        if c == '2' { cnt += 1; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    println!(\"{}\", cnt);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B - AtCoder Alloy](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018b_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+N枚の板のうち`H * W`の大きさが切り出せるものは何枚あるか.  </span>\n<span class=\"token inserted\">+今回は`H * W`を`W * H`にしてはいけないことに注意したくらい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, h, w) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1], i[2])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+    let mut ans = 0;</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let (h_i, w_i) = {</span>\n<span class=\"token inserted\">+            let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+            (i[0], i[1])</span>\n<span class=\"token inserted\">+        };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if h_i &#x26;gt;= h &#x26;&#x26; w_i &#x26;gt;= w { ans += 1; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C - Product and GCD](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+n個の整数からなる配列があって,その要素数と積が与えられる`(N, P)`.  </span>\n<span class=\"token inserted\">+各要素の最大公約数として考えられるもののうち, 最も大きいものを求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+配列`an`が`x`を公約数にもつ ←→ `an`の各要素は`x`を約数に持っている  </span>\n<span class=\"token inserted\">+なので, `an`を素因数分解して, `n`個以上ある素因数の積が答えになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, p) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;u64&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut hm = HashMap::new();</span>\n<span class=\"token inserted\">+    let mut x = p;</span>\n<span class=\"token inserted\">+    // 素因数分解してhashmapにいれる</span>\n<span class=\"token inserted\">+    while let Some(f) = divide(x) {</span>\n<span class=\"token inserted\">+        x /= f;</span>\n<span class=\"token inserted\">+        *hm.entry(f).or_insert(0) += 1;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    *hm.entry(x).or_insert(0) += 1;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ans: u64 = 1;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for (k, v) in hm.iter() {</span>\n<span class=\"token inserted\">+        // 因数kが2n個以上あったときにk^xする(2敗)</span>\n<span class=\"token inserted\">+        if v &#x26;gt;= &#x26;n {</span>\n<span class=\"token inserted\">+            ans *= k.pow((v / n) as u32);</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+fn divide(n: u64) -&#x26;gt; Option&#x26;lt;u64&#x26;gt; {</span>\n<span class=\"token inserted\">+    for i in 2..(n as f64).sqrt().ceil() as u64 + 2 {</span>\n<span class=\"token inserted\">+        if n % i == 0 {</span>\n<span class=\"token inserted\">+            return Some(i);</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    } </span>\n<span class=\"token inserted\">+    return None;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [D - Harlequin](https://caddi2018b.contest.atcoder.jp/tasks/caddi2018_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+格子の交点を横線または点でなぞって、最後の点をなぞった人の勝ち.</span>\n<span class=\"token inserted\">+お互いに最善手をとる前提で実験してみる.  </span>\n<span class=\"token inserted\">+やった実験は</span>\n<span class=\"token inserted\">+- `2 * 2`</span>\n<span class=\"token inserted\">+- ↑を横にのばす</span>\n<span class=\"token inserted\">+- ↑を縦にのばす</span>\n<span class=\"token inserted\">+- ↑を合成したやつ</span>\n<span class=\"token inserted\">+の4パターン.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+のように`2*2`の格子があった場合, 先手の取り得る点は1か2.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+x o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+のように一つとった場合, 後手は同列の点を一つとればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+x o</span>\n<span class=\"token inserted\">+x o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また, 2つとった場合 後手はそのまま2つ取って勝ち.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に`2 * k`のように引き伸ばした場合.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o o ..... o o</span>\n<span class=\"token inserted\">+o o o ..... o o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これについても`2 * 2`の場合と同様で, 先手のとった数だけ後手もとれば負けることはない(最終的に`2 * 2`に帰着するので).  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+では`k * 2`の場合はどうか.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+...</span>\n<span class=\"token inserted\">+o o</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これまでの実験から, `2 * k`の形に持ち込んだら勝敗がきまることがわかったので, そうしない立ち回りを行なえば良い.</span>\n<span class=\"token inserted\">+`k`が偶数の場合, 後手の勝ち. `k`が奇数の場合, 先手の勝ち.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最後に一般形を考える.</span>\n<span class=\"token inserted\">+元の問題では`1 4 5 2 4`のようにランダムに並んでるけどソートしてしまっても問題ない.</span>\n<span class=\"token inserted\">+すると`n * (偶数)`の形をつくるかどうか, になるので,初期配置の各列の偶奇を判断すればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut an = Vec::new();</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        an.push(read_one::&#x26;lt;usize&#x26;gt;());</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if an.iter().all(|a| a % 2 == 0) {</span>\n<span class=\"token inserted\">+        println!(\"second\");</span>\n<span class=\"token inserted\">+    } else {</span>\n<span class=\"token inserted\">+        println!(\"first\");</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 所感</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+一番よかったとき(!)</span>\n<span class=\"token inserted\">+![](./img/caddi2018b.png)</span>\n<span class=\"token inserted\">+(結果は31位)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Dの考察をスムーズに行なえたのに, Cでの2WAがもったいない.</span>\n<span class=\"token inserted\">+デバッグを如何にやるかが課題っぽい.</span>\n</code></pre></div>"}],"publishedAt":"2018-12-15","updatedAt":"2021-01-30"}},"__N_SSG":true}