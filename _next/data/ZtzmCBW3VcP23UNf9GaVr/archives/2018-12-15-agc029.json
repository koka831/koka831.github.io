{"pageProps":{"post":{"slug":"2018-12-15-agc029","title":"AGC029","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder"],"content":"<p>AtCoder Grand Contest 29の参加記録。</p>\n<h1 id=\"a\"><a href=\"#a\"><a href=\"https://beta.atcoder.jp/contests/agc029/tasks/agc029_a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A</a></a></h1>\n<p><code>xoxooox</code> のようにオセロの並びが与えられるので, 隣合う<code>ox</code> を <code>xo</code> にする操作が最大何回行えるか求める.</p>\n<p><code>oooox</code> の場合, <code>xoooo</code>となるまでに4回操作できる.<br>\n<code>ooooxx</code> の場合, まず右から二つ目の<code>x</code>を↑の様に動かしてから<code>xoooo + x</code>とみるとそれぞれの<code>x</code>に対する操作は独立.<br>\nなので各<code>x</code>の左側にある<code>o</code>の数の和を求めればいい.</p>\n<h2 id=\"解答\"><a href=\"#解答\">解答</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'B'</span> <span class=\"token punctuation\">{</span> cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'W'</span> <span class=\"token punctuation\">{</span> ans <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上の解答はWAになります()<br>\nRustの数値リテラルにおける型推論のデフォルトは<code>i32</code>のため, <code>s.len() &#x3C; O(10^5)</code>の制約ではオーバーフローしうる.</p>\n<p>5分で解答してWA食らって正直全く分からなかった.これに気付くまで25分.<br>\n流石に初歩過ぎるので反省.</p>\n<h1 id=\"b\"><a href=\"#b\"><a href=\"https://beta.atcoder.jp/contests/agc029/tasks/agc029_b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">B</a></a></h1>\n<p><code>3 11 14 5 13</code> のように数列が与えられる. この中から和が<code>2^k</code>の形になるようにペアをつくるとき, 最大いくつ作れるか.</p>\n<p>↑の例だと, ペアは<code>(3, 5), (3, 13), (5, 11)</code> の3通り考えられる. 複数回使うことは出来ないので, 2部グラフの最大マッチングか? <code>n &#x3C;= 2 * 10^5</code>からできる候補なら計算量<code>O(NM)</code>でも間に合うのか? などと考えていた(無事TLE).</p>\n<p>まずソートして, 各<code>a_i</code>に対しそれより大きい最小の<code>2^k</code>を求める.<br>\n<code>2^k - a_i</code>が数列の中に存在するかどうかbinary search等で求めてペアの候補とする.</p>\n<p>ペアの候補は, 大きいものから順に選択していけば最大となる.</p>\n<h2 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h2>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> an <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    an<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> graph <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> bn <span class=\"token operator\">=</span> an<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> bn<span class=\"token punctuation\">.</span><span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自身がペア対象にならないように一旦</span>\n        bn<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ceil <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> ceil <span class=\"token operator\">&#x3C;=</span> an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            ceil <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">match</span> bn<span class=\"token punctuation\">.</span><span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">(</span>ceil <span class=\"token operator\">-</span> an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> graph<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 自身を戻す</span>\n        bn<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> an<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* 最大マッチングWA</span>\n<span class=\"token comment\">    let n = graph.len();</span>\n<span class=\"token comment\">    let mut dinitz = Dinitz::new(n * 2 + 2);</span>\n<span class=\"token comment\">    for (a, b) in graph {</span>\n<span class=\"token comment\">        dinitz.add_edge(a, b, 1);</span>\n<span class=\"token comment\">        dinitz.add_edge(b, a, 1);</span>\n<span class=\"token comment\">    }</span>\n<span class=\"token comment\">    println!(\"{:?}\", dinitz.max_flow(n * 2, n * 2 + 1));</span>\n<span class=\"token comment\">    */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>Aのミスで800位くらい落ちてて草も生えない.<br>\nBは2部マッチングを勉強したあとだったのでそれに引っ張られた.<br>\n精進の量がたりてないので300~500埋めをやろう.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-12-15-agc029.md b/_posts/2018-12-15-agc029.md\nnew file mode 100644\nindex 0000000..1b81973\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-12-15-agc029.md</span>\n<span class=\"token coord\">@@ -0,0 +1,102 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: AGC029</span>\n<span class=\"token inserted\">+date: 2018-12-15</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+AtCoder Grand Contest 29の参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# [A](https://beta.atcoder.jp/contests/agc029/tasks/agc029_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`xoxooox` のようにオセロの並びが与えられるので, 隣合う`ox` を `xo` にする操作が最大何回行えるか求める.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`oooox` の場合, `xoooo`となるまでに4回操作できる.  </span>\n<span class=\"token inserted\">+`ooooxx` の場合, まず右から二つ目の`x`を↑の様に動かしてから`xoooo + x`とみるとそれぞれの`x`に対する操作は独立.  </span>\n<span class=\"token inserted\">+なので各`x`の左側にある`o`の数の和を求めればいい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let mut ans = 0;</span>\n<span class=\"token inserted\">+    let s = read_one::&#x26;lt;String&#x26;gt;().chars().collect::&#x26;lt;Vec&#x26;lt;char&#x26;gt;&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut cnt = 0;</span>\n<span class=\"token inserted\">+    for i in 0..s.len() {</span>\n<span class=\"token inserted\">+        if s[i] == 'B' { cnt += 1; }</span>\n<span class=\"token inserted\">+        if s[i] == 'W' { ans += cnt; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+上の解答はWAになります()  </span>\n<span class=\"token inserted\">+Rustの数値リテラルにおける型推論のデフォルトは`i32`のため, `s.len() &#x26;lt; O(10^5)`の制約ではオーバーフローしうる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+5分で解答してWA食らって正直全く分からなかった.これに気付くまで25分.  </span>\n<span class=\"token inserted\">+流石に初歩過ぎるので反省.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+# [B](https://beta.atcoder.jp/contests/agc029/tasks/agc029_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`3 11 14 5 13` のように数列が与えられる. この中から和が`2^k`の形になるようにペアをつくるとき, 最大いくつ作れるか.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+↑の例だと, ペアは`(3, 5), (3, 13), (5, 11)` の3通り考えられる. 複数回使うことは出来ないので, 2部グラフの最大マッチングか? `n &#x26;lt;= 2 * 10^5`からできる候補なら計算量`O(NM)`でも間に合うのか? などと考えていた(無事TLE).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+まずソートして, 各`a_i`に対しそれより大きい最小の`2^k`を求める.  </span>\n<span class=\"token inserted\">+`2^k - a_i`が数列の中に存在するかどうかbinary search等で求めてペアの候補とする.  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ペアの候補は, 大きいものから順に選択していけば最大となる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut an = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    an.sort();</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+    let mut graph = Vec::new();</span>\n<span class=\"token inserted\">+    let mut bn = an.clone();</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+    for i in 0..n {</span>\n<span class=\"token inserted\">+        let x = bn.binary_search(&#x26;an[i]).unwrap();</span>\n<span class=\"token inserted\">+        // 自身がペア対象にならないように一旦</span>\n<span class=\"token inserted\">+        bn.remove(x);</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+        let mut ceil = 2;</span>\n<span class=\"token inserted\">+        while ceil &#x26;lt;= an[i] {</span>\n<span class=\"token inserted\">+            ceil *= 2;</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+        match bn.binary_search(&#x26;(ceil - an[i])) {</span>\n<span class=\"token inserted\">+            Ok(n) =&#x26;gt; { graph.push((i, n)); },</span>\n<span class=\"token inserted\">+            _ =&#x26;gt; {}</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+        // 自身を戻す</span>\n<span class=\"token inserted\">+        bn.insert(x, an[i]);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    /* 最大マッチングWA</span>\n<span class=\"token inserted\">+    let n = graph.len();</span>\n<span class=\"token inserted\">+    let mut dinitz = Dinitz::new(n * 2 + 2);</span>\n<span class=\"token inserted\">+    for (a, b) in graph {</span>\n<span class=\"token inserted\">+        dinitz.add_edge(a, b, 1);</span>\n<span class=\"token inserted\">+        dinitz.add_edge(b, a, 1);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    println!(\"{:?}\", dinitz.max_flow(n * 2, n * 2 + 1));</span>\n<span class=\"token inserted\">+    */</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+Aのミスで800位くらい落ちてて草も生えない.  </span>\n<span class=\"token inserted\">+Bは2部マッチングを勉強したあとだったのでそれに引っ張られた.  </span>\n<span class=\"token inserted\">+精進の量がたりてないので300~500埋めをやろう.</span>\n</code></pre></div>"}],"publishedAt":"2018-12-15","updatedAt":"2021-01-30"}},"__N_SSG":true}