{"pageProps":{"post":{"slug":"2019-11-18-abc132-e","title":"Hopscotch Addict","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","Graph"],"content":"<h2 id=\"abc132-e-hopscotch-addict\"><a href=\"#abc132-e-hopscotch-addict\"><a href=\"https://atcoder.jp/contests/abc132/tasks/abc132_e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ABC132-E Hopscotch Addict</a></a></h2>\n<h3 id=\"概要\"><a href=\"#概要\">概要</a></h3>\n<p>有向グラフ<code>G(N, M)</code>が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><msup><mn>10</mn><mn>5</mn></msup><mo separator=\"true\">,</mo><mn>0</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msup><mn>10</mn><mn>5</mn></msup><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">))</span></span></span></span></span></p>\n<h3 id=\"考察\"><a href=\"#考察\">考察</a></h3>\n<p>頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.</p>\n<div class=\"graph-wrapper\">\n  <div class=\"graph\">\n    <div class=\"edge\">A</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">B</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">C</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">D</div>\n  </div>\n</div>\n<div>\n  <div class=\"graph\">\n    <div class=\"edge\">A, 0</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">B, 1</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">C, 2</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">D, 0</div>\n  </div>\n</div>\n<p>このようにすることで<code>(A, 0) => (D, 0)</code>のパスの長さが3となる.<br>\nここで<code>D → A</code>のパスがあると仮定すると, 二週目は以下のようになる.</p>\n<div class=\"graph-wrapper\">\n  <div class=\"graph\">\n    <div class=\"edge\">D, 0</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">A, 1</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">B, 2</div>\n    <div class=\"node\"></div>\n    <div class=\"edge\">C, 0</div>\n  </div>\n</div>\n<p>よって<code>(A, 0) => (D, 0) => (C, 0)</code>のパスが制約のもとで存在することがわかる.<br>\nこのようにして<code>(S, 0) => (T, 0)</code> のパスが存在するかどうかを判定すればよい.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<p>遷移した回数を<code>v</code>として, <code>0, 1, 2, 0, 1, ...</code>の状態は <code>v % 3</code>で管理した.</p>\n<div class=\"remark-highlight\"><pre data-file=\"e.rs\" class=\"language-rust  line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">VecDeque</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// head comment</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// line comment</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> g <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>m <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> que <span class=\"token operator\">=</span> <span class=\"token class-name\">VecDeque</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> dist <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">::</span><span class=\"token constant\">MAX</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">::</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">::</span><span class=\"token constant\">MAX</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> vv <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            que<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>vv<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">::</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">usize</span><span class=\"token punctuation\">::</span><span class=\"token constant\">MAX</span> <span class=\"token punctuation\">{</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre></div>\n<style>\n.graph-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n\n.graph {\n  margin: 2rem 0;\n  font-size: 0.8rem;\n  display: flex;\n  justify-content: center;\n}\n\n.graph .edge {\n  position: relative;\n  z-index: 0;\n  background: #98971a;\n  width: 2.5rem;\n  height: 2.5rem;\n  border-radius: 50%;\n  text-align: center;\n  line-height: 2.5rem;\n}\n\n.graph .node {\n  position: relative;\n  width: 2rem;\n  height: 1.2rem;\n  border-bottom: 1.5px solid #7c6f64;\n  text-align: center;\n}\n</style>","description":"グラフの構築","commits":[{"title":"add graph & styling","date":"2021-10-14 18:03:32","hash":"6ea7adc9","diff":"<div class=\"remark-highlight\"><pre data-file=\"6ea7adc9.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 6ea7adc9d04f6d7a20a65ddc13452e154e8d4ecb</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Thu Oct 14 18:03:32 2021 +0900\n\n  add graph &#x26; styling\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex 24e3449..83fd070 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -20,39 +20,43 @@ $$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$$\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.\n\n<span class=\"token deleted\">-\\```html</span>\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph-wrapper\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;/div&#x26;gt;</span>\n&#x26;lt;/div&#x26;gt;\n\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;/div&#x26;gt;</span>\n&#x26;lt;/div&#x26;gt;\n<span class=\"token deleted\">-\\```</span>\n\nこのようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  \nここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.\n\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph-wrapper\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;A, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;B, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\"&#x26;gt;&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"edge\"&#x26;gt;C, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;/div&#x26;gt;</span>\n&#x26;lt;/div&#x26;gt;\n\nよって`(A, 0) =&#x26;gt; (D, 0) =&#x26;gt; (C, 0)`のパスが制約のもとで存在することがわかる.  \n@@ -103,3 +107,37 @@ fn main() {\n   else { println!(<span class=\"token string\">\"-1\"</span>); }\n}\n\\```\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;style&#x26;gt;</span>\n<span class=\"token inserted\">+.graph-wrapper {</span>\n<span class=\"token inserted\">+  display: flex;</span>\n<span class=\"token inserted\">+  flex-wrap: wrap;</span>\n<span class=\"token inserted\">+  justify-content: space-around;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+.graph {</span>\n<span class=\"token inserted\">+  margin: 2rem 0;</span>\n<span class=\"token inserted\">+  font-size: 0.8rem;</span>\n<span class=\"token inserted\">+  display: flex;</span>\n<span class=\"token inserted\">+  justify-content: center;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+.graph .edge {</span>\n<span class=\"token inserted\">+  position: relative;</span>\n<span class=\"token inserted\">+  z-index: 0;</span>\n<span class=\"token inserted\">+  background: #98971a;</span>\n<span class=\"token inserted\">+  width: 2.5rem;</span>\n<span class=\"token inserted\">+  height: 2.5rem;</span>\n<span class=\"token inserted\">+  border-radius: 50%;</span>\n<span class=\"token inserted\">+  text-align: center;</span>\n<span class=\"token inserted\">+  line-height: 2.5rem;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+.graph .node {</span>\n<span class=\"token inserted\">+  position: relative;</span>\n<span class=\"token inserted\">+  width: 2rem;</span>\n<span class=\"token inserted\">+  height: 1.2rem;</span>\n<span class=\"token inserted\">+  border-bottom: 1.5px solid #7c6f64;</span>\n<span class=\"token inserted\">+  text-align: center;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+&#x26;lt;/style&#x26;gt;</span>\n</code></pre></div>"},{"title":"wip","date":"2021-03-05 18:48:41","hash":"70a0aff5","diff":"<div class=\"remark-highlight\"><pre data-file=\"70a0aff5.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 70a0aff5a83d4332a8c3ccff3d2d3c1c84e46ef2</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Fri Mar 5 18:48:41 2021 +0900\n\n  wip\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex 4a2e5c1..24e3449 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -14,12 +14,34 @@ description: グラフの構築\n<span class=\"token comment\">### 概要</span>\n有向グラフ`G(N, M)`が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.\n\n<span class=\"token deleted\">-$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$</span>\n<span class=\"token inserted\">+$$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$$</span>\n\n<span class=\"token comment\">### 考察</span>\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.\n\n<span class=\"token inserted\">+\\```html</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\nこのようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  \nここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.\n</code></pre></div>"},{"title":"remove old","date":"2021-02-15 00:35:55","hash":"2716e36b","diff":"<div class=\"remark-highlight\"><pre data-file=\"2716e36b.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 2716e36b1d32e442f2826e8a1946a44400ca8bdf</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Mon Feb 15 00:35:55 2021 +0900\n\n  remove old\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex a107a9d..4a2e5c1 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -20,26 +20,6 @@ $2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.\n\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-</span>\n<span class=\"token deleted\">-&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token deleted\">-  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token deleted\">-</span>\nこのようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  \nここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.\n</code></pre></div>"},{"title":"update","date":"2021-02-15 00:34:10","hash":"bd59f09a","diff":"<div class=\"remark-highlight\"><pre data-file=\"bd59f09a.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit bd59f09a33181a1f762978251b6b4d7eb0095a09</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Mon Feb 15 00:34:10 2021 +0900\n\n  update\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nindex d07b8a9..a107a9d 100644\n<span class=\"token deleted\">--- a/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n@@ -10,11 +10,11 @@ description: グラフの構築\n<span class=\"token deleted\">---</span>\n\n<span class=\"token comment\">## <a href=\"https://atcoder.jp/contests/abc132/tasks/abc132_e\" class=\"token md-link\">ABC132-E Hopscotch Addict</a></span>\n<span class=\"token inserted\">+</span>\n<span class=\"token comment\">### 概要</span>\n有向グラフ`G(N, M)`が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.\n\n<span class=\"token deleted\">-$2 \\leq N \\leq 10^5$,</span>\n<span class=\"token deleted\">-$0 \\leq M \\leq min(10^5, N(N-1))$</span>\n<span class=\"token inserted\">+$2 \\leq N \\leq 10^5, 0 \\leq M \\leq min(10^5, N(N-1))$</span>\n\n<span class=\"token comment\">### 考察</span>\n頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.\n@@ -59,15 +59,18 @@ $0 \\leq M \\leq min(10^5, N(N-1))$\n<span class=\"token comment\">### 解答</span>\n遷移した回数を`v`として, `0, 1, 2, 0, 1, ...`の状態は `v % 3`で管理した.\n\n<span class=\"token deleted\">-\\```rust</span>\n<span class=\"token inserted\">+\\```rust[class=\"line-numbers\"][data-file=\"e.rs\"]</span>\nuse std::io;\nuse std::collections::VecDeque;\n\n<span class=\"token inserted\">+/// head comment</span>\nfn main() {\n   let (n, m) = {\n       let i = read::&#x26;lt;usize&#x26;gt;();\n       (i[0], i[1])\n   };\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    // line comment</span>\n   let mut g = vec![Vec::new(); n];\n   for _ in 0..m {\n       let (u, v) = {\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-11-18-abc132-e.md b/_posts/2019-11-18-abc132-e.md\nnew file mode 100644\nindex 0000000..d07b8a9\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-11-18-abc132-e.md</span>\n<span class=\"token coord\">@@ -0,0 +1,100 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Hopscotch Addict'</span>\n<span class=\"token inserted\">+date: 2019-11-18</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- AtCoder</span>\n<span class=\"token inserted\">+- Graph</span>\n<span class=\"token inserted\">+description: グラフの構築</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [ABC132-E Hopscotch Addict](https://atcoder.jp/contests/abc132/tasks/abc132_e)</span>\n<span class=\"token inserted\">+### 概要</span>\n<span class=\"token inserted\">+有向グラフ`G(N, M)`が与えられ, グラフ上を一度の移動で3頂点進む. 頂点Sから頂点Tまで移動できる場合の最短経路を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+$2 \\leq N \\leq 10^5$,</span>\n<span class=\"token inserted\">+$0 \\leq M \\leq min(10^5, N(N-1))$</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 考察</span>\n<span class=\"token inserted\">+頂点Sから頂点Tの経路かつ経路長が3の倍数であるもののうち, 最短のものを求めたい.</span>\n<span class=\"token inserted\">+長さが3の倍数であるという制約を扱うために, 以下のようにグラフに遷移状態をもたせる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このようにすることで`(A, 0) =&#x26;gt; (D, 0)`のパスの長さが3となる.  </span>\n<span class=\"token inserted\">+ここで`D → A`のパスがあると仮定すると, 二週目は以下のようになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+&#x26;lt;div class=\"graph\"&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;D, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;A, 1&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;B, 2&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+    &#x26;lt;div class=\"node\" /&#x26;gt;</span>\n<span class=\"token inserted\">+  &#x26;lt;div class=\"edge\"&#x26;gt;C, 0&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+&#x26;lt;/div&#x26;gt;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+よって`(A, 0) =&#x26;gt; (D, 0) =&#x26;gt; (C, 0)`のパスが制約のもとで存在することがわかる.  </span>\n<span class=\"token inserted\">+このようにして`(S, 0) =&#x26;gt; (T, 0)` のパスが存在するかどうかを判定すればよい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+遷移した回数を`v`として, `0, 1, 2, 0, 1, ...`の状態は `v % 3`で管理した.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+use std::io;</span>\n<span class=\"token inserted\">+use std::collections::VecDeque;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+    let mut g = vec![Vec::new(); n];</span>\n<span class=\"token inserted\">+    for _ in 0..m {</span>\n<span class=\"token inserted\">+        let (u, v) = {</span>\n<span class=\"token inserted\">+            let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+            (i[0] - 1, i[1] - 1)</span>\n<span class=\"token inserted\">+        };</span>\n<span class=\"token inserted\">+        g[u].push(v);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+    let (s, t) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0] - 1, i[1] - 1)</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut que = VecDeque::new();</span>\n<span class=\"token inserted\">+    let mut dist = vec![vec![::std::usize::MAX; 3]; n];</span>\n<span class=\"token inserted\">+    que.push_back((s, 0));</span>\n<span class=\"token inserted\">+    while let Some((u, v)) = que.pop_front() {</span>\n<span class=\"token inserted\">+        if dist[u][v % 3] != ::std::usize::MAX { continue; }</span>\n<span class=\"token inserted\">+        dist[u][v % 3] = v;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        for i in 0..g[u].len() {</span>\n<span class=\"token inserted\">+            let vv = g[u][i];</span>\n<span class=\"token inserted\">+            que.push_back((vv, v + 1));</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if dist[t][0] != ::std::usize::MAX { println!(\"{}\", dist[t][0] / 3); }</span>\n<span class=\"token inserted\">+    else { println!(\"-1\"); }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n</code></pre></div>"}],"publishedAt":"2019-11-18","updatedAt":"2021-10-14"}},"__N_SSG":true}