{"pageProps":{"post":{"slug":"2017-11-07-github-api","title":"memo:GitHub API & Serde.rs","categories":["memo"],"image":"https://koka831.github.io/img/icon.png","tags":["Rust","GitHub"],"content":"<p>Rusk/Task Manager in Rust の作成log.</p>\n<p>Rust とTask から命名</p>\n<h2 id=\"motivation\"><a href=\"#motivation\"><span class=\"olive\">Motivation</span></a></h2>\n<p>Googleカレンダーで主にスケジュール・タスク管理をしてたのだけど、\n色々と不満点があったので小さいCLIツールを作ることにした。</p>\n<ul>\n<li>Web上でGoogle ToDoリストを作成するまでの導線が長い</li>\n<li>ToDoにタグ付けしたい &#x26; Tag毎に確認したい</li>\n<li>ターミナルからも見たい</li>\n</ul>\n<p>Task管理する上で欲しい項目/機能をリストアップ。</p>\n<h4 id=\"項目\"><a href=\"#項目\">項目</a></h4>\n<ul>\n<li>task/name</li>\n<li>description</li>\n<li>tag(s)</li>\n<li>deadline</li>\n</ul>\n<h4 id=\"機能\"><a href=\"#機能\">機能</a></h4>\n<ul>\n<li>CRUD</li>\n<li>Notification</li>\n<li>ターミナル/Web(スマホ)両方から確認したい</li>\n</ul>\n<p>で、上記を一番楽に実装しようと考えた結果、GitHubのレポジトリを立てToDoをIssueとして管理することにした。<br>\nデータ構造としてのタスクの項目が多いので、ToDoの作成は主にWebから。CLIから作成する場合はinteractiveな感じに。</p>\n<h2 id=\"approach\"><a href=\"#approach\"><span class=\"olive\">Approach</span></a></h2>\n<p>Rustの<a href=\"https://github.com/hyperium/hyper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hyper</a>を使ってhttpクライアントを作成。\nhyper単体だとTLS対応していないので、<a href=\"https://github.com/hyperium/hyper-tls\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hyper-tls</a>をコネクタに利用した。<br>\nCLIには<a href=\"https://github.com/TeXitoi/structopt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">structopt</a>を用いてCRUD操作をenumとstructでいい感じに。\n出力の整形は<a href=\"https://github.com/phsym/prettytable-rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prettytable-rs</a>を使用。OSS様様。</p>\n<p>GitHubのAPIコールは<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ここ</a>から発行できる<code>personal access token</code>をヘッダに付与するだけで、curlでも簡単に呼べる。<br>\nレポジトリのissue一覧を叩くと以下のようにissueに対してユーザ情報、ラベルリストが入れ子構造になって返される。</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">curl -H &#x26;quot;Authorization: token $GITHUB_API_TOKEN&#x26;quot; https://api.github.com/repos/koka831/todo/issues\n\n[\n  {\n    &#x26;quot;url&#x26;quot;: &#x26;quot;https://api.github.com/repos/...&#x26;quot;,\n    ..\n    &#x26;quot;id&#x26;quot;: 271094185,\n    &#x26;quot;number&#x26;quot;: 2,\n    &#x26;quot;title&#x26;quot;: &#x26;quot;hoge&#x26;quot;,\n    &#x26;quot;user&#x26;quot;: {\n      &#x26;quot;login&#x26;quot;: &#x26;quot;koka831&#x26;quot;,\n      ...\n    },\n    &#x26;quot;labels&#x26;quot;: [\n      {\n        &#x26;quot;id&#x26;quot;: ...\n        &#x26;quot;name&#x26;quot;: &#x26;quot;ToDo&#x26;quot;,\n        &#x26;quot;color&#x26;quot;: &#x26;quot;3778ba&#x26;quot;,\n      }\n    ],\n    &#x26;quot;state&#x26;quot;: &#x26;quot;open&#x26;quot;,\n    ...\n  }, ...\n]</code></pre></div>\n<p>同じことをhyperからもやってみると、403/Forbiddenが返される。\n<a href=\"https://developer.github.com/v3/#user-agent-required\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reference</a>を読み直すとUserAgentが必須とのこと。</p>\n<blockquote>\n<p>All API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected.</p>\n</blockquote>\n<p>したがって最小限必要なheaderは以下の２つ。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">User-Agent: app/1.0\nAuthorization: token $TOKEN</code></pre></div>\n<p>２つ目の<code>Authorization</code>の書式が曲者で、<code>token</code>とトークン文字列の間の<strong>スペースが２つあっても</strong><code>Bad credentials</code>となる。</p>\n<p>hyperで独自ヘッダを付与する際には、hyperのマクロが便利。\nAuthorizationのheader生成関数を作成して、TLSコネクタベースのHttpClientに渡す。\nClientサイドなのでシングルスレッドで。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">hyper<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">hyper<span class=\"token punctuation\">::</span>header<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">UserAgent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">hyper_tls<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HttpsConnector</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">tokio_core<span class=\"token punctuation\">::</span>reactor<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Core</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token macro property\">header!</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Authorization\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> auth_header <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token {}\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> req <span class=\"token operator\">=</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Get</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">headers_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserAgent</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">headers_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">(</span>auth_header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// setup client</span>\n<span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> core<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">::</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// creates connector with 1 thread</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">connector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpsConnector</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>取得したIssueリストはdeserializeしてstructに落としこむ。<br>\nとりあえずの構造体を作ってserde-jsonとすり合わせようと思っていたのだけど、\n構造体のkeyをjsonのkeyと合わせておくだけでそのままシリアライズしてくれた。\n今回はv3のREST APIを使ったけど、struct/enumのSerializerとGraphQLも相性がいいと思う。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Issue</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n  number<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n  labels<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Label</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Label</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> color<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    default<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// send request</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">and_then</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>res<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">and_then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>body<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> v<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Issue</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncore<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2 id=\"todo\"><a href=\"#todo\"><span class=\"olive\">ToDo</span></a></h2>\n<ul>\n<li>APIコールが1~2secかかるのでその間スピナーアイコン表示したい</li>\n<li>rusk + fzf + vimでタスクをシームレスに編集できるように\n<ul>\n<li>CLI側のメモは後日fzf+vimインターフェースと合わせて</li>\n</ul>\n</li>\n</ul>","description":"\nRusk/Task Manager in Rust の作成log.\n\nRust とTask から命名\n## <span class=\"olive\">Motivation</span>\nGoogleカ...","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2017-11-07-github-api.md b/_posts/2017-11-07-github-api.md\nnew file mode 100644\nindex 0000000..032f57e\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2017-11-07-github-api.md</span>\n<span class=\"token coord\">@@ -0,0 +1,151 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: memo:GitHub API &#x26; Serde.rs</span>\n<span class=\"token inserted\">+date: 2017-11-07</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- memo</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Rust</span>\n<span class=\"token inserted\">+- GitHub</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Rusk/Task Manager in Rust の作成log.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Rust とTask から命名</span>\n<span class=\"token inserted\">+## &#x26;lt;span class=\"olive\"&#x26;gt;Motivation&#x26;lt;/span&#x26;gt;</span>\n<span class=\"token inserted\">+Googleカレンダーで主にスケジュール・タスク管理をしてたのだけど、</span>\n<span class=\"token inserted\">+色々と不満点があったので小さいCLIツールを作ることにした。  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- Web上でGoogle ToDoリストを作成するまでの導線が長い</span>\n<span class=\"token inserted\">+- ToDoにタグ付けしたい &#x26; Tag毎に確認したい</span>\n<span class=\"token inserted\">+- ターミナルからも見たい</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Task管理する上で欲しい項目/機能をリストアップ。  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 項目</span>\n<span class=\"token inserted\">+- task/name</span>\n<span class=\"token inserted\">+- description</span>\n<span class=\"token inserted\">+- tag(s)</span>\n<span class=\"token inserted\">+- deadline</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 機能</span>\n<span class=\"token inserted\">+- CRUD</span>\n<span class=\"token inserted\">+- Notification</span>\n<span class=\"token inserted\">+- ターミナル/Web(スマホ)両方から確認したい</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+で、上記を一番楽に実装しようと考えた結果、GitHubのレポジトリを立てToDoをIssueとして管理することにした。  </span>\n<span class=\"token inserted\">+データ構造としてのタスクの項目が多いので、ToDoの作成は主にWebから。CLIから作成する場合はinteractiveな感じに。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## &#x26;lt;span class=\"olive\"&#x26;gt;Approach&#x26;lt;/span&#x26;gt;</span>\n<span class=\"token inserted\">+Rustの[hyper](https://github.com/hyperium/hyper)を使ってhttpクライアントを作成。</span>\n<span class=\"token inserted\">+hyper単体だとTLS対応していないので、[hyper-tls](https://github.com/hyperium/hyper-tls)をコネクタに利用した。  </span>\n<span class=\"token inserted\">+CLIには[structopt](https://github.com/TeXitoi/structopt)を用いてCRUD操作をenumとstructでいい感じに。</span>\n<span class=\"token inserted\">+出力の整形は[prettytable-rs](https://github.com/phsym/prettytable-rs)を使用。OSS様様。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+GitHubのAPIコールは[ここ](https://github.com/settings/tokens)から発行できる`personal access token`をヘッダに付与するだけで、curlでも簡単に呼べる。  </span>\n<span class=\"token inserted\">+レポジトリのissue一覧を叩くと以下のようにissueに対してユーザ情報、ラベルリストが入れ子構造になって返される。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```sh</span>\n<span class=\"token inserted\">+curl -H \"Authorization: token $GITHUB_API_TOKEN\" https://api.github.com/repos/koka831/todo/issues</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[</span>\n<span class=\"token inserted\">+  {</span>\n<span class=\"token inserted\">+    \"url\": \"https://api.github.com/repos/...\",</span>\n<span class=\"token inserted\">+    ..</span>\n<span class=\"token inserted\">+    \"id\": 271094185,</span>\n<span class=\"token inserted\">+    \"number\": 2,</span>\n<span class=\"token inserted\">+    \"title\": \"hoge\",</span>\n<span class=\"token inserted\">+    \"user\": {</span>\n<span class=\"token inserted\">+      \"login\": \"koka831\",</span>\n<span class=\"token inserted\">+      ...</span>\n<span class=\"token inserted\">+    },</span>\n<span class=\"token inserted\">+    \"labels\": [</span>\n<span class=\"token inserted\">+      {</span>\n<span class=\"token inserted\">+        \"id\": ...</span>\n<span class=\"token inserted\">+        \"name\": \"ToDo\",</span>\n<span class=\"token inserted\">+        \"color\": \"3778ba\",</span>\n<span class=\"token inserted\">+      }</span>\n<span class=\"token inserted\">+    ],</span>\n<span class=\"token inserted\">+    \"state\": \"open\",</span>\n<span class=\"token inserted\">+    ...</span>\n<span class=\"token inserted\">+  }, ...</span>\n<span class=\"token inserted\">+]</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+同じことをhyperからもやってみると、403/Forbiddenが返される。</span>\n<span class=\"token inserted\">+[reference](https://developer.github.com/v3/#user-agent-required)を読み直すとUserAgentが必須とのこと。</span>\n<span class=\"token inserted\">+&#x26;gt; All API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected. </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがって最小限必要なheaderは以下の２つ。</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+User-Agent: app/1.0</span>\n<span class=\"token inserted\">+Authorization: token $TOKEN</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+２つ目の`Authorization`の書式が曲者で、`token`とトークン文字列の間の**スペースが２つあっても**`Bad credentials`となる。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+hyperで独自ヘッダを付与する際には、hyperのマクロが便利。</span>\n<span class=\"token inserted\">+Authorizationのheader生成関数を作成して、TLSコネクタベースのHttpClientに渡す。</span>\n<span class=\"token inserted\">+Clientサイドなのでシングルスレッドで。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+use hyper::{Client, Method, Request};</span>\n<span class=\"token inserted\">+use hyper::header::UserAgent;</span>\n<span class=\"token inserted\">+use hyper_tls::HttpsConnector;</span>\n<span class=\"token inserted\">+use tokio_core::reactor::Core;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+// ...</span>\n<span class=\"token inserted\">+header! { ( Authorization, \"Authorization\" ) =&#x26;gt; [String] }</span>\n<span class=\"token inserted\">+let auth_header = format!(\"token {}\", token);</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+let mut req = Request::new(Method::Get, url);</span>\n<span class=\"token inserted\">+req.headers_mut().set(UserAgent::new(\"todo\"));</span>\n<span class=\"token inserted\">+req.headers_mut().set(Authorization(auth_header));</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+// setup client</span>\n<span class=\"token inserted\">+let handle = core.handle();</span>\n<span class=\"token inserted\">+let client = Client::configure()</span>\n<span class=\"token inserted\">+  // creates connector with 1 thread</span>\n<span class=\"token inserted\">+  .connector(HttpsConnector::new(1, &#x26;handle).unwrap())</span>\n<span class=\"token inserted\">+  .build(&#x26;handle);</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+取得したIssueリストはdeserializeしてstructに落としこむ。  </span>\n<span class=\"token inserted\">+とりあえずの構造体を作ってserde-jsonとすり合わせようと思っていたのだけど、</span>\n<span class=\"token inserted\">+構造体のkeyをjsonのkeyと合わせておくだけでそのままシリアライズしてくれた。</span>\n<span class=\"token inserted\">+今回はv3のREST APIを使ったけど、struct/enumのSerializerとGraphQLも相性がいいと思う。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token inserted\">+struct Issue {</span>\n<span class=\"token inserted\">+  id: u32,</span>\n<span class=\"token inserted\">+  number: u8,</span>\n<span class=\"token inserted\">+  title: String,</span>\n<span class=\"token inserted\">+  labels: Vec&#x26;lt;Label&#x26;gt;,</span>\n<span class=\"token inserted\">+  state: String,</span>\n<span class=\"token inserted\">+  body: String</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#[derive(Debug, Serialize, Deserialize)]</span>\n<span class=\"token inserted\">+pub struct Label {</span>\n<span class=\"token inserted\">+    id: u32,</span>\n<span class=\"token inserted\">+    pub name: String,</span>\n<span class=\"token inserted\">+    pub color: String,</span>\n<span class=\"token inserted\">+    default: bool,</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+// ...</span>\n<span class=\"token inserted\">+// send request</span>\n<span class=\"token inserted\">+let res = client.request(req)</span>\n<span class=\"token inserted\">+  .and_then(|res| { res.body().concat2()</span>\n<span class=\"token inserted\">+  .and_then(move |body| {</span>\n<span class=\"token inserted\">+    let v: Vec&#x26;lt;Issue&#x26;gt; = serde_json::from_slice(&#x26;body).unwrap();</span>\n<span class=\"token inserted\">+    Ok(v)</span>\n<span class=\"token inserted\">+  })</span>\n<span class=\"token inserted\">+});</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+core.run(res).unwrap()</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## &#x26;lt;span class=\"olive\"&#x26;gt;ToDo&#x26;lt;/span&#x26;gt;</span>\n<span class=\"token inserted\">+- APIコールが1~2secかかるのでその間スピナーアイコン表示したい</span>\n<span class=\"token inserted\">+- rusk + fzf + vimでタスクをシームレスに編集できるように</span>\n<span class=\"token inserted\">+  - CLI側のメモは後日fzf+vimインターフェースと合わせて</span>\n</code></pre></div>"}],"publishedAt":"2017-11-07","updatedAt":"2021-01-30"}},"__N_SSG":true}