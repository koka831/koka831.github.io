{"pageProps":{"post":{"slug":"2019-07-15-internal-vue","title":"Internal Vue.js 1","categories":["Code Reading"],"image":"https://koka831.github.io/img/icon.png","tags":["Vue","Virtual DOM"],"content":"<p><a href=\"https://github.com/vuejs/vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js</a>のreactive systemがどのように実装されているか追ってみた.\n初回はコンパイラの挙動を確認.</p>\n<ul>\n<li>Vuejs v2.6.10</li>\n</ul>\n<h2 id=\"srccompilerindexjs\"><a href=\"#srccompilerindexjs\">src/compiler/index.js</a></h2>\n<p>compilerのentrypointとなるのが<code>src/compiler/index.js</code>.<br>\n(Vue.jsは<a href=\"https://flow.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flow</a>を用いてtype checkを行っている. compiler周りの型は<code>flow/compiler.js</code>に記載.)</p>\n<p><code>parse(template, options)</code>でASTを生成し，<code>generate(ast, options)</code>でcodeを生成する.<br>\nVirtual DOMのpatch/mergeを効率よく行うため，返り値の<code>CompiledResult</code>に<code>code</code>だけでなくASTを持たせている.</p>\n<p><code>staticRenderFns</code>についてはparser部分で説明する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// `createCompilerCreator` allows creating compilers that use alternative</span>\n<span class=\"token comment\">// parser/optimizer/codegen, e.g the SSR optimizing compiler.</span>\n<span class=\"token comment\">// Here we just export a default compiler using the default parts.</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> createCompiler <span class=\"token operator\">=</span> <span class=\"token function\">createCompilerCreator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">baseCompile</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompilerOptions</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompiledResult</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">optimize</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    ast<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> code<span class=\"token punctuation\">.</span><span class=\"token property-access\">staticRenderFns</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2 id=\"srccompilerparserindexjs\"><a href=\"#srccompilerparserindexjs\">src/compiler/parser/index.js</a></h2>\n<p><code>.vue</code>ファイルからASTを生成する部分. <code>parse</code>関数内部で関数定義してて長いので，重要なところだけピックアップする.<br>\nVueのテンプレートはHTMLのDOMをベースにしていて，特に</p>\n<ul>\n<li>Mustache</li>\n<li>Directive\nの2点を拡張記法としてもっている．</li>\n</ul>\n<p>そのためパース自体は<code>html-parse</code>を用いており，<code>parse</code>の主な仕事はHTML DOMのASTを返すのとパース時のエラー出力となっている．</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * Convert HTML string to AST.</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompilerOptions</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  warn <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span><span class=\"token property-access\">warn</span> <span class=\"token operator\">||</span> baseWarn\n  <span class=\"token comment\">/* omit */</span>\n\n  <span class=\"token function\">parseHTML</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* omit */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">start</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> unary<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* omit */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> root <span class=\"token comment\">// ASTのroot Node</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>関係ないけど階段状にインポートしてるの好き.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  addProp<span class=\"token punctuation\">,</span>\n  addAttr<span class=\"token punctuation\">,</span>\n  baseWarn<span class=\"token punctuation\">,</span>\n  addHandler<span class=\"token punctuation\">,</span>\n  addDirective<span class=\"token punctuation\">,</span>\n  getBindingAttr<span class=\"token punctuation\">,</span>\n  getAndRemoveAttr<span class=\"token punctuation\">,</span>\n  getRawBindingAttr<span class=\"token punctuation\">,</span>\n  pluckModuleFunction<span class=\"token punctuation\">,</span>\n  getAndRemoveAttrByRegex\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../helpers'</span>\n</code></pre></div>\n<h2 id=\"abstract-syntax-tree\"><a href=\"#abstract-syntax-tree\">Abstract Syntax Tree</a></h2>\n<p><code>generate</code>が受け取る<code>ast</code>の型<code>ASTElement</code>は<code>flow/compiler.js</code>に定義されている．<br>\nASTは以下の3種類に分類され，<code>ASTNode</code>がそれぞれの<code>type</code>を元に判別している．</p>\n<ul>\n<li><code>ASTElement</code>: type: 1</li>\n<li><code>ASTText</code>: type: 2</li>\n<li><code>ASTExpression</code>: type: 3</li>\n</ul>\n<p><code>type ASTNode = ASTElement | ASTText | ASTExpression</code></p>\n<p><code>ASTElement</code>を例にとると以下のようになっている．</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">declare type <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">attrsList</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ASTAttr</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">attrsMap</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">rawAttrsMap</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTAttr</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">parent</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ASTNode</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* omit */</span>\n  staticRoot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n  text<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  component<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  transition<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* omit */</span>\n\n  model<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">callback</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">expression</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ASTの構造は<code>ASTElement</code>がrootとなり，branchに<code>ASTNode</code>を再帰的に持つ構造になる.\n<code>staticRoot?</code>や<code>component?</code>等のパラメータは，その<code>ASTNode</code>以下が<code>static</code>であるか<code>dynamic</code>であるか，等レンダリングの最適化の際に参照される．\nこの最適化機構は<code>src/compiler/optimizer.js</code>の<code>markStatic</code>及び<code>markStaticRoot</code>が担う.</p>\n<h2 id=\"srccompilercodegenindexjs\"><a href=\"#srccompilercodegenindexjs\">src/compiler/codegen/index.js</a></h2>\n<p><code>generate</code>はASTから<code>render</code>と<code>staticRenderFns</code>の２つを生成する．<br>\n<code>render</code>がVueのDynamic Renderingを担当し，<code>staticRenderFns</code>は静的な(変更のない)DOMを生成する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generate</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">ast</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CompilerOptions</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CodegenResult</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CodegenState</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> ast <span class=\"token operator\">?</span> <span class=\"token function\">genElement</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'_c(\"div\")'</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">with(this){return </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">staticRenderFns</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>genElement</code>は<code>ASTElement</code>の<code>staticRoot?</code>や<code>for?</code>等を確認し，それぞれのディレクティブ・タグに対応する<code>Element</code>, <code>Component</code>を生成する.\n各々の生成は<code>genStatic</code>, <code>genIf</code>のようにそれぞれのジェネレータで行う．\n各々のジェネレータは受け取ったASTを処理した後に再帰的に<code>genElement</code>を呼び出す．<br>\n最終的に<code>genElement</code>は最小単位である<code>Element</code>の生成を行う．<br>\n<code>Element</code>は<code>&#x3C;tag data>children&#x3C;/tag></code>からなるDOMである．</p>\n<p>以下がその生成部分.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">data <span class=\"token operator\">=</span> <span class=\"token function\">genData</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* omit */</span>\n<span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token property-access\">inlineTemplate</span> <span class=\"token operator\">?</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">:</span> <span class=\"token function\">genChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\ncode <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">_c('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token punctuation\">.</span><span class=\"token property-access\">tag</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n  data <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\">// data</span>\n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n  children <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>children<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\">// children</span>\n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>\n<p><code>Element</code>のdata部分は<code>genData</code>が担当する. data部分に含まれるのは<code>class</code>, <code>directive</code>, <code>model</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">genData</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ASTElement</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CodegenState</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'{'</span>\n\n  <span class=\"token comment\">// directives first.</span>\n  <span class=\"token comment\">// directives may mutate the el's other properties before they are generated.</span>\n  <span class=\"token keyword\">const</span> dirs <span class=\"token operator\">=</span> <span class=\"token function\">genDirectives</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>dirs<span class=\"token punctuation\">)</span> data <span class=\"token operator\">+=</span> dirs <span class=\"token operator\">+</span> <span class=\"token string\">','</span>\n\n  <span class=\"token comment\">/* omit */</span>\n  <span class=\"token comment\">// component v-model</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">model:{value:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n    <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,callback:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">callback</span>\n    <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,expression:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token property-access\">model</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">expression</span>\n    <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">},</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/* omit */</span>\n  <span class=\"token keyword control-flow\">return</span> data\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最終的に<code>CompiledResult</code>が生成される.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">declare type <span class=\"token maybe-class-name\">CompiledResult</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">ast</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span><span class=\"token maybe-class-name\">ASTElement</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">render</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">staticRenderFns</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  stringRenderFns<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  errors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">WarningMessage</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  tips<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>string <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">WarningMessage</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2>\n<ul>\n<li>Vueのコンパイラは<code>parser</code>と<code>generator</code>からなる.</li>\n<li><code>parser</code>は<code>html-parse</code>を元にASTを生成する.</li>\n<li><code>generator</code>はASTを元に動的部分と静的部分の<code>render</code>群を生成する</li>\n</ul>\n<h2 id=\"next\"><a href=\"#next\">Next</a></h2>\n<p>次回は<code>src/core/observer</code>を読む.<br>\n(名前からVueのreactive systemがObserver patternベースなんだろうな)</p>\n<ul>\n<li><a href=\"/2019/08/08/internal-vue-2/\">次回</a></li>\n</ul>","description":"internal Vue.js & read how Vue compiler works","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2019-07-15-internal-vue.md b/_posts/2019-07-15-internal-vue.md\nnew file mode 100644\nindex 0000000..b460b95\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2019-07-15-internal-vue.md</span>\n<span class=\"token coord\">@@ -0,0 +1,228 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Internal Vue.js 1'</span>\n<span class=\"token inserted\">+date: 2019-07-15</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Code Reading</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Vue</span>\n<span class=\"token inserted\">+- Virtual DOM</span>\n<span class=\"token inserted\">+description: internal Vue.js &#x26; read how Vue compiler works</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[Vue.js](https://github.com/vuejs/vue)のreactive systemがどのように実装されているか追ってみた.</span>\n<span class=\"token inserted\">+初回はコンパイラの挙動を確認.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- Vuejs v2.6.10</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## src/compiler/index.js</span>\n<span class=\"token inserted\">+compilerのentrypointとなるのが`src/compiler/index.js`.  </span>\n<span class=\"token inserted\">+(Vue.jsは[flow](https://flow.org)を用いてtype checkを行っている. compiler周りの型は`flow/compiler.js`に記載.)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`parse(template, options)`でASTを生成し，`generate(ast, options)`でcodeを生成する.  </span>\n<span class=\"token inserted\">+Virtual DOMのpatch/mergeを効率よく行うため，返り値の`CompiledResult`に`code`だけでなくASTを持たせている.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`staticRenderFns`についてはparser部分で説明する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+// `createCompilerCreator` allows creating compilers that use alternative</span>\n<span class=\"token inserted\">+// parser/optimizer/codegen, e.g the SSR optimizing compiler.</span>\n<span class=\"token inserted\">+// Here we just export a default compiler using the default parts.</span>\n<span class=\"token inserted\">+export const createCompiler = createCompilerCreator(function baseCompile (</span>\n<span class=\"token inserted\">+  template: string,</span>\n<span class=\"token inserted\">+  options: CompilerOptions</span>\n<span class=\"token inserted\">+): CompiledResult {</span>\n<span class=\"token inserted\">+  const ast = parse(template.trim(), options)</span>\n<span class=\"token inserted\">+  if (options.optimize !== false) {</span>\n<span class=\"token inserted\">+    optimize(ast, options)</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+  const code = generate(ast, options)</span>\n<span class=\"token inserted\">+  return {</span>\n<span class=\"token inserted\">+    ast,</span>\n<span class=\"token inserted\">+    render: code.render,</span>\n<span class=\"token inserted\">+    staticRenderFns: code.staticRenderFns</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+})</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## src/compiler/parser/index.js</span>\n<span class=\"token inserted\">+`.vue`ファイルからASTを生成する部分. `parse`関数内部で関数定義してて長いので，重要なところだけピックアップする.  </span>\n<span class=\"token inserted\">+VueのテンプレートはHTMLのDOMをベースにしていて，特に</span>\n<span class=\"token inserted\">+- Mustache</span>\n<span class=\"token inserted\">+- Directive</span>\n<span class=\"token inserted\">+の2点を拡張記法としてもっている．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+そのためパース自体は`html-parse`を用いており，`parse`の主な仕事はHTML DOMのASTを返すのとパース時のエラー出力となっている．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * Convert HTML string to AST.</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+export function parse (</span>\n<span class=\"token inserted\">+  template: string,</span>\n<span class=\"token inserted\">+  options: CompilerOptions</span>\n<span class=\"token inserted\">+): ASTElement | void {</span>\n<span class=\"token inserted\">+  warn = options.warn || baseWarn</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  parseHTML(template, {</span>\n<span class=\"token inserted\">+    /* omit */,</span>\n<span class=\"token inserted\">+    start (tag, attrs, unary, start, end) { /* omit */ },</span>\n<span class=\"token inserted\">+  })</span>\n<span class=\"token inserted\">+  return root // ASTのroot Node</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+関係ないけど階段状にインポートしてるの好き.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+import {</span>\n<span class=\"token inserted\">+  addProp,</span>\n<span class=\"token inserted\">+  addAttr,</span>\n<span class=\"token inserted\">+  baseWarn,</span>\n<span class=\"token inserted\">+  addHandler,</span>\n<span class=\"token inserted\">+  addDirective,</span>\n<span class=\"token inserted\">+  getBindingAttr,</span>\n<span class=\"token inserted\">+  getAndRemoveAttr,</span>\n<span class=\"token inserted\">+  getRawBindingAttr,</span>\n<span class=\"token inserted\">+  pluckModuleFunction,</span>\n<span class=\"token inserted\">+  getAndRemoveAttrByRegex</span>\n<span class=\"token inserted\">+} from '../helpers'</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Abstract Syntax Tree</span>\n<span class=\"token inserted\">+`generate`が受け取る`ast`の型`ASTElement`は`flow/compiler.js`に定義されている．  </span>\n<span class=\"token inserted\">+ASTは以下の3種類に分類され，`ASTNode`がそれぞれの`type`を元に判別している．</span>\n<span class=\"token inserted\">+- `ASTElement`: type: 1</span>\n<span class=\"token inserted\">+- `ASTText`: type: 2</span>\n<span class=\"token inserted\">+- `ASTExpression`: type: 3</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`type ASTNode = ASTElement | ASTText | ASTExpression`</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`ASTElement`を例にとると以下のようになっている．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+declare type ASTElement = {</span>\n<span class=\"token inserted\">+  type: 1;</span>\n<span class=\"token inserted\">+  tag: string;</span>\n<span class=\"token inserted\">+  attrsList: Array&#x26;lt;ASTAttr&#x26;gt;;</span>\n<span class=\"token inserted\">+  attrsMap: { [key: string]: any };</span>\n<span class=\"token inserted\">+  rawAttrsMap: { [key: string]: ASTAttr };</span>\n<span class=\"token inserted\">+  parent: ASTElement | void;</span>\n<span class=\"token inserted\">+  children: Array&#x26;lt;ASTNode&#x26;gt;;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+  staticRoot?: boolean;</span>\n<span class=\"token inserted\">+  text?: string;</span>\n<span class=\"token inserted\">+  component?: string;</span>\n<span class=\"token inserted\">+  if?: string;</span>\n<span class=\"token inserted\">+  for?: string;</span>\n<span class=\"token inserted\">+  transition?: string | true;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  model?: {</span>\n<span class=\"token inserted\">+    value: string;</span>\n<span class=\"token inserted\">+    callback: string;</span>\n<span class=\"token inserted\">+    expression: string;</span>\n<span class=\"token inserted\">+  };</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ASTの構造は`ASTElement`がrootとなり，branchに`ASTNode`を再帰的に持つ構造になる.</span>\n<span class=\"token inserted\">+`staticRoot?`や`component?`等のパラメータは，その`ASTNode`以下が`static`であるか`dynamic`であるか，等レンダリングの最適化の際に参照される．</span>\n<span class=\"token inserted\">+この最適化機構は`src/compiler/optimizer.js`の`markStatic`及び`markStaticRoot`が担う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## src/compiler/codegen/index.js</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`generate`はASTから`render`と`staticRenderFns`の２つを生成する．  </span>\n<span class=\"token inserted\">+`render`がVueのDynamic Renderingを担当し，`staticRenderFns`は静的な(変更のない)DOMを生成する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+export function generate (</span>\n<span class=\"token inserted\">+  ast: ASTElement | void,</span>\n<span class=\"token inserted\">+  options: CompilerOptions</span>\n<span class=\"token inserted\">+): CodegenResult {</span>\n<span class=\"token inserted\">+  const state = new CodegenState(options)</span>\n<span class=\"token inserted\">+  const code = ast ? genElement(ast, state) : '_c(\"div\")'</span>\n<span class=\"token inserted\">+  return {</span>\n<span class=\"token inserted\">+    render: `with(this){return ${code}}`,</span>\n<span class=\"token inserted\">+    staticRenderFns: state.staticRenderFns</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`genElement`は`ASTElement`の`staticRoot?`や`for?`等を確認し，それぞれのディレクティブ・タグに対応する`Element`, `Component`を生成する.</span>\n<span class=\"token inserted\">+各々の生成は`genStatic`, `genIf`のようにそれぞれのジェネレータで行う．</span>\n<span class=\"token inserted\">+各々のジェネレータは受け取ったASTを処理した後に再帰的に`genElement`を呼び出す．  </span>\n<span class=\"token inserted\">+最終的に`genElement`は最小単位である`Element`の生成を行う．  </span>\n<span class=\"token inserted\">+`Element`は`&#x26;lt;tag data&#x26;gt;children&#x26;lt;/tag&#x26;gt;`からなるDOMである．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+以下がその生成部分.</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+data = genData(el, state)</span>\n<span class=\"token inserted\">+/* omit */</span>\n<span class=\"token inserted\">+const children = el.inlineTemplate ? null : genChildren(el, state, true)</span>\n<span class=\"token inserted\">+code = `_c('${el.tag}'${</span>\n<span class=\"token inserted\">+  data ? `,${data}` : '' // data</span>\n<span class=\"token inserted\">+}${</span>\n<span class=\"token inserted\">+  children ? `,${children}` : '' // children</span>\n<span class=\"token inserted\">+})`</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`Element`のdata部分は`genData`が担当する. data部分に含まれるのは`class`, `directive`, `model`.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+export function genData (el: ASTElement, state: CodegenState): string {</span>\n<span class=\"token inserted\">+  let data = '{'</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  // directives first.</span>\n<span class=\"token inserted\">+  // directives may mutate the el's other properties before they are generated.</span>\n<span class=\"token inserted\">+  const dirs = genDirectives(el, state)</span>\n<span class=\"token inserted\">+  if (dirs) data += dirs + ','</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+  // component v-model</span>\n<span class=\"token inserted\">+  if (el.model) {</span>\n<span class=\"token inserted\">+    data += `model:{value:${</span>\n<span class=\"token inserted\">+      el.model.value</span>\n<span class=\"token inserted\">+    },callback:${</span>\n<span class=\"token inserted\">+      el.model.callback</span>\n<span class=\"token inserted\">+    },expression:${</span>\n<span class=\"token inserted\">+      el.model.expression</span>\n<span class=\"token inserted\">+    }},`</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+  /* omit */</span>\n<span class=\"token inserted\">+  return data</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最終的に`CompiledResult`が生成される.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```js</span>\n<span class=\"token inserted\">+declare type CompiledResult = {</span>\n<span class=\"token inserted\">+  ast: ?ASTElement;</span>\n<span class=\"token inserted\">+  render: string;</span>\n<span class=\"token inserted\">+  staticRenderFns: Array&#x26;lt;string&#x26;gt;;</span>\n<span class=\"token inserted\">+  stringRenderFns?: Array&#x26;lt;string&#x26;gt;;</span>\n<span class=\"token inserted\">+  errors?: Array&#x26;lt;string | WarningMessage&#x26;gt;;</span>\n<span class=\"token inserted\">+  tips?: Array&#x26;lt;string | WarningMessage&#x26;gt;;</span>\n<span class=\"token inserted\">+};</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Summary</span>\n<span class=\"token inserted\">+- Vueのコンパイラは`parser`と`generator`からなる.</span>\n<span class=\"token inserted\">+- `parser`は`html-parse`を元にASTを生成する.</span>\n<span class=\"token inserted\">+- `generator`はASTを元に動的部分と静的部分の`render`群を生成する</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Next</span>\n<span class=\"token inserted\">+次回は`src/core/observer`を読む.  </span>\n<span class=\"token inserted\">+(名前からVueのreactive systemがObserver patternベースなんだろうな)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- [次回](/2019/08/08/internal-vue-2/)</span>\n</code></pre></div>"}],"publishedAt":"2019-07-15","updatedAt":"2021-01-30"}},"__N_SSG":true}