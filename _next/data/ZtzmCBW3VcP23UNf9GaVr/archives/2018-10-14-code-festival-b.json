{"pageProps":{"post":{"slug":"2018-10-14-code-festival-b","title":"Code Festival 2018 qual B","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder","Grid"],"content":"<p><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CODE FESTIVAL 2018 qual B</a> 予選参加記録。</p>\n<h2 id=\"a\"><a href=\"#a\"><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A</a></a></h2>\n<p>1から100の目が出るサイコロを振った時、出た目が入力<code>N</code>の倍数でない確率を求める。</p>\n<p>1から100のうち、<code>N</code>の倍数であるものは<code>N</code>で割り切れるものの個数であるから、<code>100 / N</code>個.</p>\n<p>なので<code>N</code>の倍数でないものは<code>100 - 100 / N</code>個.</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"b\"><a href=\"#b\"><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">B</a></a></h2>\n<p>数列<code>a_n, b_n</code>が与えられた時, 任意の<code>a_i in a_n</code>の値を1だけ増加させることができる。\nこれを<code>X</code>回以内行った場合に<code>\\sum a_i * b_i = a_1 * b_1 + a_2 * b_2 + ... + a_N * b_N</code>の最大値を求める。</p>\n<p>制約</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">1 &#x26;lt;= a_i, b_i &#x26;lt;= 100\n0 &#x26;lt;= X &#x26;lt;= 100</code></pre></div>\n<p>任意の<code>a_j</code>の値を一度だけ1増加させたとすると、元の配列の和からの差分は</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">(a_1 * b_1 + ... + a_j * b_j + ... a_N * b_N) - (a_1 * b_1 + ... + (a_j + 1) * b_j + ... + a_N + b_N)\n= a_j</code></pre></div>\n<p>なので、増分は<code>a_j</code>に比例する.<br>\nこれを<code>X</code>回繰り返しても増分は<code>a_j</code>に比例するし、<code>a_j</code>の大きさは変動しない.<br>\nまた、<code>b_i</code>が1以上なので、<code>a_i</code>は大きいものから1つだけ選び、その<code>a_i</code>に対して処理を行えばよい。<br>\n(仮に<code>b_i = 0</code>となる場合があるなら, そのような<code>b_i</code>に対しては<code>(a_i + k) * b_i => 0</code>なので)</p>\n<p>したがって求める値は, <code>\\sum a_n * b_n + max(a_n) * X</code>.</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ab <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ab<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ab<span class=\"token punctuation\">.</span><span class=\"token function\">sort_by_key</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ab<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> ab<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> x<span class=\"token number\">.0</span> <span class=\"token operator\">*</span> x<span class=\"token number\">.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">+</span> ab<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c\"><a href=\"#c\"><a href=\"https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C</a></a></h2>\n<p><code>N * N (N &#x3C;= 1000)</code>マスのグリッドが与えられる.<br>\nあるマスを塗るとその4近傍も塗られるとした時, グリッドを全て塗る方法を出力する.</p>\n<p>このときに塗っていいマスの上限が<code>201,800</code>マスである.</p>\n<p>以下のようにチェスのナイトが動けるマス目っぽく塗ると, 無駄なく4近傍をカバーできる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">x . . . . x . . . . x . .\n. . . x . . . . x . . . .\n. x . . . . x . . . . x .\n. . . . x . . . . x . . .\n. . x . . . . x . . . . x\nx . . . . x . . . . x . .\n. . . x . . . . x . . . .</code></pre></div>\n<p>このときに<code>N * N</code>の四隅が切り取られるので、はみ出た部分を押し込む形で塗ると上手くいく.</p>\n<p>このアプローチでいくと, <code>N = 1000</code>のときに塗るマスが<code>200,800</code>マスとなる.</p>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> vec <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ar <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ra <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ar<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ra<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> j <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> ra<span class=\"token punctuation\">[</span>j <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> flg <span class=\"token punctuation\">{</span> vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'X'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// let mut cnt = 0;</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// if vec[i][j] == 'X' { cnt += 1; }</span>\n            <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// n == 1000 -> 200,800</span>\n    <span class=\"token comment\">// println!(\"{}\", cnt);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>最初Cでn = 2の場合をアドホックに書いてて、👆の形の解答に直した後にアドホックの部分を消すのを忘れて1テストケースだけ通らない...と無駄に悩んでしまった. 解法はすぐわかったので本当にもったいない.<br>\nD, Eに関しては順位表を見てE &#x3C; DっぽかったのでEを見て撤退. いつか解けるようになりたい.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-10-14-code-festival-b.md b/_posts/2018-10-14-code-festival-b.md\nnew file mode 100644\nindex 0000000..2ba0706\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-10-14-code-festival-b.md</span>\n<span class=\"token coord\">@@ -0,0 +1,157 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: Code Festival 2018 qual B</span>\n<span class=\"token inserted\">+date: 2017-11-29</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+  - Grid</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[CODE FESTIVAL 2018 qual B](https://code-festival-2018-qualb.contest.atcoder.jp/) 予選参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [A](https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1から100の目が出るサイコロを振った時、出た目が入力`N`の倍数でない確率を求める。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1から100のうち、`N`の倍数であるものは`N`で割り切れるものの個数であるから、`100 / N`個.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なので`N`の倍数でないものは`100 - 100 / N`個.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    println!(\"{}\", 100 - 100 / n);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B](https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+数列`a_n, b_n`が与えられた時, 任意の`a_i in a_n`の値を1だけ増加させることができる。</span>\n<span class=\"token inserted\">+これを`X`回以内行った場合に`\\sum a_i * b_i = a_1 * b_1 + a_2 * b_2 + ... + a_N * b_N`の最大値を求める。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+制約</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+1 &#x26;lt;= a_i, b_i &#x26;lt;= 100</span>\n<span class=\"token inserted\">+0 &#x26;lt;= X &#x26;lt;= 100</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+任意の`a_j`の値を一度だけ1増加させたとすると、元の配列の和からの差分は</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+(a_1 * b_1 + ... + a_j * b_j + ... a_N * b_N) - (a_1 * b_1 + ... + (a_j + 1) * b_j + ... + a_N + b_N)</span>\n<span class=\"token inserted\">+= a_j</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+なので、増分は`a_j`に比例する.  </span>\n<span class=\"token inserted\">+これを`X`回繰り返しても増分は`a_j`に比例するし、`a_j`の大きさは変動しない.  </span>\n<span class=\"token inserted\">+また、`b_i`が1以上なので、`a_i`は大きいものから1つだけ選び、その`a_i`に対して処理を行えばよい。  </span>\n<span class=\"token inserted\">+(仮に`b_i = 0`となる場合があるなら, そのような`b_i`に対しては`(a_i + k) * b_i =&#x26;gt; 0`なので)  </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがって求める値は, `\\sum a_n * b_n + max(a_n) * X`.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, x) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ab = Vec::new();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        ab.push((i[0], i[1]));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    ab.sort_by_key(|x| x.1);</span>\n<span class=\"token inserted\">+    ab.reverse();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut sum = 0;</span>\n<span class=\"token inserted\">+    for x in ab.iter() {</span>\n<span class=\"token inserted\">+        sum += x.0 * x.1;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", sum + ab[0].1 * x);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C](https://code-festival-2018-qualb.contest.atcoder.jp/tasks/code_festival_2018_qualb_c)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`N * N (N &#x26;lt;= 1000)`マスのグリッドが与えられる.  </span>\n<span class=\"token inserted\">+あるマスを塗るとその4近傍も塗られるとした時, グリッドを全て塗る方法を出力する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このときに塗っていいマスの上限が`201,800`マスである.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+以下のようにチェスのナイトが動けるマス目っぽく塗ると, 無駄なく4近傍をカバーできる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+x . . . . x . . . . x . .</span>\n<span class=\"token inserted\">+. . . x . . . . x . . . .</span>\n<span class=\"token inserted\">+. x . . . . x . . . . x .</span>\n<span class=\"token inserted\">+. . . . x . . . . x . . .</span>\n<span class=\"token inserted\">+. . x . . . . x . . . . x</span>\n<span class=\"token inserted\">+x . . . . x . . . . x . .</span>\n<span class=\"token inserted\">+. . . x . . . . x . . . .</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このときに`N * N`の四隅が切り取られるので、はみ出た部分を押し込む形で塗ると上手くいく.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このアプローチでいくと, `N = 1000`のときに塗るマスが`200,800`マスとなる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut vec = vec![vec!['.'; n]; n];</span>\n<span class=\"token inserted\">+    let ar = [0, 3, 1, 4, 2];</span>\n<span class=\"token inserted\">+    let ra = [2, 4, 1, 3, 0];</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for i in 0..n { for j in 0..n {</span>\n<span class=\"token inserted\">+        let mut flg = false;</span>\n<span class=\"token inserted\">+        if j % 5 == ar[i % 5] { flg = true; }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if i == 0 {</span>\n<span class=\"token inserted\">+            if j % 5 == ra[(j + 3) % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if j == 0 {</span>\n<span class=\"token inserted\">+            if i % 5 == ar[(i + 3) % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if i == n - 1 {</span>\n<span class=\"token inserted\">+            if j % 5 == ar[(i + 1) % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if j == n - 1 {</span>\n<span class=\"token inserted\">+            if i % 5 == ra[j % 5] { flg = true; }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if flg { vec[i][j] = 'X'; }</span>\n<span class=\"token inserted\">+    }}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    // let mut cnt = 0;</span>\n<span class=\"token inserted\">+    for i in 0..n { for j in 0..n {</span>\n<span class=\"token inserted\">+            // if vec[i][j] == 'X' { cnt += 1; }</span>\n<span class=\"token inserted\">+            print!(\"{}\", vec[i][j]);</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+        println!();</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    // n == 1000 -&#x26;gt; 200,800</span>\n<span class=\"token inserted\">+    // println!(\"{}\", cnt);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+最初Cでn = 2の場合をアドホックに書いてて、👆の形の解答に直した後にアドホックの部分を消すのを忘れて1テストケースだけ通らない...と無駄に悩んでしまった. 解法はすぐわかったので本当にもったいない.  </span>\n<span class=\"token inserted\">+D, Eに関しては順位表を見てE &#x26;lt; DっぽかったのでEを見て撤退. いつか解けるようになりたい.</span>\n</code></pre></div>"}],"publishedAt":"2017-11-29","updatedAt":"2021-01-30"}},"__N_SSG":true}