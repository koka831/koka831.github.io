{"pageProps":{"post":{"slug":"2021-04-25-nextjs-from-vuepress","title":"Renewal Blog","categories":["Diary"],"image":"https://koka831.github.io/img/icon.png","tags":["Diary"],"content":"<p>1年ぶりになります．今年もよろしくお願いします．</p>\n<p>最近は紅茶コーディネータになるべく日々精進しています<sup><a href=\"#user-content-fn-tea\" id=\"user-content-fnref-tea\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>．</p>\n<h2 id=\"tldr\"><a href=\"#tldr\">TL;DR</a></h2>\n<ul>\n<li><a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VuePress</a>のアルファ版を使っていて，メンテが辛くなった</li>\n<li><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a> + <a href=\"https://github.com/remarkjs/remark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">remark</a>でMarkdown->HTMLのSGを構築した</li>\n<li><a href=\"https://github.com/koka831/koka831.github.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">できたもの</a></li>\n</ul>\n<h2 id=\"about\"><a href=\"#about\">About</a></h2>\n<p>ブログを書こうと思い立って，以前構築したブログを久々に確認した.\n今つかってるパソコンにブログのソースコードを持ってきていなかったので，<code>npm install</code>すると脆弱性の嵐.</p>\n<div class=\"remark-highlight\"><pre data-file=\"terminal\" class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">$npm i</span>\n<span class=\"token output\">removed 22 packages, changed 14 packages, and audited 1090 packages in 8s</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">33 vulnerabilities (7 low, 15 moderate, 11 high)</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">To address issues that do not require attention, run:</span>\n<span class=\"token output\">  npm audit fix</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">To address all issues, run:</span>\n<span class=\"token output\">  npm audit fix --force</span>\n<span class=\"token output\"></span>\n<span class=\"token output\">Run `npm audit` for details.</span>\n</code></pre></div>\n<p>また，ブログシステムのベースに使っているVuePressが0.xから1.8までバージョンアップしていたので，これは追従しよう.</p>\n<p>しかし早々に更新を断念. デザインをフルスクラッチでやるためにVuePressのソースを<code>eject</code>していたため，追従をすべて手でやる必要があった.</p>\n<p>ブログ自体のメンテにはそこまでコストをかけてられないので，今度は<code>eject</code>しなくてもデザインを触れるライブラリを選定することにした.</p>\n<ul>\n<li>開発言語自体にはこだわりはないが，型システムはほしい</li>\n<li>マークダウンで書ける</li>\n<li>サーバ管理は避けたいので，GitHub Pagesに載せられるもの</li>\n</ul>\n<p>を探した.最終的には次の2つから選んだ. <del>結局相当のyak shavingが発生した.</del></p>\n<h3 id=\"gatsbyjs\"><a href=\"#gatsbyjs\">Gatsby.js</a></h3>\n<p><a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby.js</a>はReact.jsをベースにしたリッチなCMSフレームワーク.バックエンドとはGraphQLで連携し，コンテンツの取得は<a href=\"https://www.contentful.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">contentful</a>+Markdownだったりと選定の自由度が高い.</p>\n<p>SGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</p>\n<h3 id=\"nextjs\"><a href=\"#nextjs\">Next.js</a></h3>\n<p><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a>はGatsby.jsと比べると薄いフレームワークで，ビルドやルーティング等ベースとなる機能の提供がメインになっている.\nStatic Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</p>\n<p>したがってCMSとして使うためにはそれ相当の機能の実装が必要となるため，<del>コストは高い</del>面白そう.</p>\n<h2 id=\"artifacts\"><a href=\"#artifacts\">Artifacts</a></h2>\n<p><a href=\"https://koka831.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">これ</a>ができた.</p>\n<h3 id=\"architecture\"><a href=\"#architecture\">Architecture</a></h3>\n<p>Next.jsの<a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>getStaticProps</code></a>と<a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>getStaticPaths</code></a>を用いて一覧・詳細ページをSG.\nコンテンツはMarkdownで記述し，<a href=\"https://github.com/remarkjs/remark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">remark</a>を用いてHTMLを生成している．\nNext.js側でも<a href=\"https://nextjs.org/blog/markdown\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDX</a>(Markdown+React Component)を描画できる仕組みがあったけど，内部で呼ばれているコンパイラに手を加えるのに難儀したため，情報の多いremarkを選んだ.</p>\n<p>(<a href=\"https://github.com/mizchi/amdx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">amdx</a>はマジですごいと思う)</p>\n<p>remarkはMarkdownを入力として，指定した形式での出力を行うプロセッサで，fig.1のように<code>Parser</code>，<code>Transformer</code>や<code>Compiler</code>といったプラグインを処理に挟むことができる.\n受け取ったMarkdownは<a href=\"https://github.com/syntax-tree/mdast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mdast</a><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>という形式のastに変換され，プラグインはmdastを受取りmdastを返すよう要求される.</p>\n<div class=\"remark-highlight\"><pre data-file=\"process\" class=\"language-asciidoc\"><code class=\"language-asciidoc\">| ........................ process ........................... |\n| .......... parse ... | ... run ... | ... stringify ..........|\n\n          <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------<span class=\"token punctuation\">+</span></span>                     <span class=\"token inline\"><span class=\"token punctuation\">+</span>----------<span class=\"token punctuation\">+</span></span>\nInput ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output\n          <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------<span class=\"token punctuation\">+</span></span>          |          <span class=\"token inline\"><span class=\"token punctuation\">+</span>----------<span class=\"token punctuation\">+</span></span>\n                              X\n                              |\n                       <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------------<span class=\"token punctuation\">+</span></span>\n                       | Transformers |\n                       <span class=\"token inline\"><span class=\"token punctuation\">+</span>--------------<span class=\"token punctuation\">+</span></span>\n</code></pre></div>\n<p><strong>fig.1 remarkの変換プロセス. 図はベースとなるunifiedから. [<a href=\"https://github.com/unifiedjs/unified#description\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">出典</a>]</strong></p>\n<p>このブログではそこそこプラグインを使っていて，中には自作したものもある<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>.</p>\n<div class=\"remark-highlight\"><pre data-file=\"interpreter.ts\" class=\"language-typescript  line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> markdownToHtml <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>markdown<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">remark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>gfm<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-gfm</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-math</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-emoji</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 自作 | VuePressで使っていたCustom Container記法に対応</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>caption<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 自作 | Markdown中の画像に対して通し番号+figcaptionを付与</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>prism<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-prism</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>externalLink<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-external-links</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>slug<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-slug</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>headings<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> behavior<span class=\"token operator\">:</span> <span class=\"token string\">\"wrap\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-autolink-headings</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>footnotes<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-footnotes</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>remark2rehype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remark-rehype | mdastからhast形式へ変換</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>katex<span class=\"token punctuation\">)</span> <span class=\"token comment\">// rehype-katex | remark-mathで変換したmarkdownでの数式をkatex記法へ変換</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>stringify<span class=\"token punctuation\">)</span> <span class=\"token comment\">// rehype-stringify</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre></div>\n<p><strong>fig.2 プラグイン一覧</strong></p>\n<h3 id=\"remark-plugin\"><a href=\"#remark-plugin\">remark plugin</a></h3>\n<p>実際作ってみると結構簡単に実装できる. READMEにあるサンプルだと型情報がなかったりで結構辛いけど，fig.1と<a href=\"https://unifiedjs.com/learn/guide/create-a-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guide</a>が参考になる.</p>\n<ul>\n<li><strong>remark-container</strong></li>\n</ul>\n<p>もともと使っていたVuePressでは，Custom Containersと呼ばれるMarkdownの拡張記法が使える<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup>.</p>\n<div class=\"remark-highlight\"><pre data-file=\"custom-container.md\" class=\"language-markdown\"><code class=\"language-markdown\">::: info Custom Title\n\nCustom Container Body\n\n:::\n</code></pre></div>\n<p><strong>fig.3 これがこうじゃ</strong></p>\n<div class=\"remark-container info\"><div class=\"remark-container__title\">Custom Title</div><p>Custom Container Body</p></div>\n<p>remark版を探すといくつか見つかったけど，どれも動かなかったので作ることにした.</p>\n<p>実装は正規表現でdirectiveにマッチした行のastを書き換えるもので，単純なため対応してないケースもある(directive内のcode blockとかnodeが分割されるケース).\nこれらの対応は<a href=\"https://github.com/remarkjs/remark-directive\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">remark-directive</a>を用いて後々やりたい.</p>\n<ul>\n<li><strong>remark-image-caption</strong></li>\n</ul>\n<p>img要素のようなself-closing tagについては<code>::before</code>等の疑似要素が使えないため，例えばMarkdownで記述した画像のタイトルをCSSのみで抽出・表示するといったことができない．</p>\n<p>画像に対してcaptionを付与するプラグインは動作するいくつか見つかったけど，画像に対して連番を振ってくれるようなものは見当たらなかった.</p>\n<div class=\"remark-highlight\"><pre data-file=\"image.md\" class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">alt text</span>](<span class=\"token url\">image.png</span> <span class=\"token string\">\"image title\"</span>)</span>\n</code></pre></div>\n<p><figure><img src=\"/img/icon.png\" alt=\"alt text\" title=\"image title\"><figcaption>img.1 image title</figcaption></figure></p>\n<p>今回作成したプラグインでは，画像を<code>&#x3C;figure></code>タグで囲んでタイトルを<code>&#x3C;figcaption></code>に設定するようにした.\nただ，この手法は例えばtableのようなMarkdown記法でタイトルを付与できない要素に対しては使えないため，画像やコード，テーブル等の直下の<code>em</code>や<code>strong</code>をcaptionとみなすといったやり方に移行すると思う.</p>\n<h3 id=\"commit-log\"><a href=\"#commit-log\">Commit Log</a></h3>\n<p>各記事の編集履歴を表示する<strong>Commits</strong>コンポーネント(↓の<strong>Commits</strong>).</p>\n<p>やっていることは単純で，<code>getStaticProps</code>呼び出し時に該当するファイルに対してのGit履歴を取得しているだけ.</p>\n<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\">Table of Contents</a></h3>\n<p>現在のページにあるheadingsから目次を構築するコンポーネント(→の目次.表示されてない人は1200px以上の画面で見てね).</p>\n<p>これは単に実装したことがなかったから作った<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">5</a></sup>.\n原理は単純で，現在のスクロール位置を取得して，通り過ぎたheadingのうち最も近いものをhighlightしている.\n最初はmarkdownを与えてheadingを抽出するやり方にしていたけど，markdown外にあるCommitsやComments等，そのページにあるheadingを動的に抽出する方針に切り替えた.</p>\n<h3 id=\"comments\"><a href=\"#comments\">Comments</a></h3>\n<p>GitHub Issueと連携したコメントコンポーネント(↓の<strong>Comments</strong>).\n<a href=\"https://utteranc.es\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">utterances</a>というサービスを利用した. ブログからコメントするにはGitHub AccountでのAuthが必要だけど，<a href=\"https://github.com/koka831/blog/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Issues</a>に直接コメントすることもできる.</p>\n<h2 id=\"これから\"><a href=\"#これから\">これから</a></h2>\n<p>フリーランスとしてのお仕事も現在は募集しておらず，自身の身の振り方については少なくとも今年いっぱいは考える予定.\nとりあえずプライベートではアルゴリズムやデータ構造等再度やっていこうと思う.</p>\n<p>紅茶コーディネータについては年初からの受講なので，順調に行けば今年の秋ころには取れるかなあ，という感じ.\nミーハーなので今年のセカンドフラッシュを楽しみにしてたりする.</p>\n<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-tea\">\n<p>余談だけど茶葉のテイスティングカップ，料理の際に調味料を混ぜる小さい容器に最適すぎる <a href=\"#user-content-fnref-tea\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-1\">\n<p>mdastは<a href=\"https://github.com/syntax-tree/unist\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">unist</a>という規格に従っていて，他にはHTMLのunist表記である<a href=\"https://github.com/syntax-tree/hast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hast</a>などがある. またmdastのプロセッサ実装(remark)があるように，hastのプロセッサには<a href=\"https://github.com/rehypejs/rehype\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rehype</a>がある. <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>remark内部で使っている<a href=\"https://github.com/remarkjs/remark/pull/536\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ライブラリの移行</a>が2020後半にあって，npmに上がっているプラグインの中にも動作しないものが少なくない. 実際動作するプラグインの中には(This plugin is made for the new parser in remark (micromark, see remarkjs/remark#536).)のように注釈があったりする. <a href=\"#user-content-fnref-2\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>大元は<a href=\"https://talk.commonmark.org/t/generic-directives-plugins-syntax/444/155\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">これ</a>っぽい. <a href=\"#user-content-fnref-3\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>今回UIコンポーネントライブラリは一切使わなかった. <del>コストとは</del> <a href=\"#user-content-fnref-4\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>","description":"scratch new blog with Next.js; switched from VuePress","commits":[{"title":"update remark-custom-container to 1.2.0","date":"2022-11-27 00:25:35","hash":"897b048f","diff":"<div class=\"remark-highlight\"><pre data-file=\"897b048f.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 897b048fe31450b5d4f6545855125b76492f9066</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sun Nov 27 00:25:35 2022 +0900\n\n  update remark-custom-container to 1.2.0\n  \n  fix\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nindex 5c8ea91..510bd8e 100644\n<span class=\"token deleted\">--- a/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n@@ -128,13 +128,17 @@ const markdownToHtml = async (markdown: string): Promise&#x26;lt;string&#x26;gt; =&#x26;gt; {\n\n\\```markdown[data-file=<span class=\"token string\">\"custom-container.md\"</span>]\n::: info Custom Title\n<span class=\"token inserted\">+</span>\nCustom Container Body\n<span class=\"token inserted\">+</span>\n:::\n\\```\n**fig.3 これがこうじゃ**\n\n::: info Custom Title\n<span class=\"token inserted\">+</span>\nCustom Container Body\n<span class=\"token inserted\">+</span>\n:::\n\nremark版を探すといくつか見つかったけど，どれも動かなかったので作ることにした.\n</code></pre></div>"},{"title":"fix: use Static Generation(SG) instead of SSG","date":"2021-10-26 22:37:38","hash":"6b966820","diff":"<div class=\"remark-highlight\"><pre data-file=\"6b966820.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 6b96682060f7a7b2f2c20048d55e37f2f9ae44eb</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Tue Oct 26 22:37:38 2021 +0900\n\n  fix: use Static Generation(SG) instead of SSG\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nindex e2e9415..5c8ea91 100644\n<span class=\"token deleted\">--- a/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n@@ -15,7 +15,7 @@ description: scratch new blog with Next.js; switched from VuePress\n<span class=\"token comment\">## TL;DR</span>\n\n<span class=\"token deleted\">- [VuePress][vuepress]のアルファ版を使っていて，メンテが辛くなった</span>\n<span class=\"token deleted\">-- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSSGを構築した</span>\n<span class=\"token inserted\">+- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSGを構築した</span>\n<span class=\"token deleted\">- [できたもの](https://github.com/koka831/koka831.github.io)</span>\n\n<span class=\"token comment\">## About</span>\n@@ -54,12 +54,12 @@ Run `npm audit` for details.\n\n[Gatsby.js][gatsby]はReact.jsをベースにしたリッチなCMSフレームワーク.バックエンドとはGraphQLで連携し，コンテンツの取得は[contentful][contentful]+Markdownだったりと選定の自由度が高い.\n\n<span class=\"token deleted\">-SSGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</span>\n<span class=\"token inserted\">+SGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</span>\n\n<span class=\"token comment\">### Next.js</span>\n\n[Next.js][next]はGatsby.jsと比べると薄いフレームワークで，ビルドやルーティング等ベースとなる機能の提供がメインになっている.\n<span class=\"token deleted\">-Server-Side Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</span>\n<span class=\"token inserted\">+Static Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</span>\n\nしたがってCMSとして使うためにはそれ相当の機能の実装が必要となるため，~コストは高い~面白そう.\n\n@@ -69,7 +69,7 @@ Server-Side Generationの仕組みはあるが，Gatsby.jsほどの最適化は\n\n<span class=\"token comment\">### Architecture</span>\n\n<span class=\"token deleted\">-Next.jsの[`getStaticProps`][getStaticProps]と[`getStaticPaths`][getStaticPaths]を用いて一覧・詳細ページをSSG.</span>\n<span class=\"token inserted\">+Next.jsの[`getStaticProps`][getStaticProps]と[`getStaticPaths`][getStaticPaths]を用いて一覧・詳細ページをSG.</span>\nコンテンツはMarkdownで記述し，[remark][remark]を用いてHTMLを生成している．\nNext.js側でも[MDX][mdx](Markdown+React Component)を描画できる仕組みがあったけど，内部で呼ばれているコンパイラに手を加えるのに難儀したため，情報の多いremarkを選んだ.\n</code></pre></div>"},{"title":"add link to github","date":"2021-04-27 22:23:26","hash":"de03b5e2","diff":"<div class=\"remark-highlight\"><pre data-file=\"de03b5e2.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit de03b5e21ad5799aed5d6ba2c87af059a6115aa2</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Tue Apr 27 22:23:26 2021 +0900\n\n  add link to github\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nindex f99a404..e2e9415 100644\n<span class=\"token deleted\">--- a/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n@@ -16,6 +16,7 @@ description: scratch new blog with Next.js; switched from VuePress\n\n<span class=\"token deleted\">- [VuePress][vuepress]のアルファ版を使っていて，メンテが辛くなった</span>\n<span class=\"token deleted\">- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSSGを構築した</span>\n<span class=\"token inserted\">+- [できたもの](https://github.com/koka831/koka831.github.io)</span>\n\n<span class=\"token comment\">## About</span>\n</code></pre></div>"},{"title":"add","date":"2021-04-27 16:59:33","hash":"ae6500c9","diff":"<div class=\"remark-highlight\"><pre data-file=\"ae6500c9.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit ae6500c9b2a3b5fd76fbf543286171fd2fb60b3f</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Tue Apr 27 16:59:33 2021 +0900\n\n  add\n\ndiff --git a/_posts/2021-04-25-nextjs-from-vuepress.md b/_posts/2021-04-25-nextjs-from-vuepress.md\nnew file mode 100644\nindex 0000000..f99a404\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2021-04-25-nextjs-from-vuepress.md</span>\n<span class=\"token coord\">@@ -0,0 +1,211 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: 'Renewal Blog'</span>\n<span class=\"token inserted\">+date: 2021-04-26</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+- Diary</span>\n<span class=\"token inserted\">+description: scratch new blog with Next.js; switched from VuePress</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1年ぶりになります．今年もよろしくお願いします．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最近は紅茶コーディネータになるべく日々精進しています[^tea]．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## TL;DR</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- [VuePress][vuepress]のアルファ版を使っていて，メンテが辛くなった</span>\n<span class=\"token inserted\">+- [Next.js][next] + [remark][remark]でMarkdown-&#x26;gt;HTMLのSSGを構築した</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## About</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ブログを書こうと思い立って，以前構築したブログを久々に確認した.</span>\n<span class=\"token inserted\">+今つかってるパソコンにブログのソースコードを持ってきていなかったので，`npm install`すると脆弱性の嵐.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```shell-session[data-file=\"terminal\"]</span>\n<span class=\"token inserted\">+$npm i</span>\n<span class=\"token inserted\">+removed 22 packages, changed 14 packages, and audited 1090 packages in 8s</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+33 vulnerabilities (7 low, 15 moderate, 11 high)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+To address issues that do not require attention, run:</span>\n<span class=\"token inserted\">+  npm audit fix</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+To address all issues, run:</span>\n<span class=\"token inserted\">+  npm audit fix --force</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Run `npm audit` for details.</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また，ブログシステムのベースに使っているVuePressが0.xから1.8までバージョンアップしていたので，これは追従しよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+しかし早々に更新を断念. デザインをフルスクラッチでやるためにVuePressのソースを`eject`していたため，追従をすべて手でやる必要があった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ブログ自体のメンテにはそこまでコストをかけてられないので，今度は`eject`しなくてもデザインを触れるライブラリを選定することにした.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+- 開発言語自体にはこだわりはないが，型システムはほしい</span>\n<span class=\"token inserted\">+- マークダウンで書ける</span>\n<span class=\"token inserted\">+- サーバ管理は避けたいので，GitHub Pagesに載せられるもの</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+を探した.最終的には次の2つから選んだ. ~結局相当のyak shavingが発生した.~</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Gatsby.js</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[Gatsby.js][gatsby]はReact.jsをベースにしたリッチなCMSフレームワーク.バックエンドとはGraphQLで連携し，コンテンツの取得は[contentful][contentful]+Markdownだったりと選定の自由度が高い.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+SSGのプロセスについてもAPIの呼び出し回数は全ページに対して1回で済む(ようなquery buildをする必要はある)ようなので，productionでの利用をするならGatsby.jsを選ぶと思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Next.js</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[Next.js][next]はGatsby.jsと比べると薄いフレームワークで，ビルドやルーティング等ベースとなる機能の提供がメインになっている.</span>\n<span class=\"token inserted\">+Server-Side Generationの仕組みはあるが，Gatsby.jsほどの最適化は行われていない感じ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがってCMSとして使うためにはそれ相当の機能の実装が必要となるため，~コストは高い~面白そう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## Artifacts</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[これ][blog]ができた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Architecture</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+Next.jsの[`getStaticProps`][getStaticProps]と[`getStaticPaths`][getStaticPaths]を用いて一覧・詳細ページをSSG.</span>\n<span class=\"token inserted\">+コンテンツはMarkdownで記述し，[remark][remark]を用いてHTMLを生成している．</span>\n<span class=\"token inserted\">+Next.js側でも[MDX][mdx](Markdown+React Component)を描画できる仕組みがあったけど，内部で呼ばれているコンパイラに手を加えるのに難儀したため，情報の多いremarkを選んだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+([amdx][amdx]はマジですごいと思う)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+remarkはMarkdownを入力として，指定した形式での出力を行うプロセッサで，fig.1のように`Parser`，`Transformer`や`Compiler`といったプラグインを処理に挟むことができる.</span>\n<span class=\"token inserted\">+受け取ったMarkdownは[mdast][mdast][^1]という形式のastに変換され，プラグインはmdastを受取りmdastを返すよう要求される.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```asciidoc[data-file=\"process\"]</span>\n<span class=\"token inserted\">+| ........................ process ........................... |</span>\n<span class=\"token inserted\">+| .......... parse ... | ... run ... | ... stringify ..........|</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+          +--------+                     +----------+</span>\n<span class=\"token inserted\">+Input -&#x26;gt;- | Parser | -&#x26;gt;- Syntax Tree -&#x26;gt;- | Compiler | -&#x26;gt;- Output</span>\n<span class=\"token inserted\">+          +--------+          |          +----------+</span>\n<span class=\"token inserted\">+                              X</span>\n<span class=\"token inserted\">+                              |</span>\n<span class=\"token inserted\">+                       +--------------+</span>\n<span class=\"token inserted\">+                       | Transformers |</span>\n<span class=\"token inserted\">+                       +--------------+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+**fig.1 remarkの変換プロセス. 図はベースとなるunifiedから. [[出典][unified-process]]**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+このブログではそこそこプラグインを使っていて，中には自作したものもある[^2].</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```typescript[data-file=\"interpreter.ts\"][class=\"line-numbers\"]</span>\n<span class=\"token inserted\">+const markdownToHtml = async (markdown: string): Promise&#x26;lt;string&#x26;gt; =&#x26;gt; {</span>\n<span class=\"token inserted\">+  const result = await remark()</span>\n<span class=\"token inserted\">+    .use(gfm) // remark-gfm</span>\n<span class=\"token inserted\">+    .use(math) // remark-math</span>\n<span class=\"token inserted\">+    .use(emoji) // remark-emoji</span>\n<span class=\"token inserted\">+    .use(container) // 自作 | VuePressで使っていたCustom Container記法に対応</span>\n<span class=\"token inserted\">+    .use(caption) // 自作 | Markdown中の画像に対して通し番号+figcaptionを付与</span>\n<span class=\"token inserted\">+    .use(prism) // remark-prism</span>\n<span class=\"token inserted\">+    .use(externalLink) // remark-external-links</span>\n<span class=\"token inserted\">+    .use(slug) // remark-slug</span>\n<span class=\"token inserted\">+    .use(headings, { behavior: \"wrap\" }) // remark-autolink-headings</span>\n<span class=\"token inserted\">+    .use(footnotes) // remark-footnotes</span>\n<span class=\"token inserted\">+    .use(remark2rehype) // remark-rehype | mdastからhast形式へ変換</span>\n<span class=\"token inserted\">+    .use(katex) // rehype-katex | remark-mathで変換したmarkdownでの数式をkatex記法へ変換</span>\n<span class=\"token inserted\">+    .use(stringify) // rehype-stringify</span>\n<span class=\"token inserted\">+    .process(markdown);</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  return result.toString();</span>\n<span class=\"token inserted\">+};</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+**fig.2 プラグイン一覧**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### remark plugin</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+実際作ってみると結構簡単に実装できる. READMEにあるサンプルだと型情報がなかったりで結構辛いけど，fig.1と[guide][unified-guide]が参考になる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+* **remark-container**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+もともと使っていたVuePressでは，Custom Containersと呼ばれるMarkdownの拡張記法が使える[^3].</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```markdown[data-file=\"custom-container.md\"]</span>\n<span class=\"token inserted\">+::: info Custom Title</span>\n<span class=\"token inserted\">+Custom Container Body</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+**fig.3 これがこうじゃ**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+::: info Custom Title</span>\n<span class=\"token inserted\">+Custom Container Body</span>\n<span class=\"token inserted\">+:::</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+remark版を探すといくつか見つかったけど，どれも動かなかったので作ることにした.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+実装は正規表現でdirectiveにマッチした行のastを書き換えるもので，単純なため対応してないケースもある(directive内のcode blockとかnodeが分割されるケース).</span>\n<span class=\"token inserted\">+これらの対応は[remark-directive][remark-directive]を用いて後々やりたい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+* **remark-image-caption**</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+img要素のようなself-closing tagについては`::before`等の疑似要素が使えないため，例えばMarkdownで記述した画像のタイトルをCSSのみで抽出・表示するといったことができない．</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+画像に対してcaptionを付与するプラグインは動作するいくつか見つかったけど，画像に対して連番を振ってくれるようなものは見当たらなかった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```markdown[data-file=\"image.md\"]</span>\n<span class=\"token inserted\">+![alt text](image.png \"image title\")</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+![alt text](/img/icon.png \"image title\")</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+今回作成したプラグインでは，画像を`&#x26;lt;figure&#x26;gt;`タグで囲んでタイトルを`&#x26;lt;figcaption&#x26;gt;`に設定するようにした.</span>\n<span class=\"token inserted\">+ただ，この手法は例えばtableのようなMarkdown記法でタイトルを付与できない要素に対しては使えないため，画像やコード，テーブル等の直下の`em`や`strong`をcaptionとみなすといったやり方に移行すると思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Commit Log</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+各記事の編集履歴を表示する**Commits**コンポーネント(↓の**Commits**).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+やっていることは単純で，`getStaticProps`呼び出し時に該当するファイルに対してのGit履歴を取得しているだけ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Table of Contents</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+現在のページにあるheadingsから目次を構築するコンポーネント(→の目次.表示されてない人は1200px以上の画面で見てね).</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+これは単に実装したことがなかったから作った[^4].</span>\n<span class=\"token inserted\">+原理は単純で，現在のスクロール位置を取得して，通り過ぎたheadingのうち最も近いものをhighlightしている.</span>\n<span class=\"token inserted\">+最初はmarkdownを与えてheadingを抽出するやり方にしていたけど，markdown外にあるCommitsやComments等，そのページにあるheadingを動的に抽出する方針に切り替えた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### Comments</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+GitHub Issueと連携したコメントコンポーネント(↓の**Comments**).</span>\n<span class=\"token inserted\">+[utterances][utterances]というサービスを利用した. ブログからコメントするにはGitHub AccountでのAuthが必要だけど，[Issues][issues]に直接コメントすることもできる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## これから</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+フリーランスとしてのお仕事も現在は募集しておらず，自身の身の振り方については少なくとも今年いっぱいは考える予定.</span>\n<span class=\"token inserted\">+とりあえずプライベートではアルゴリズムやデータ構造等再度やっていこうと思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+紅茶コーディネータについては年初からの受講なので，順調に行けば今年の秋ころには取れるかなあ，という感じ.</span>\n<span class=\"token inserted\">+ミーハーなので今年のセカンドフラッシュを楽しみにしてたりする.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[blog]: https://koka831.github.io/</span>\n<span class=\"token inserted\">+[vuepress]: https://vuepress.vuejs.org/</span>\n<span class=\"token inserted\">+[next]: https://nextjs.org/</span>\n<span class=\"token inserted\">+[remark]: https://github.com/remarkjs/remark</span>\n<span class=\"token inserted\">+[remark-directive]: https://github.com/remarkjs/remark-directive</span>\n<span class=\"token inserted\">+[gatsby]: https://www.gatsbyjs.com/</span>\n<span class=\"token inserted\">+[contentful]: https://www.contentful.com/</span>\n<span class=\"token inserted\">+[getStaticProps]: https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation</span>\n<span class=\"token inserted\">+[getStaticPaths]: https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation</span>\n<span class=\"token inserted\">+[mdx]: https://nextjs.org/blog/markdown</span>\n<span class=\"token inserted\">+[amdx]: https://github.com/mizchi/amdx</span>\n<span class=\"token inserted\">+[unified-process]: https://github.com/unifiedjs/unified#description</span>\n<span class=\"token inserted\">+[unified-guide]: https://unifiedjs.com/learn/guide/create-a-plugin/</span>\n<span class=\"token inserted\">+[unist]: https://github.com/syntax-tree/unist</span>\n<span class=\"token inserted\">+[mdast]: https://github.com/syntax-tree/mdast</span>\n<span class=\"token inserted\">+[hast]: https://github.com/syntax-tree/hast</span>\n<span class=\"token inserted\">+[rehype]: https://github.com/rehypejs/rehype</span>\n<span class=\"token inserted\">+[remark#536]: https://github.com/remarkjs/remark/pull/536</span>\n<span class=\"token inserted\">+[utterances]: https://utteranc.es</span>\n<span class=\"token inserted\">+[issues]: https://github.com/koka831/blog/issues</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^tea]: 余談だけど茶葉のテイスティングカップ，料理の際に調味料を混ぜる小さい容器に最適すぎる</span>\n<span class=\"token inserted\">+[^1]: mdastは[unist][unist]という規格に従っていて，他にはHTMLのunist表記である[hast][hast]などがある. またmdastのプロセッサ実装(remark)があるように，hastのプロセッサには[rehype][rehype]がある.</span>\n<span class=\"token inserted\">+[^2]: remark内部で使っている[ライブラリの移行][remark#536]が2020後半にあって，npmに上がっているプラグインの中にも動作しないものが少なくない. 実際動作するプラグインの中には(This plugin is made for the new parser in remark (micromark, see remarkjs/remark#536).)のように注釈があったりする.</span>\n<span class=\"token inserted\">+[^3]: 大元は[これ](https://talk.commonmark.org/t/generic-directives-plugins-syntax/444/155)っぽい.</span>\n<span class=\"token inserted\">+[^4]: 今回UIコンポーネントライブラリは一切使わなかった. ~コストとは~</span>\n</code></pre></div>"}],"publishedAt":"2021-04-26","updatedAt":"2022-11-27"}},"__N_SSG":true}