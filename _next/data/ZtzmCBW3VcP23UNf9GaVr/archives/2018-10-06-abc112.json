{"pageProps":{"post":{"slug":"2018-10-06-abc112","title":"ABC112","categories":["Competitive Programming"],"image":"https://koka831.github.io/img/icon.png","tags":["AtCoder"],"content":"<p>AtCoder Beginners Contest 112の参加記録。</p>\n<h2 id=\"a\"><a href=\"#a\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A</a></a></h2>\n<p>入力<code>N</code>が1なら指定の文字列を出力, 2なら更に標準入力から数字を読み、計算結果を出力.</p>\n<p>インタラクティブに標準入力の分岐処理を行う問題はABCだと初めて?</p>\n<h3 id=\"解答\"><a href=\"#解答\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"b\"><a href=\"#b\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">B</a></a></h2>\n<p><code>(c_i, t_i)</code>のうち、<code>t_i &#x3C;= T</code>を満たす最小の<code>c_i</code>を求める.\n存在しない場合には<code>TLE</code>を出力する。</p>\n<h3 id=\"解答-1\"><a href=\"#解答-1\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ct <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ct<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> ct<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.1</span> <span class=\"token operator\">&#x3C;=</span> t<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> ans <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"c\"><a href=\"#c\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C</a></a></h2>\n<p>座標<code>(x_i, y_i)</code>と高度<code>h_i</code>及び高度の計算式が与えられ、それを満たす中心座標及びそれの高度を求める.</p>\n<p>制約が<code>x &#x3C; 10^2, y &#x3C; 10^2, N &#x3C; 10 ^ 2</code>なので全探索でも<code>10^8</code>なので通る.\n<code>x, y</code>及び<code>n</code>を固定すれば<code>h = max(H - (X - c_x).abs() - (Y - c_y).abs(), 0)</code>から<code>H</code>は定まるが、最初<code>h_i</code>が<code>0</code>になりうるケースを考慮せずにやってWA.\nそこで, クエリを<code>h_i</code>によってソートすれば<code>max(..., 0)</code>の結果が正になるから, ここでの条件分岐を考えずに済む.</p>\n<p>後は各クエリがこの<code>x, y, h</code>と一致するか確認する.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">read_one</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> vec <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>n <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">isize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vec<span class=\"token punctuation\">.</span><span class=\"token function\">sort_by_key</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x<span class=\"token number\">.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vec<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans_y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans_h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">101</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">101</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> flg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> v<span class=\"token number\">.2</span> <span class=\"token operator\">!=</span> <span class=\"token namespace\">cmp<span class=\"token punctuation\">::</span></span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> v<span class=\"token number\">.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> v<span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                flg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> flg <span class=\"token punctuation\">{</span>\n            ans_x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            ans_y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n            ans_h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} {} {}\"</span><span class=\"token punctuation\">,</span> ans_x<span class=\"token punctuation\">,</span> ans_y<span class=\"token punctuation\">,</span> ans_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"d\"><a href=\"#d\"><a href=\"https://beta.atcoder.jp/contests/abc112/tasks/abc112_d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D</a></a></h2>\n<p>数列<code>an</code>の要素数<code>N</code>と和<code>M</code>が与えられるので、<code>an</code>の各要素の最大公約数の取りうる最大値を求める.</p>\n<p><code>a_1 + a_2 + ... + a_N</code>の最大公約数が<code>K</code>であるとき, 次のように括り出すことができる.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">K * (a_1&#x26;#39; + a_2&#x26;#39; + ... + a_N&#x26;#39;) = K * sum(a&#x26;#39;)</code></pre></div>\n<p>したがって<code>K</code>は<code>M</code>の約数.</p>\n<p>次に<code>an</code>の要素数を<code>N</code>にするためには, <code>a'</code>の要素数が<code>N</code>個である必要がある.\n<code>min(sum(a'))</code>は全ての要素が<code>1</code>の場合に<code>N</code>となるので, <code>K</code>は大きくても<code>M / N</code>の範囲であることがわかる.</p>\n<p>よって, <code>i in 1 ~ M / N</code>について,Mが割り切れる<code>i</code>のうち最大のものが答え.</p>\n<p>また制約から<code>n = 1, m = 10^9</code>のケースがありうる. その場合処理が全て走ってしまうのでTLE(1WA), その場合の処理はアドホックに書いてしまった.</p>\n<h3 id=\"解答-2\"><a href=\"#解答-2\">解答</a></h3>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">u64</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">/</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> m <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> ans <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"所感\"><a href=\"#所感\">所感</a></h2>\n<p>A -> B -> D -> Cの順で解いた.\n立ち回りは悪くなかったと思う(DよりCにかけた時間の方が長かったので).<br>\nただこのレベルで立ち回りとか考えずに全部解けるようにすべき,というのはそれはそうなので精進する.\nCに戻ってきたときに全探索が可能なことに気づくまでは早かったがそこからの比較ミスは2WAに抑えられるものだったので反省.</p>\n<p>CよりDの方が簡単じゃないですか?<br>\n2WA以上出した時は全部消して0から書き直すと吉っぽい.<br>\nこれを書いた後に見た解説放送中のコメントに, Cは<code>max(h) &#x3C;= H &#x3C;= max(h) + 200</code>に収まるからHについても全探索が可能、とあってなるほどなあとなった.</p>","description":"考察","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-10-06-abc112.md b/_posts/2018-10-06-abc112.md\nnew file mode 100644\nindex 0000000..44ab51b\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-10-06-abc112.md</span>\n<span class=\"token coord\">@@ -0,0 +1,168 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: ABC112</span>\n<span class=\"token inserted\">+date: 2018-10-06</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Competitive Programming</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - AtCoder</span>\n<span class=\"token inserted\">+description: 考察</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+AtCoder Beginners Contest 112の参加記録。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [A](https://beta.atcoder.jp/contests/abc112/tasks/abc112_a)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+入力`N`が1なら指定の文字列を出力, 2なら更に標準入力から数字を読み、計算結果を出力.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+インタラクティブに標準入力の分岐処理を行う問題はABCだと初めて?</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;String&#x26;gt;();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if n == \"1\" {</span>\n<span class=\"token inserted\">+        println!(\"Hello World\");</span>\n<span class=\"token inserted\">+    } else {</span>\n<span class=\"token inserted\">+        let a = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        let b = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        println!(\"{}\", a + b);</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [B](https://beta.atcoder.jp/contests/abc112/tasks/abc112_b)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`(c_i, t_i)`のうち、`t_i &#x26;lt;= T`を満たす最小の`c_i`を求める.</span>\n<span class=\"token inserted\">+存在しない場合には`TLE`を出力する。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, t) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ct = Vec::new();</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+        ct.push((i[0], i[1]));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let ans = ct.iter()</span>\n<span class=\"token inserted\">+        .filter(|x| x.1 &#x26;lt;= t)</span>\n<span class=\"token inserted\">+        .map(|x| x.0)</span>\n<span class=\"token inserted\">+        .min();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    match ans {</span>\n<span class=\"token inserted\">+        Some(x) =&#x26;gt; println!(\"{}\", x),</span>\n<span class=\"token inserted\">+        None =&#x26;gt; println!(\"TLE\"),</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [C](https://beta.atcoder.jp/contests/abc112/tasks/abc112_c)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+座標`(x_i, y_i)`と高度`h_i`及び高度の計算式が与えられ、それを満たす中心座標及びそれの高度を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+制約が`x &#x26;lt; 10^2, y &#x26;lt; 10^2, N &#x26;lt; 10 ^ 2`なので全探索でも`10^8`なので通る.</span>\n<span class=\"token inserted\">+`x, y`及び`n`を固定すれば`h = max(H - (X - c_x).abs() - (Y - c_y).abs(), 0)`から`H`は定まるが、最初`h_i`が`0`になりうるケースを考慮せずにやってWA.</span>\n<span class=\"token inserted\">+そこで, クエリを`h_i`によってソートすれば`max(..., 0)`の結果が正になるから, ここでの条件分岐を考えずに済む.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+後は各クエリがこの`x, y, h`と一致するか確認する.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let n = read_one::&#x26;lt;usize&#x26;gt;();</span>\n<span class=\"token inserted\">+    let mut vec = Vec::new();</span>\n<span class=\"token inserted\">+    for _ in 0..n {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;isize&#x26;gt;();</span>\n<span class=\"token inserted\">+        vec.push((i[0], i[1], i[2]));</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    vec.sort_by_key(|x| x.2);</span>\n<span class=\"token inserted\">+    vec.reverse();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ans_x = 0;</span>\n<span class=\"token inserted\">+    let mut ans_y = 0;</span>\n<span class=\"token inserted\">+    let mut ans_h = 0;</span>\n<span class=\"token inserted\">+    for x in 0..101 { for y in 0..101 {</span>\n<span class=\"token inserted\">+        let mut flg = true;</span>\n<span class=\"token inserted\">+        let h = vec[0].2 + (x - vec[0].0).abs() + (y - vec[0].1).abs();</span>\n<span class=\"token inserted\">+        for v in vec.iter() {</span>\n<span class=\"token inserted\">+            if v.2 != cmp::max(h - (x - v.0).abs() - (y - v.1).abs(), 0) {</span>\n<span class=\"token inserted\">+                flg = false;</span>\n<span class=\"token inserted\">+                continue;</span>\n<span class=\"token inserted\">+            }</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+        if flg {</span>\n<span class=\"token inserted\">+            ans_x = x;</span>\n<span class=\"token inserted\">+            ans_y = y;</span>\n<span class=\"token inserted\">+            ans_h = h;</span>\n<span class=\"token inserted\">+        }</span>\n<span class=\"token inserted\">+    }}</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{} {} {}\", ans_x, ans_y, ans_h);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## [D](https://beta.atcoder.jp/contests/abc112/tasks/abc112_d)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+数列`an`の要素数`N`と和`M`が与えられるので、`an`の各要素の最大公約数の取りうる最大値を求める.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`a_1 + a_2 + ... + a_N`の最大公約数が`K`であるとき, 次のように括り出すことができる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+K * (a_1' + a_2' + ... + a_N') = K * sum(a')</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+したがって`K`は`M`の約数.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に`an`の要素数を`N`にするためには, `a'`の要素数が`N`個である必要がある.</span>\n<span class=\"token inserted\">+`min(sum(a'))`は全ての要素が`1`の場合に`N`となるので, `K`は大きくても`M / N`の範囲であることがわかる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+よって, `i in 1 ~ M / N`について,Mが割り切れる`i`のうち最大のものが答え.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+また制約から`n = 1, m = 10^9`のケースがありうる. その場合処理が全て走ってしまうのでTLE(1WA), その場合の処理はアドホックに書いてしまった.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### 解答</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+fn main() {</span>\n<span class=\"token inserted\">+    let (n, m) = {</span>\n<span class=\"token inserted\">+        let i = read::&#x26;lt;u64&#x26;gt;();</span>\n<span class=\"token inserted\">+        (i[0], i[1])</span>\n<span class=\"token inserted\">+    };</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    let mut ans = 1;</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    if n == 1 {</span>\n<span class=\"token inserted\">+        println!(\"{}\", m);</span>\n<span class=\"token inserted\">+        return;</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    for i in 1..(m / n + 1) {</span>\n<span class=\"token inserted\">+        if m % i == 0 { ans = i; }</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+    println!(\"{}\", ans);</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## 所感</span>\n<span class=\"token inserted\">+A -&#x26;gt; B -&#x26;gt; D -&#x26;gt; Cの順で解いた.</span>\n<span class=\"token inserted\">+立ち回りは悪くなかったと思う(DよりCにかけた時間の方が長かったので).  </span>\n<span class=\"token inserted\">+ただこのレベルで立ち回りとか考えずに全部解けるようにすべき,というのはそれはそうなので精進する.</span>\n<span class=\"token inserted\">+Cに戻ってきたときに全探索が可能なことに気づくまでは早かったがそこからの比較ミスは2WAに抑えられるものだったので反省.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+CよりDの方が簡単じゃないですか?  </span>\n<span class=\"token inserted\">+2WA以上出した時は全部消して0から書き直すと吉っぽい.  </span>\n<span class=\"token inserted\">+これを書いた後に見た解説放送中のコメントに, Cは`max(h) &#x26;lt;= H &#x26;lt;= max(h) + 200`に収まるからHについても全探索が可能、とあってなるほどなあとなった.</span>\n</code></pre></div>"}],"publishedAt":"2018-10-06","updatedAt":"2021-01-30"}},"__N_SSG":true}