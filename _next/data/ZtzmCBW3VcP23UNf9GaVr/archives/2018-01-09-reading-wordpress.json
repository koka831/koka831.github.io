{"pageProps":{"post":{"slug":"2018-01-09-reading-wordpress","title":"reading wordpress","categories":["Code Reading"],"image":"https://koka831.github.io/img/2018-01-10-thumb.png","tags":["Wordpress"],"content":"<p>友人からコードリーディングの方法について聞かれたので,僕自身もCSバックグラウンドではないけれどソースコードの読み方を説明しようと思う.<br>\n以下友人向け文体.</p>\n<p>途中でプロジェクトにアサインされた時、過去の自分のコードをリファクタリングする時、OSSのコードを読む時など、ある程度の規模のソースコードを読む機会があると思う.<br>\nサーバーだったりコマンドラインツールだったり,言語も責務も異なる様々なプログラムを読む際に一貫した読み方はあるのだろうか.\n完全な解はないと思うが、僕個人の経験からすると、</p>\n<ul>\n<li>抽象化・抽象度を意識すること</li>\n<li>読まないこと\nこれらを意識するだけででソースコードはだいぶ読みやすくなる.</li>\n</ul>\n<p>抽象化・抽象度を意識するとはどういうことか.\n具体的に言うと、自分が今、全体の処理の流れのうち、どの部分を読んでいるかを意識することである。</p>\n<p>僕らは普段プログラムを書くためにOSを使っているけれど、OSは実際どんなことをしてくれているのか.<br>\nプログラムをコンパイラに喰わせると実行可能なファイルを吐いてくれるけれど、内部ではなにをしているのか.<br>\nCPUはフリップフロップ<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>という素子からできているし、フリップフロップは半導体からできている.<br>\nけれど、プログラムを組む上で僕らはそんなこと気にする必要がない.<br>\nこれが抽象化である. 内部構造を隠蔽し、表に見えるのはユーザが触って良い部分だけ.</p>\n<p>注意して欲しいのが、ここで言うユーザは必ずしも人間だけではないということ.<br>\n例えば実行中のプログラムがメモリの状態を知りたい時、直接メモリを参照するのは無理がある.\n実行中のプログラムからメモリまでには以下のような層がある.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">+-----+    +-----+    +-----------+    +---------+\n| mem | == | CPU | == | kernel/OS | == | program |\n+-----+    +-----+    +-----------+    +---------+</code></pre></div>\n<p>ではどうするか. 見えないものは下の層が知っているかもしれない.\nOSにメモリの使用状況を尋ねる命令を送るのである.</p>\n<p>上の例では物理的に層が分かれていたので抽象化の区切りが分かりやすかったが、ソフトウェアの構成も同様に抽象化が行われている.<br>\nソフトウェアのコードを読む時にも、自分が今メモリを見ているのかOSの命令を見ているのか、また隠蔽されている処理なのか、表に見えている部分なのか、どのレベルを見ているのかを意識することが必要なのがわかると思う.</p>\n<p>次に、読まないこと.\nこれは<strong>読むべき情報以外を読まない</strong>という意味.</p>\n<p>全体像を知る、というのは全部を知ることではない. 上の話でも言ったように、基本的にソフトウェアは抽象化の繰り返しで構成されている.<br>\nつまり、自分が欲しい情報の層に立った時に、表に見える情報以外は読まなくていい.\nOSがどうなっているか知りたいのにメモリを分解してみてもどうにもならない.</p>\n<p>恐らくソースコードを読むことに慣れているエンジニアはこれらを無意識に行っている.\nそのため同じ抽象度のものを見る時に,自分の培ったパターンを当てはめることができ、更に自分がコードを書く際に、同様の設計で実装することが出来る.<br>\nプロジェクトが書けるエンジニアは読む力もある.</p>\n<p>以上を踏まえてWordPressのソースコード<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>を読んでみよう.</p>\n<p>まずなにを知りたいか.\nここでは全体的な構成とCMSとしての処理の流れを把握することを目標としてみよう.</p>\n<p>全体構成を把握する場合、複数の層の責務を把握する必要があるため、特に<strong>読まない</strong>ことが重要である.<br>\nコードを実際に読む前に、まずは公式サイトやリファレンスに書いていないか確認してみよう.\nリファレンスがダメならコメントだ.</p>\n<p>公式に<a href=\"http://wpdocs.osdn.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E9%9A%8E%E5%B1%A4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ディレクトリ階層</a>というページがある.<br>\n見てみるとこれは自作テーマにおけるディレクトリ階層のようだ. 今回はWordPress自体がどのように動作するのかを知りたいので、今回は素直にコードを読むしかなさそうだ.</p>\n<p>では実際にディレクトリ構成を見てみよう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">index.php\nlicense.txt\nreadme.html\nwp-activate.php\nwp-blog-header.php\nwp-comments-post.php\nwp-config-sample.php\nwp-cron.php\nwp-links-opml.php\nwp-load.php\nwp-login.php\nwp-mail.php\nwp-settings.php\nwp-signup.php\nwp-trackback.php\nxmlrpc.php\n<span class=\"token builtin class-name\">.</span>\n├── wp-admin\n│   ├── css\n│   ├── images\n│   ├── includes\n│   ├── js\n│   ├── maint\n│   ├── network\n│   └── user\n├── wp-content\n│   ├── plugins\n│   ├── themes\n│   └index.php\n└── wp-includes\n    ├── certificates\n    ├── css\n    ├── customize\n    ├── fonts\n    ├── ID3\n    ├── images\n    ├── IXR\n    ├── js\n    ├── pomo\n    ├── random_compat\n    ├── Requests\n    ├── rest-api\n    ├── SimplePie\n    ├── Text\n    ├── theme-compat\n    ├── widgets\n    └<span class=\"token punctuation\">..</span>.\n\n<span class=\"token number\">28</span> directories\n</code></pre></div>\n<p>構成を見つつ、このうちどれが読まなくてもいいものか考えてみよう.</p>\n<p>まず<code>wp-admin/</code>. これは管理者パネル用のディレクトリだろう. CMSとしてはとりあえず読まなくても良さそうだ.</p>\n<p>次に<code>wp-content/</code>配下. <code>plugins/</code>, <code>themes/</code>は それぞれユーザインストールのプラグインとテーマ用のディレクトリだろうか.<br>\n<code>index.php</code>はルートディレクトリにもあったがどちらがエントリーポイントになるのだろう. テーマを読み込む処理はルーティング後に行われるだろうからとりあえずは後回しにしよう.</p>\n<p>最後に<code>wp-includes</code>はどうだろう.<br>\n大抵<code>includes/</code>ディレクトリにはシステムで利用するライブラリ等が置かれる. 読むのは必要な機能が出てきてからで良さそうだ.</p>\n<p>つまり最初に読む必要があるのはこれらになりそうだ.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ tree -I <span class=\"token string\">'wp-includes|wp-admin|themes|plugins|licence|readme'</span>\n\n├── index.php\n├── wp-activate.php\n├── wp-blog-header.php\n├── wp-comments-post.php\n├── wp-config-sample.php\n├── wp-content\n│   └── index.php\n├── wp-cron.php\n├── wp-links-opml.php\n├── wp-load.php\n├── wp-login.php\n├── wp-mail.php\n├── wp-settings.php\n├── wp-signup.php\n├── wp-trackback.php\n└── xmlrpc.php\n\n<span class=\"token number\">1</span> directory, <span class=\"token number\">17</span> files\n</code></pre></div>\n<p>では実際の処理の流れを追っていこう.</p>\n<p>大抵WordPressはApacheやNginx等のウェブサーバを介してPHP-FPMやFastCGIを用いてホスティングされる.<br>\nApacheであれば<code>DirectoryIndex</code>, Nginxであれば<code>http</code>ディレクティブ内の<code>index</code>に、ウェブサーバにアクセスがあった時に最初にアクセスされるファイルが指定されている.</p>\n<div class=\"remark-highlight\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token comment\"># nginx.conf</span>\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># ...</span>\n  <span class=\"token directive\"><span class=\"token keyword\">index</span>                index.php index.html index.htm</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>なので<code>/index.php</code>が最初に読み込まれる.\n処理より流れを把握することを意識して実際に読んでいこう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/* index.php */</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'WP_USE_THEMES'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'/wp-blog-header.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>index.php</code>では定数を定義して、<code>wp-blog-header.php</code>を読み込んでいる.\nでは<code>wp-blog-header.php</code>を見てみよう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/* wp-blog-header.php */</span>\n<span class=\"token comment\">/* Loads the WordPress environment and template. */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$wp_did_header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$wp_did_header</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Load the WordPress library. */</span>\n  <span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/wp-load.php'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Set up the WordPress query. */</span>\n  <span class=\"token function\">wp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Load the theme template. */</span>\n  <span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">ABSPATH</span> <span class=\"token operator\">.</span> <span class=\"token constant\">WPINC</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/template-loader.php'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<blockquote>\n<p>Loads the WordPress environment and template.</p>\n</blockquote>\n<p>とあるので、<code>wp-load.php</code>が\"environment\"、定数やデータベースの設定を、<code>template-loader.php</code>が\"template\"、<code>wp-contents/themes</code>のテーマテンプレートをロードするファイルなのだろう.<br>\nでは<code>wp()</code>は? <code>wp()</code>を呼ぶ前にインクルードしたファイルは<code>wp-load.php</code>しかないので、ここで定義されているのだろう.<br>\nそして\"Set up the WordPress query.\"とはどういうことだろう.<br>\n順に追っていこう.</p>\n<h4 id=\"wp-loadphp\"><a href=\"#wp-loadphp\">wp-load.php</a></h4>\n<p>コメントを読むと</p>\n<ul>\n<li>ABSPATHの定義</li>\n<li><code>wp-config.php</code>, <code>wp-settings.php</code>のロード\n<ul>\n<li>ファイルが存在しなければセットアップするように表示する\nと書いてある.\nセットアップ時のエラーハンドリングもCMSの機能としては本質ではないので、ここもコメントを読んでこれくらいで次に進むようにしよう.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"wp-configphp\"><a href=\"#wp-configphp\">wp-config.php</a></h4>\n<p>これは初期状態では存在しない. <code>wp-config-sample.php</code>をベースにセットアップ時に作成されるようだ.\nこのファイルでは</p>\n<ul>\n<li>MySQL settings</li>\n<li>Secret Keys</li>\n<li>Database table prefix</li>\n<li>ABSPATH\nの定義がされるようだ.</li>\n</ul>\n<p><code>wp-load.php</code>でABSPATHの定義をしたはずなのに、どうしてまた定義するのだろうか?\nとりあえず全体像を確認するためにこれは置いておこう.</p>\n<h4 id=\"wp-settingsphp\"><a href=\"#wp-settingsphp\">wp-settings.php</a></h4>\n<p>トップレベルコメントには、</p>\n<blockquote>\n<p>Used to set up and fix common variables and include the WordPress procedural and class library</p>\n</blockquote>\n<p>とあるので、基本的な関数やクラスのロードが行われるのだろう.</p>\n<p>次に進みたいけれどまだ<code>wp()</code>が見つかっていない. 恐らく<code>wp-settings.php</code>で読み込んでいるファイルのどれかに定義されているのだろう.<br>\nただこの量の<code>require</code>文を全て読んでいくのはしんどい.</p>\n<p>こんな時は<strong>タグジャンプ</strong>を使ってみよう.<br>\nタグジャンプとは、ctagsを用いてソースコードを静的解析し、定義元のファイルを開く方法である.\nVimやSublime Textのプラグインとして公開されているものがあるので使ってみよう.\nもちろんgrepでもいい.</p>\n<p>そうして<code>wp-includes/functions.php</code>に<code>wp()</code>を見つけた.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n * Set up the WordPress query.\n *\n * <span class=\"token keyword\">@since</span> 2.0.0\n *\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP</span>       <span class=\"token parameter\">$wp_locale</span>\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP_Query</span> <span class=\"token parameter\">$wp_query</span>\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP_Query</span> <span class=\"token parameter\">$wp_the_query</span>\n *\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">array</span></span> <span class=\"token parameter\">$query_vars</span> Default WP_Query arguments.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">wp</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$query_vars</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">global</span> <span class=\"token variable\">$wp</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$wp_query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$wp_the_query</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$wp</span><span class=\"token operator\">-></span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$query_vars</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$wp_the_query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$wp_the_query</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$wp_query</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>なるほど、この<code>$wp</code>がメインのオブジェクトなのだろう.<br>\n@globalとあるので、<code>$GLOBALS['wp']</code>を定義している箇所を探してみよう.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// wp-settings.php</span>\n<span class=\"token doc-comment comment\">/**\n * WordPress Object\n * <span class=\"token keyword\">@global</span> <span class=\"token class-name\">WP</span> <span class=\"token parameter\">$wp</span>\n * <span class=\"token keyword\">@since</span> 2.0.0\n */</span>\n<span class=\"token global\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'wp'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>$wp</code>の実態はclass WPのインスタンスだった.<br>\n<code>$wp->main( $query_vars )</code>とあったので、WPクラスのmainメソッドを見てみよう.<br>\nWPクラスは<code>wp-includes/class-wp.php</code>に定義されている.</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n * Sets up all of the variables required by the WordPress environment.\n *\n * The action <span class=\"token punctuation\">{</span><span class=\"token keyword\">@see</span> 'wp'<span class=\"token punctuation\">}</span> has one parameter that references the WP object. It\n * allows for accessing the properties and methods to further manipulate the\n * object.\n *\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">array</span></span> <span class=\"token parameter\">$query_args</span> Passed to parse_request().\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query_args</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">parse_request</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query_args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">send_headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">query_posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">handle_404</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">register_globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * Fires once the WordPress environment has been set up.\n   *\n   * <span class=\"token keyword\">@since</span> 2.1.0\n   *\n   * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">WP</span> <span class=\"token parameter\">$this</span> Current WordPress environment instance (passed by reference).\n   */</span>\n  <span class=\"token function\">do_action_ref_array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'wp'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&#x26;</span><span class=\"token this keyword\">$this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ようやく実態が見えてきた. ここでそれぞれのメソッドを読みたい気持ちをこらえて、最後のフェーズ、<code>wp-includes/template-loader.php</code>を読んでいこう.</p>\n<h4 id=\"template-loaderphp\"><a href=\"#template-loaderphp\">template-loader.php</a></h4>\n<p>まず<code>do_action( 'template_redirect' )</code>が目につく.<br>\nコメントを見るとどのテンプレートを読むかを判断する命令を送っているようだ.<br>\n<code>do_action()</code>は命令に応じたアクションを呼び出す関数らしい. これも後で確認してみよう.</p>\n<p>読み進めると、elseifの分岐に圧倒されるが<code>is_</code>でリクエストされたページのタイプを判定して、それにあったテンプレートをレンダリングする関数を呼んでいるだけのようだ.<br>\n<code>is_</code>系の関数が全て引数を取っていないので、先の<code>main()</code>関数で読んでいた<br>\n<code>$this->register_globals()</code>でそれらの情報もグローバル変数に定義しているのだろう.</p>\n<p>ここまで読んだ流れをまとめると次のようになる.</p>\n<p><figure><img src=\"./img/2018-01-10.png\" alt=\"\"><figcaption>img.1 </figcaption></figure></p>\n<h4 id=\"終わりに\"><a href=\"#終わりに\">終わりに</a></h4>\n<p>これで予想も交えながらではあったが処理の流れをさらうことができた.<br>\n内容の確認よりも確認する手順を自分の思考とともに紹介することに重きをおいたので、課題がそのまま残っている. 良かったら読んで教えて欲しい.</p>\n<h3 id=\"reference\"><a href=\"#reference\">reference</a></h3>\n<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\"><a href=\"#footnote-label\">Footnotes</a></h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><a href=\"https://ja.wikipedia.org/wiki/%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97#D%E5%9E%8B%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wikipedia</a> <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>WordPress/ver.4.9 <a href=\"#user-content-fnref-2\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>","description":"How to read source code with an example","commits":[{"title":"tweak ogp","date":"2021-04-22 15:12:31","hash":"cd43e57e","diff":"<div class=\"remark-highlight\"><pre data-file=\"cd43e57e.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit cd43e57eef247d695ae5d7ec91dd77bdd26b3d1d</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Thu Apr 22 15:12:31 2021 +0900\n\n  tweak ogp\n\ndiff --git a/_posts/2018-01-09-reading-wordpress.md b/_posts/2018-01-09-reading-wordpress.md\nindex f6c20d2..d0792b0 100644\n<span class=\"token deleted\">--- a/_posts/2018-01-09-reading-wordpress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-09-reading-wordpress.md</span>\n@@ -3,7 +3,7 @@ title: reading wordpress\ndate: 2018-01-09\ncategories:\n<span class=\"token deleted\">- Code Reading</span>\n<span class=\"token deleted\">-image: /img/2018-01-10-thumb.png</span>\n<span class=\"token inserted\">+image: 2018-01-10-thumb.png</span>\ntags:\n - Wordpress\ndescription: How to read source code with an example\n</code></pre></div>"},{"title":"tweak","date":"2021-04-22 01:20:00","hash":"fabe928f","diff":"<div class=\"remark-highlight\"><pre data-file=\"fabe928f.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit fabe928f5f60875b34ca333ba1bd5f4c21c143d1</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Thu Apr 22 01:20:00 2021 +0900\n\n  tweak\n\ndiff --git a/_posts/2018-01-09-reading-wordpress.md b/_posts/2018-01-09-reading-wordpress.md\nindex 4934b7f..f6c20d2 100644\n<span class=\"token deleted\">--- a/_posts/2018-01-09-reading-wordpress.md</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-09-reading-wordpress.md</span>\n@@ -3,7 +3,7 @@ title: reading wordpress\ndate: 2018-01-09\ncategories:\n<span class=\"token deleted\">- Code Reading</span>\n<span class=\"token deleted\">-image: /assets/img/2018-01-10-thumb.png</span>\n<span class=\"token inserted\">+image: /img/2018-01-10-thumb.png</span>\ntags:\n - Wordpress\ndescription: How to read source code with an example\n</code></pre></div>"},{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-01-09-reading-wordpress.md b/_posts/2018-01-09-reading-wordpress.md\nnew file mode 100644\nindex 0000000..4934b7f\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-09-reading-wordpress.md</span>\n<span class=\"token coord\">@@ -0,0 +1,334 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: reading wordpress</span>\n<span class=\"token inserted\">+date: 2018-01-09</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Code Reading</span>\n<span class=\"token inserted\">+image: /assets/img/2018-01-10-thumb.png</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - Wordpress</span>\n<span class=\"token inserted\">+description: How to read source code with an example</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+ </span>\n<span class=\"token inserted\">+友人からコードリーディングの方法について聞かれたので,僕自身もCSバックグラウンドではないけれどソースコードの読み方を説明しようと思う.  </span>\n<span class=\"token inserted\">+以下友人向け文体.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+途中でプロジェクトにアサインされた時、過去の自分のコードをリファクタリングする時、OSSのコードを読む時など、ある程度の規模のソースコードを読む機会があると思う.  </span>\n<span class=\"token inserted\">+サーバーだったりコマンドラインツールだったり,言語も責務も異なる様々なプログラムを読む際に一貫した読み方はあるのだろうか.</span>\n<span class=\"token inserted\">+完全な解はないと思うが、僕個人の経験からすると、</span>\n<span class=\"token inserted\">+- 抽象化・抽象度を意識すること</span>\n<span class=\"token inserted\">+- 読まないこと</span>\n<span class=\"token inserted\">+これらを意識するだけででソースコードはだいぶ読みやすくなる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+抽象化・抽象度を意識するとはどういうことか.</span>\n<span class=\"token inserted\">+具体的に言うと、自分が今、全体の処理の流れのうち、どの部分を読んでいるかを意識することである。</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+僕らは普段プログラムを書くためにOSを使っているけれど、OSは実際どんなことをしてくれているのか.  </span>\n<span class=\"token inserted\">+プログラムをコンパイラに喰わせると実行可能なファイルを吐いてくれるけれど、内部ではなにをしているのか.  </span>\n<span class=\"token inserted\">+CPUはフリップフロップ[^1]という素子からできているし、フリップフロップは半導体からできている.  </span>\n<span class=\"token inserted\">+けれど、プログラムを組む上で僕らはそんなこと気にする必要がない.  </span>\n<span class=\"token inserted\">+これが抽象化である. 内部構造を隠蔽し、表に見えるのはユーザが触って良い部分だけ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+注意して欲しいのが、ここで言うユーザは必ずしも人間だけではないということ.  </span>\n<span class=\"token inserted\">+例えば実行中のプログラムがメモリの状態を知りたい時、直接メモリを参照するのは無理がある.</span>\n<span class=\"token inserted\">+実行中のプログラムからメモリまでには以下のような層がある.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">++-----+    +-----+    +-----------+    +---------+</span>\n<span class=\"token inserted\">+| mem | == | CPU | == | kernel/OS | == | program |</span>\n<span class=\"token inserted\">++-----+    +-----+    +-----------+    +---------+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ではどうするか. 見えないものは下の層が知っているかもしれない.</span>\n<span class=\"token inserted\">+OSにメモリの使用状況を尋ねる命令を送るのである.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+上の例では物理的に層が分かれていたので抽象化の区切りが分かりやすかったが、ソフトウェアの構成も同様に抽象化が行われている.  </span>\n<span class=\"token inserted\">+ソフトウェアのコードを読む時にも、自分が今メモリを見ているのかOSの命令を見ているのか、また隠蔽されている処理なのか、表に見えている部分なのか、どのレベルを見ているのかを意識することが必要なのがわかると思う.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に、読まないこと.</span>\n<span class=\"token inserted\">+これは**読むべき情報以外を読まない**という意味.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+全体像を知る、というのは全部を知ることではない. 上の話でも言ったように、基本的にソフトウェアは抽象化の繰り返しで構成されている.  </span>\n<span class=\"token inserted\">+つまり、自分が欲しい情報の層に立った時に、表に見える情報以外は読まなくていい.</span>\n<span class=\"token inserted\">+OSがどうなっているか知りたいのにメモリを分解してみてもどうにもならない.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+恐らくソースコードを読むことに慣れているエンジニアはこれらを無意識に行っている.</span>\n<span class=\"token inserted\">+そのため同じ抽象度のものを見る時に,自分の培ったパターンを当てはめることができ、更に自分がコードを書く際に、同様の設計で実装することが出来る.  </span>\n<span class=\"token inserted\">+プロジェクトが書けるエンジニアは読む力もある.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+以上を踏まえてWordPressのソースコード[^2]を読んでみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+まずなにを知りたいか.</span>\n<span class=\"token inserted\">+ここでは全体的な構成とCMSとしての処理の流れを把握することを目標としてみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+全体構成を把握する場合、複数の層の責務を把握する必要があるため、特に**読まない**ことが重要である.  </span>\n<span class=\"token inserted\">+コードを実際に読む前に、まずは公式サイトやリファレンスに書いていないか確認してみよう.</span>\n<span class=\"token inserted\">+リファレンスがダメならコメントだ. </span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+公式に[ディレクトリ階層](http://wpdocs.osdn.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E9%9A%8E%E5%B1%A4)というページがある.   </span>\n<span class=\"token inserted\">+見てみるとこれは自作テーマにおけるディレクトリ階層のようだ. 今回はWordPress自体がどのように動作するのかを知りたいので、今回は素直にコードを読むしかなさそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+では実際にディレクトリ構成を見てみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```shell</span>\n<span class=\"token inserted\">+index.php</span>\n<span class=\"token inserted\">+license.txt</span>\n<span class=\"token inserted\">+readme.html</span>\n<span class=\"token inserted\">+wp-activate.php</span>\n<span class=\"token inserted\">+wp-blog-header.php</span>\n<span class=\"token inserted\">+wp-comments-post.php</span>\n<span class=\"token inserted\">+wp-config-sample.php</span>\n<span class=\"token inserted\">+wp-cron.php</span>\n<span class=\"token inserted\">+wp-links-opml.php</span>\n<span class=\"token inserted\">+wp-load.php</span>\n<span class=\"token inserted\">+wp-login.php</span>\n<span class=\"token inserted\">+wp-mail.php</span>\n<span class=\"token inserted\">+wp-settings.php</span>\n<span class=\"token inserted\">+wp-signup.php</span>\n<span class=\"token inserted\">+wp-trackback.php</span>\n<span class=\"token inserted\">+xmlrpc.php</span>\n<span class=\"token inserted\">+.</span>\n<span class=\"token inserted\">+├── wp-admin</span>\n<span class=\"token inserted\">+│   ├── css</span>\n<span class=\"token inserted\">+│   ├── images</span>\n<span class=\"token inserted\">+│   ├── includes</span>\n<span class=\"token inserted\">+│   ├── js</span>\n<span class=\"token inserted\">+│   ├── maint</span>\n<span class=\"token inserted\">+│   ├── network</span>\n<span class=\"token inserted\">+│   └── user</span>\n<span class=\"token inserted\">+├── wp-content</span>\n<span class=\"token inserted\">+│   ├── plugins</span>\n<span class=\"token inserted\">+│   ├── themes</span>\n<span class=\"token inserted\">+│   └index.php</span>\n<span class=\"token inserted\">+└── wp-includes</span>\n<span class=\"token inserted\">+    ├── certificates</span>\n<span class=\"token inserted\">+    ├── css</span>\n<span class=\"token inserted\">+    ├── customize</span>\n<span class=\"token inserted\">+    ├── fonts</span>\n<span class=\"token inserted\">+    ├── ID3</span>\n<span class=\"token inserted\">+    ├── images</span>\n<span class=\"token inserted\">+    ├── IXR</span>\n<span class=\"token inserted\">+    ├── js</span>\n<span class=\"token inserted\">+    ├── pomo</span>\n<span class=\"token inserted\">+    ├── random_compat</span>\n<span class=\"token inserted\">+    ├── Requests</span>\n<span class=\"token inserted\">+    ├── rest-api</span>\n<span class=\"token inserted\">+    ├── SimplePie</span>\n<span class=\"token inserted\">+    ├── Text</span>\n<span class=\"token inserted\">+    ├── theme-compat</span>\n<span class=\"token inserted\">+    ├── widgets</span>\n<span class=\"token inserted\">+    └...</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+28 directories</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+構成を見つつ、このうちどれが読まなくてもいいものか考えてみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+まず`wp-admin/`. これは管理者パネル用のディレクトリだろう. CMSとしてはとりあえず読まなくても良さそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に`wp-content/`配下. `plugins/`, `themes/`は それぞれユーザインストールのプラグインとテーマ用のディレクトリだろうか.  </span>\n<span class=\"token inserted\">+`index.php`はルートディレクトリにもあったがどちらがエントリーポイントになるのだろう. テーマを読み込む処理はルーティング後に行われるだろうからとりあえずは後回しにしよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+最後に`wp-includes`はどうだろう.  </span>\n<span class=\"token inserted\">+大抵`includes/`ディレクトリにはシステムで利用するライブラリ等が置かれる. 読むのは必要な機能が出てきてからで良さそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+つまり最初に読む必要があるのはこれらになりそうだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```shell</span>\n<span class=\"token inserted\">+$ tree -I 'wp-includes|wp-admin|themes|plugins|licence|readme'</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+├── index.php</span>\n<span class=\"token inserted\">+├── wp-activate.php</span>\n<span class=\"token inserted\">+├── wp-blog-header.php</span>\n<span class=\"token inserted\">+├── wp-comments-post.php</span>\n<span class=\"token inserted\">+├── wp-config-sample.php</span>\n<span class=\"token inserted\">+├── wp-content</span>\n<span class=\"token inserted\">+│   └── index.php</span>\n<span class=\"token inserted\">+├── wp-cron.php</span>\n<span class=\"token inserted\">+├── wp-links-opml.php</span>\n<span class=\"token inserted\">+├── wp-load.php</span>\n<span class=\"token inserted\">+├── wp-login.php</span>\n<span class=\"token inserted\">+├── wp-mail.php</span>\n<span class=\"token inserted\">+├── wp-settings.php</span>\n<span class=\"token inserted\">+├── wp-signup.php</span>\n<span class=\"token inserted\">+├── wp-trackback.php</span>\n<span class=\"token inserted\">+└── xmlrpc.php</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+1 directory, 17 files</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+では実際の処理の流れを追っていこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+大抵WordPressはApacheやNginx等のウェブサーバを介してPHP-FPMやFastCGIを用いてホスティングされる.  </span>\n<span class=\"token inserted\">+Apacheであれば`DirectoryIndex`, Nginxであれば`http`ディレクティブ内の`index`に、ウェブサーバにアクセスがあった時に最初にアクセスされるファイルが指定されている.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```nginx</span>\n<span class=\"token inserted\">+# nginx.conf</span>\n<span class=\"token inserted\">+http {</span>\n<span class=\"token inserted\">+  # ...</span>\n<span class=\"token inserted\">+  index                index.php index.html index.htm;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なので`/index.php`が最初に読み込まれる.</span>\n<span class=\"token inserted\">+処理より流れを把握することを意識して実際に読んでいこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/* index.php */</span>\n<span class=\"token inserted\">+define('WP_USE_THEMES', true);</span>\n<span class=\"token inserted\">+require( dirname(__FILE__).'/wp-blog-header.php');</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`index.php`では定数を定義して、`wp-blog-header.php`を読み込んでいる.</span>\n<span class=\"token inserted\">+では`wp-blog-header.php`を見てみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/* wp-blog-header.php */</span>\n<span class=\"token inserted\">+/* Loads the WordPress environment and template. */</span>\n<span class=\"token inserted\">+if (!isset($wp_did_header)) {</span>\n<span class=\"token inserted\">+  $wp_did_header = true;</span>\n<span class=\"token inserted\">+  /* Load the WordPress library. */</span>\n<span class=\"token inserted\">+  require_once( dirname(__FILE__) . '/wp-load.php' );</span>\n<span class=\"token inserted\">+  /* Set up the WordPress query. */</span>\n<span class=\"token inserted\">+  wp();</span>\n<span class=\"token inserted\">+  /* Load the theme template. */</span>\n<span class=\"token inserted\">+  require_once( ABSPATH . WPINC . '/template-loader.php' );</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+&#x26;gt; Loads the WordPress environment and template.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+とあるので、`wp-load.php`が\"environment\"、定数やデータベースの設定を、`template-loader.php`が\"template\"、`wp-contents/themes`のテーマテンプレートをロードするファイルなのだろう.  </span>\n<span class=\"token inserted\">+では`wp()`は? `wp()`を呼ぶ前にインクルードしたファイルは`wp-load.php`しかないので、ここで定義されているのだろう.  </span>\n<span class=\"token inserted\">+そして\"Set up the WordPress query.\"とはどういうことだろう.  </span>\n<span class=\"token inserted\">+順に追っていこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### wp-load.php</span>\n<span class=\"token inserted\">+コメントを読むと</span>\n<span class=\"token inserted\">+- ABSPATHの定義</span>\n<span class=\"token inserted\">+- `wp-config.php`, `wp-settings.php`のロード</span>\n<span class=\"token inserted\">+  - ファイルが存在しなければセットアップするように表示する</span>\n<span class=\"token inserted\">+と書いてある.</span>\n<span class=\"token inserted\">+セットアップ時のエラーハンドリングもCMSの機能としては本質ではないので、ここもコメントを読んでこれくらいで次に進むようにしよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### wp-config.php</span>\n<span class=\"token inserted\">+これは初期状態では存在しない. `wp-config-sample.php`をベースにセットアップ時に作成されるようだ.</span>\n<span class=\"token inserted\">+このファイルでは</span>\n<span class=\"token inserted\">+- MySQL settings</span>\n<span class=\"token inserted\">+- Secret Keys</span>\n<span class=\"token inserted\">+- Database table prefix</span>\n<span class=\"token inserted\">+- ABSPATH</span>\n<span class=\"token inserted\">+の定義がされるようだ.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`wp-load.php`でABSPATHの定義をしたはずなのに、どうしてまた定義するのだろうか?</span>\n<span class=\"token inserted\">+とりあえず全体像を確認するためにこれは置いておこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### wp-settings.php</span>\n<span class=\"token inserted\">+トップレベルコメントには、</span>\n<span class=\"token inserted\">+&#x26;gt; Used to set up and fix common variables and include the WordPress procedural and class library</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+とあるので、基本的な関数やクラスのロードが行われるのだろう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+次に進みたいけれどまだ`wp()`が見つかっていない. 恐らく`wp-settings.php`で読み込んでいるファイルのどれかに定義されているのだろう.   </span>\n<span class=\"token inserted\">+ただこの量の`require`文を全て読んでいくのはしんどい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+こんな時は**タグジャンプ**を使ってみよう.  </span>\n<span class=\"token inserted\">+タグジャンプとは、ctagsを用いてソースコードを静的解析し、定義元のファイルを開く方法である.</span>\n<span class=\"token inserted\">+VimやSublime Textのプラグインとして公開されているものがあるので使ってみよう.</span>\n<span class=\"token inserted\">+もちろんgrepでもいい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+そうして`wp-includes/functions.php`に`wp()`を見つけた.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * Set up the WordPress query.</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @since 2.0.0</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @global WP       $wp_locale</span>\n<span class=\"token inserted\">+ * @global WP_Query $wp_query</span>\n<span class=\"token inserted\">+ * @global WP_Query $wp_the_query</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @param string|array $query_vars Default WP_Query arguments.</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+function wp( $query_vars = '' ) {</span>\n<span class=\"token inserted\">+  global $wp, $wp_query, $wp_the_query;</span>\n<span class=\"token inserted\">+  $wp-&#x26;gt;main( $query_vars );</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  if ( !isset($wp_the_query) )</span>\n<span class=\"token inserted\">+    $wp_the_query = $wp_query;</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+なるほど、この`$wp`がメインのオブジェクトなのだろう.   </span>\n<span class=\"token inserted\">+@globalとあるので、`$GLOBALS['wp']`を定義している箇所を探してみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+// wp-settings.php</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * WordPress Object</span>\n<span class=\"token inserted\">+ * @global WP $wp</span>\n<span class=\"token inserted\">+ * @since 2.0.0</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+$GLOBALS['wp'] = new WP();</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+`$wp`の実態はclass WPのインスタンスだった.  </span>\n<span class=\"token inserted\">+`$wp-&#x26;gt;main( $query_vars )`とあったので、WPクラスのmainメソッドを見てみよう.  </span>\n<span class=\"token inserted\">+WPクラスは`wp-includes/class-wp.php`に定義されている.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```php</span>\n<span class=\"token inserted\">+/**</span>\n<span class=\"token inserted\">+ * Sets up all of the variables required by the WordPress environment.</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * The action {@see 'wp'} has one parameter that references the WP object. It</span>\n<span class=\"token inserted\">+ * allows for accessing the properties and methods to further manipulate the</span>\n<span class=\"token inserted\">+ * object.</span>\n<span class=\"token inserted\">+ *</span>\n<span class=\"token inserted\">+ * @param string|array $query_args Passed to parse_request().</span>\n<span class=\"token inserted\">+ */</span>\n<span class=\"token inserted\">+public function main($query_args = '') {</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;init();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;parse_request($query_args);</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;send_headers();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;query_posts();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;handle_404();</span>\n<span class=\"token inserted\">+  $this-&#x26;gt;register_globals();</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  /**</span>\n<span class=\"token inserted\">+   * Fires once the WordPress environment has been set up.</span>\n<span class=\"token inserted\">+   *</span>\n<span class=\"token inserted\">+   * @since 2.1.0</span>\n<span class=\"token inserted\">+   *</span>\n<span class=\"token inserted\">+   * @param WP $this Current WordPress environment instance (passed by reference).</span>\n<span class=\"token inserted\">+   */</span>\n<span class=\"token inserted\">+  do_action_ref_array( 'wp', array( &#x26;$this ) );</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+ようやく実態が見えてきた. ここでそれぞれのメソッドを読みたい気持ちをこらえて、最後のフェーズ、`wp-includes/template-loader.php`を読んでいこう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### template-loader.php</span>\n<span class=\"token inserted\">+まず`do_action( 'template_redirect' )`が目につく.   </span>\n<span class=\"token inserted\">+コメントを見るとどのテンプレートを読むかを判断する命令を送っているようだ.   </span>\n<span class=\"token inserted\">+`do_action()`は命令に応じたアクションを呼び出す関数らしい. これも後で確認してみよう.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+読み進めると、elseifの分岐に圧倒されるが`is_`でリクエストされたページのタイプを判定して、それにあったテンプレートをレンダリングする関数を呼んでいるだけのようだ.   </span>\n<span class=\"token inserted\">+`is_`系の関数が全て引数を取っていないので、先の`main()`関数で読んでいた  </span>\n<span class=\"token inserted\">+`$this-&#x26;gt;register_globals()`でそれらの情報もグローバル変数に定義しているのだろう.</span>\n<span class=\"token inserted\">+  </span>\n<span class=\"token inserted\">+ここまで読んだ流れをまとめると次のようになる.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+![](./img/2018-01-10.png)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+#### 終わりに</span>\n<span class=\"token inserted\">+これで予想も交えながらではあったが処理の流れをさらうことができた.  </span>\n<span class=\"token inserted\">+内容の確認よりも確認する手順を自分の思考とともに紹介することに重きをおいたので、課題がそのまま残っている. 良かったら読んで教えて欲しい.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+### reference</span>\n<span class=\"token inserted\">+[^1]: [wikipedia](https://ja.wikipedia.org/wiki/%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97#D%E5%9E%8B%E3%83%95%E3%83%AA%E3%83%83%E3%83%97%E3%83%95%E3%83%AD%E3%83%83%E3%83%97)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[^2]: WordPress/ver.4.9</span>\n</code></pre></div>"}],"publishedAt":"2018-01-09","updatedAt":"2021-04-22"}},"__N_SSG":true}