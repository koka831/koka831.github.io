{"pageProps":{"post":{"slug":"2018-01-11-reading-futures-await","title":"memo:reading futures-await","categories":["Code Reading"],"image":"https://koka831.github.io/img/icon.png","tags":["Rust"],"content":"<p><a href=\"https://github.com/alexcrichton/futures-rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">futures-rs</a> is a libary allows zero cost abstruction of state machine; <code>Future</code> trait in Rust.</p>\n<p>futures-await provides Async/await syntax for <code>futures-rs</code>.</p>\n<h2 id=\"async\"><a href=\"#async\">#[async]</a></h2>\n<p>make it returns future instead of result.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[async]</span> <span class=\"token comment\">// tagged with #[async] option</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fetch</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Err }</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"async_stream\"><a href=\"#async_stream\">#[async_stream]</a></h2>\n<p>stream instead of future</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[async_stream(item=T)]</span>\n<span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token macro property\">stream_yield!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"await-macro\"><a href=\"#await-macro\">await! macro</a></h2>\n<p><code>await!</code> macro allows blocking the procedure until completion, not blocking the thread.</p>\n<p>it behaves like a function returns <code>Result(e)</code></p>\n<p>here is a brief procedure of <code>await!</code> macro.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token macro property\">macro_rules!</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> future <span class=\"token operator\">=</span> <span class=\"token variable\">$e</span>\n  <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> future<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">break</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotReady</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// continue and wait</span>\n      <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// block until NotReady -> Ready(e)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token namespace\">futures<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Async</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotReady</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"async_block-macro\"><a href=\"#async_block-macro\">async_block! macro</a></h2>\n<p>it doesn't need a dedicated function like <code>#[async]</code>, (I think it's a like <code>thread::spawn()</code>, so it can be run with <code>core.run(Fn(async_block!))</code>)</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">spawn</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">JoinHandle</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">where</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span>\n\n</code></pre></div>\n<p>here's the brief internal procedure of async_block macro.</p>\n<div class=\"remark-highlight\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[proc_macro]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">async_block</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TokenStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">TokenStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// input -> TokenTree -> TokenStream -> parse -> TokenStream</span>\n  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">TokenStream</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenTree</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// parse input as token node</span>\n    <span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TokenNode</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Delimiter</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Brace</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> expr <span class=\"token operator\">=</span> <span class=\"token namespace\">syn<span class=\"token punctuation\">::</span></span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// token construction..</span>\n  token<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// return Stream</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"nightly-features\"><a href=\"#nightly-features\">nightly features</a></h2>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/43122\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">generators</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/35896\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">proc_macro</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/42183\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">conservative_impl_trait</a></li>\n</ul>","description":"memo","commits":[{"title":"copy md","date":"2021-01-30 22:18:17","hash":"35b550ae","diff":"<div class=\"remark-highlight\"><pre data-file=\"35b550ae.patch\" class=\"language-git  language-diff\"><code class=\"language-git\"><span class=\"token commit-sha1\">commit 35b550ae83af4efaeadf33471c8ca8a32c1079c8</span>\nAuthor: koka &#x26;<a href=\"mailto:lt;koka.code@gmail.com\" class=\"token email-link\">lt;koka.code@gmail.com</a>&#x26;gt;\nDate:   Sat Jan 30 22:18:17 2021 +0900\n\n  copy md\n\ndiff --git a/_posts/2018-01-11-reading-futures-await.md b/_posts/2018-01-11-reading-futures-await.md\nnew file mode 100644\nindex 0000000..6e034f0\n<span class=\"token deleted\">--- /dev/null</span>\n<span class=\"token inserted\">+++ b/_posts/2018-01-11-reading-futures-await.md</span>\n<span class=\"token coord\">@@ -0,0 +1,93 @@</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+title: memo:reading futures-await</span>\n<span class=\"token inserted\">+date: 2018-01-11</span>\n<span class=\"token inserted\">+categories:</span>\n<span class=\"token inserted\">+- Code Reading</span>\n<span class=\"token inserted\">+tags:</span>\n<span class=\"token inserted\">+  - Rust</span>\n<span class=\"token inserted\">+description: memo</span>\n<span class=\"token inserted\">+---</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+[futures-rs](https://github.com/alexcrichton/futures-rs) is a libary allows zero cost abstruction of state machine; `Future` trait in Rust.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+futures-await provides Async/await syntax for `futures-rs`.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## #[async]</span>\n<span class=\"token inserted\">+make it returns future instead of result.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[async] // tagged with #[async] option</span>\n<span class=\"token inserted\">+fn fetch(c: Client) -&#x26;gt; Result&#x26;lt;T&#x26;gt; {</span>\n<span class=\"token inserted\">+  let res = await!()?; // Optional</span>\n<span class=\"token inserted\">+  if !res.status().is_success() { // Err }</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## #[async_stream]</span>\n<span class=\"token inserted\">+stream instead of future</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[async_stream(item=T)]</span>\n<span class=\"token inserted\">+for s in T {</span>\n<span class=\"token inserted\">+  ...</span>\n<span class=\"token inserted\">+  stream_yield!(await!(..))</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## await! macro</span>\n<span class=\"token inserted\">+`await!` macro allows blocking the procedure until completion, not blocking the thread.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+it behaves like a function returns `Result(e)`</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+here is a brief procedure of `await!` macro.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+macro_rules! await {</span>\n<span class=\"token inserted\">+  let mut future = $e</span>\n<span class=\"token inserted\">+  loop {</span>\n<span class=\"token inserted\">+    match poll(&#x26;mut future) {</span>\n<span class=\"token inserted\">+      Ok(Ready(e)) =&#x26;gt; break Ok(e),</span>\n<span class=\"token inserted\">+      Ok(NotReady) =&#x26;gt; {}, // continue and wait</span>\n<span class=\"token inserted\">+      Err(e) =&#x26;gt; Err(e)</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  }</span>\n<span class=\"token inserted\">+  // block until NotReady -&#x26;gt; Ready(e)</span>\n<span class=\"token inserted\">+  yield futures::Async::NotReady</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## async_block! macro</span>\n<span class=\"token inserted\">+it doesn't need a dedicated function like `#[async]`, (I think it's a like `thread::spawn()`, so it can be run with `core.run(Fn(async_block!))`)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+pub fn spawn&#x26;lt;F, T&#x26;gt;(f: F) -&#x26;gt; JoinHandle&#x26;lt;T&#x26;gt;</span>\n<span class=\"token inserted\">+  where F: FnOnce() -&#x26;gt; T,</span>\n<span class=\"token inserted\">+  F: Send + 'static, T: Send + 'static</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+here's the brief internal procedure of async_block macro.</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+\\```rust</span>\n<span class=\"token inserted\">+#[proc_macro]</span>\n<span class=\"token inserted\">+fn async_block(i: TokenStream) -&#x26;gt; TokenStream {</span>\n<span class=\"token inserted\">+  // input -&#x26;gt; TokenTree -&#x26;gt; TokenStream -&#x26;gt; parse -&#x26;gt; TokenStream</span>\n<span class=\"token inserted\">+  let input = TokenStream::from(TokenTree {...,</span>\n<span class=\"token inserted\">+    // parse input as token node</span>\n<span class=\"token inserted\">+    ..., kind: TokenNode::Group(Delimiter::Brace, i)})</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  let expr = syn::parse(input)</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+  // token construction..</span>\n<span class=\"token inserted\">+  token.into() // return Stream</span>\n<span class=\"token inserted\">+}</span>\n<span class=\"token inserted\">+\\```</span>\n<span class=\"token inserted\">+</span>\n<span class=\"token inserted\">+## nightly features</span>\n<span class=\"token inserted\">+- [generators](https://github.com/rust-lang/rust/issues/43122)</span>\n<span class=\"token inserted\">+- [proc_macro](https://github.com/rust-lang/rust/issues/35896)</span>\n<span class=\"token inserted\">+- [conservative_impl_trait](https://github.com/rust-lang/rust/issues/42183)</span>\n<span class=\"token inserted\">+</span>\n</code></pre></div>"}],"publishedAt":"2018-01-11","updatedAt":"2021-01-30"}},"__N_SSG":true}